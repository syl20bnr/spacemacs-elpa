
(1 (zzz-to-char . [(20171231 2219) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Fancy version of `zap-to-char' command" single]) (zygospore . [(20140703 152) nil "reversible C-x 1 (delete-other-windows)" single]) (zweilight-theme . [(20170112 2205) nil "A dark color theme for Emacs." single]) (ztree . [(20180512 1150) ((cl-lib (0))) "Text mode directory tree" tar]) (zpresent . [(20180604 2138) ((emacs (25 1)) (org-parser (0 4)) (dash (2 12 0)) (request (0 3 0))) "Simple presentation mode based on org files." single]) (zoutline . [(20180314 1059) nil "Simple outline library." single]) (zotxt . [(20180517 1847) ((request-deferred (0 2 0))) "Tools to integrate emacs with Zotero via the zotxt plugin." tar]) (zotelo . [(20160602 249) ((cl-lib (0 5))) "Manage Zotero collections from emacs" single]) (zossima . [(20121123 1635) ((inf-ruby (2 2 3))) "Ruby from Emacs" tar]) (zop-to-char . [(20160212 754) ((cl-lib (0 5))) "A replacement of zap-to-char." single]) (zoom-window . [(20170302 27) ((emacs (24 3))) "Zoom window like tmux" single]) (zoom . [(20180310 421) ((emacs (24 4))) "Fixed and automatic balanced window layout" single]) (zone-sl . [(20160201 410) ((emacs (24 3))) "Zone out with steam locomotives." single]) (zone-select . [(20160118 619) ((emacs (24 3)) (dash (2 8))) "Select zone programs." single]) (zone-rainbow . [(20160120 534) ((emacs (24 3))) "Zone out with rainbow." single]) (zone-nyan . [(20170818 944) ((esxml (0 3 1))) "Zone out with nyan cat" single]) (zombie-trellys-mode . [(20150304 648) ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) "A minor mode for interaction with Zombie Trellys" single]) (zombie . [(20141222 816) nil "major mode for editing ZOMBIE programs" single]) (znc . [(20160627 1332) ((cl-lib (0 2))) "ZNC + ERC" single]) (zlc . [(20151010 1857) nil "Provides zsh like completion system to Emacs" single]) (zig-mode . [(20180309 1458) ((emacs (24))) "A major mode for the Zig programming language" single]) (zerodark-theme . [(20180528 26) ((all-the-icons (2 0 0)) (magit (2 8 0)) (flycheck (29))) "A dark, medium contrast theme for Emacs" single]) (zephir-mode . [(20170917 2125) ((cl-lib (0 5)) (pkg-info (0 4)) (emacs (24 3))) "Major mode for editing Zephir code" single]) (zenity-color-picker . [(20160302 354) ((emacs (24 4))) "Insert and adjust colors using Zenity" single]) (zencoding-mode . [(20140213 22) nil "Unfold CSS-selector-like expressions to markup" single]) (zenburn-theme . [(20180531 902) nil "A low contrast color theme for Emacs." single]) (zen-and-art-theme . [(20120622 737) nil "zen and art color theme for GNU Emacs 24" single]) (zel . [(20171014 132) ((emacs (25)) (frecency (0 1))) "Access frecent files easily" single]) (zeal-at-point . [(20180131 1554) nil "Search the word at point with Zeal" single]) (z3-mode . [(20151120 1455) ((flycheck (0 23)) (emacs (24))) "A z3/SMTLIBv2 interactive development environment" single]) (youdao-dictionary . [(20180713 2114) ((popup (0 5 0)) (pos-tip (0 4 6)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) "Youdao Dictionary interface for Emacs" single]) (yoshi-theme . [(20170330 0) nil "Theme named after my cat" single]) (yoficator . [(20180129 1252) nil "Interactively yoficate Russian texts" tar]) (yesql-ghosts . [(20150220 437) ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) "Display ghostly yesql defqueries inline" single]) (ydk-mode . [(20170113 121) nil "Language support for Yu-Gi-Oh! deck files" single]) (ycmd . [(20180724 556) ((emacs (24 4)) (dash (2 13 0)) (s (1 11 0)) (deferred (0 5 1)) (cl-lib (0 6 1)) (let-alist (1 0 5)) (request (0 3 0)) (request-deferred (0 3 0)) (pkg-info (0 6))) "emacs bindings to the ycmd completion server" tar]) (ycm . [(20150822 1136) nil "Emacs client for the YouCompleteMe auto-completion server." single]) (yaxception . [(20150105 652) nil "Provide framework about exception like Java for Elisp" single]) (yatex . [(20180601 2357) nil "Yet Another tex-mode for emacs //野鳥//" tar]) (yatemplate . [(20180617 252) ((yasnippet (0 8 1)) (emacs (24 3))) "File templates with yasnippet" tar]) (yasnippet-snippets . [(20180714 622) ((yasnippet (0 8 0))) "Collection of yasnippet snippets" tar]) (yasnippet . [(20180620 1750) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." single]) (yascroll . [(20170315 1206) ((cl-lib (0 3))) "Yet Another Scroll Bar Mode" single]) (yarn-mode . [(20170709 1237) ((emacs (24 3))) "Major mode for yarn.lock files." single]) (yari . [(20151127 2339) nil "Yet Another RI interface for Emacs" single]) (yard-mode . [(20170817 537) nil "Minor mode for Ruby YARD comments" single]) (yara-mode . [(20170719 2351) ((emacs (24))) "Major mode for editing yara rule file" single]) (yapfify . [(20180105 1447) nil "(automatically) format python buffers using YAPF." single]) (yankpad . [(20180624 1615) ((emacs (24))) "Paste snippets from an org-mode file" single]) (yang-mode . [(20180306 407) nil "major mode for editing YANG files" single]) (yandex-weather . [(20160311 1237) nil "Fetch Yandex Weather forecasts." tar]) (yaml-tomato . [(20151122 2353) ((s (1 9))) "copy or show the yaml path currently under cursor." single]) (yaml-mode . [(20180408 2307) ((emacs (24 1))) "Major mode for editing YAML files" single]) (yalinum . [(20130217 243) nil "yet another display line numbers." single]) (yahtzee . [(20171022 712) ((emacs (24 3))) "The yahtzee game" single]) (yahoo-weather . [(20170822 1544) ((emacs (24))) "Displays weather information in mode-line" single]) (yagist . [(20160417 2208) ((cl-lib (0 3))) "Yet Another Emacs integration for gist.github.com" single]) (yafolding . [(20170304 1917) nil "Yet another folding extension for Emacs" single]) (yabin . [(20140205 1951) nil "Yet Another Bignum package (A thin wrapper of calc.el)." single]) (xwidgete . [(20171118 1316) ((emacs (25))) "enhances usability of current xwidget browser" single]) (xtest . [(20141214 906) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single]) (xterm-keybinder . [(20160522 1756) ((emacs (24 3)) (cl-lib (0 5)) (let-alist (1 0 1))) "Let you extra keybinds in xterm/urxvt" tar]) (xterm-color . [(20180202 1518) ((cl-lib (0 5))) "ANSI & XTERM 256 color support" single]) (xresources-theme . [(20160331 702) nil "Use your .Xresources as your emacs theme" single]) (xref-js2 . [(20170530 126) ((emacs (25)) (js2-mode (20150909))) "Jump to references/definitions using ag & js2-mode's AST" single]) (xquery-tool . [(20170605 126) nil "A simple interface to saxonb's xquery." single]) (xquery-mode . [(20170214 319) ((cl-lib (0 5))) "A simple mode for editing xquery programs" single]) (xo . [(20160402 2346) nil "XO linter integration with compilation mode" single]) (xmlunicode . [(20160319 912) nil "Unicode support for XML" tar]) (xmlgen . [(20170411 617) nil "A DSL for generating XML." single]) (xml-rpc . [(20160430 1458) nil "An elisp implementation of clientside XML-RPC" single]) (xml-quotes . [(20151230 1449) nil "read quotations from an XML document" tar]) (xml+ . [(20170727 1651) ((emacs (24 4)) (dash (2 12 0))) "Utilities for xml and html trees" single]) (xkcd . [(20160419 430) ((json (1 3))) "View xkcd from Emacs" single]) (xcscope . [(20180426 12) nil "cscope interface for (X)Emacs" single]) (xcode-project . [(20180509 1218) ((emacs (25))) "A package for reading Xcode project files." tar]) (xcode-mode . [(20160907 508) ((emacs (24 4)) (s (1 10 0)) (dash (2 11 0)) (multiple-cursors (1 0 0))) "A minor mode for emacs to perform Xcode like actions." single]) (xbm-life . [(20160103 217) nil "A XBM version of Conway's Game of Life" single]) (xahk-mode . [(20170821 407) ((emacs (24 1))) "Major mode for editing AutoHotkey scripts." single]) (xah-replace-pairs . [(20180507 1949) ((emacs (24 1))) "emacs lisp functions for multi-pair find/replace." single]) (xah-reformat-code . [(20170821 411) nil "commands to reformat source code." single]) (xah-math-input . [(20180709 2228) ((emacs (24 1))) "a minor mode for inputting math and Unicode symbols." single]) (xah-lookup . [(20171108 241) ((emacs (24 1))) "look up word on internet." single]) (xah-get-thing . [(20170821 353) ((emacs (24 1))) "get thing or selection at point." single]) (xah-fly-keys . [(20180702 1521) ((emacs (24 1))) "ergonomic modal keybinding minor mode." single]) (xah-find . [(20180310 450) ((emacs (24 1))) "find replace in pure emacs lisp. Purpose similar to grep/sed." single]) (xah-elisp-mode . [(20180724 1613) ((emacs (24 3))) "Major mode for editing emacs lisp." single]) (xah-css-mode . [(20180629 107) ((emacs (24 3))) "Major mode for editing CSS code." single]) (x86-lookup . [(20180528 935) ((emacs (24 3)) (cl-lib (0 3))) "jump to x86 instruction documentation" single]) (x509-mode . [(20180702 36) ((emacs (24 1)) (cl-lib (0 5))) "View certificates, CRLs and keys using OpenSSL." tar]) (x-path-walker . [(20160922 1135) ((helm-core (1 9 2))) "Navigation feature for JSON/XML/HTML based on path (imenu like)" tar]) (www-synonyms . [(20170128 1451) ((request (0 2 0)) (cl-lib (0 5))) "insert synonym for a word" single]) (wwtime . [(20151122 810) nil "Insert a time of day with appropriate world-wide localization" single]) (wttrin . [(20170614 506) ((emacs (24 4)) (xterm-color (1 0))) "Emacs frontend for weather web service wttr.in" single]) (wsd-mode . [(20170731 837) nil "Emacs major-mode for www.websequencediagrams.com" tar]) (ws-butler . [(20170111 1534) nil "Unobtrusively remove trailing whitespace." single]) (writeroom-mode . [(20170623 327) ((emacs (24 1)) (visual-fill-column (1 9))) "Minor mode for distraction-free writing" tar]) (writegood-mode . [(20180525 643) nil "Polish up poor writing on the fly" single]) (wrap-region . [(20140116 2320) ((dash (1 0 3))) "Wrap text with punctation or tag" single]) (wotd . [(20170328 1248) ((emacs (24 4)) (org (8 2 10))) "Fetch word-of-the-day from multiple online sources" single]) (world-time-mode . [(20140627 107) nil "show whole days of world-time diffs" single]) (workgroups2 . [(20141102 1122) ((cl-lib (0 4)) (dash (2 8 0)) (anaphora (1 0 0)) (f (0 17))) "New workspaces for Emacs" single]) (workgroups . [(20110726 941) nil "workgroups for windows (for Emacs)" single]) (worf . [(20180620 1011) ((swiper (0 7 0)) (ace-link (0 1 0)) (hydra (0 13 0)) (zoutline (0 1 0))) "A warrior does not press so many keys! (in org-mode)" tar]) (wordsmith-mode . [(20171025 730) nil "Syntax analysis and NLP text-processing in Emacs (OSX-only)" single]) (wordnut . [(20180312 2143) ((emacs (24 4))) "Major mode interface to WordNet" tar]) (wordgen . [(20170803 1120) ((emacs (24)) (cl-lib (0 5))) "Random word generator" single]) (wonderland . [(20130912 1819) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single]) (wolfram-mode . [(20180306 1613) ((emacs (24 3))) "Mathematica editing and inferior mode." single]) (wolfram . [(20170122 2356) nil "Wolfram Alpha Integration" single]) (wn-mode . [(20151109 2152) ((emacs (24))) "numeric window switching shortcuts" single]) (with-simulated-input . [(20170820 2317) ((emacs (24 4)) (seq (2 0)) (s (0))) "A macro to simulate user input non-interactively" single]) (with-namespace . [(20130407 1122) ((dash (1 1 0)) (loop (1 1))) "interoperable elisp namespaces" single]) (with-editor . [(20180618 1602) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar]) (wispjs-mode . [(20170720 1219) ((clojure-mode (0))) "Major mode for Wisp code." single]) (wisp-mode . [(20180520 58) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" tar]) (winum . [(20171028 702) ((cl-lib (0 5)) (dash (2 13 0))) "Navigate windows and frames using numbers." single]) (winring . [(20180529 1718) nil "Window configuration rings" single]) (winpoint . [(20131023 1013) nil "Remember buffer positions per-window, not per buffer" single]) (winnow . [(20170903 506) ((emacs (24))) "winnow ag/grep results by matching/excluding lines" single]) (windwow . [(20170815 1848) ((dash (2 11 0)) (cl-lib (0 6 1)) (emacs (24))) "simple workspace management" single]) (windsize . [(20151121 540) nil "Simple, intuitive window resizing" single]) (window-purpose . [(20180531 1336) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) "Purpose-based window management for Emacs" tar]) (window-numbering . [(20160809 1110) nil "Numbered window shortcuts" single]) (window-number . [(20170731 1851) nil "Select windows by numbers." single]) (window-layout . [(20170214 1633) nil "window layout manager" single]) (window-jump . [(20170809 1508) nil "Move left/right/up/down through your windows." single]) (window-end-visible . [(20140508 1341) nil "Find the last visible point in a window" single]) (windata . [(20090830 340) nil "convert window configuration to list" single]) (win-switch . [(20161009 927) nil "fast, dynamic bindings for window-switching/resizing" single]) (wilt . [(20180220 54) ((emacs (24 3)) (dash (2 12 0)) (s (1 10 0))) "An extensions for calculating WILT in a buffer." single]) (wiki-summary . [(20150408 1422) ((emacs (24))) "View Wikipedia summaries in Emacs easily." single]) (wiki-nav . [(20150223 554) ((button-lock (1 0 2)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single]) (widgetjs . [(20160719 804) ((makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1)) (s (1 9 0))) "Widgetjs mode" single]) (widget-mvc . [(20150101 2006) nil "MVC framework for the emacs widgets" single]) (wide-column . [(20170925 913) nil "Calls functions dependant on column position." single]) (whole-line-or-region . [(20180324 2119) nil "operate on current line if region undefined" single]) (whizzml-mode . [(20180711 910) ((emacs (24 4))) "Programming mode for editing WhizzML files" tar]) (whitespace-cleanup-mode . [(20170505 1923) nil "Intelligently call whitespace-cleanup on save" single]) (white-theme . [(20160917 1043) ((emacs (24))) "Minimalistic light color theme inspired by basic-theme" single]) (white-sand-theme . [(20151117 848) ((emacs (24))) "Emacs theme with a light background." single]) (whitaker . [(20150814 422) ((dash (2 10 0))) "Comint interface for Whitaker's Words" single]) (which-key . [(20180621 1238) ((emacs (24 4))) "Display available keybindings in popup" single]) (what-the-commit . [(20150901 616) nil "Random commit message generator" single]) (wgrep-pt . [(20140510 1531) ((wgrep (2 1 5))) "Writable pt buffer and apply the changes to files" single]) (wgrep-helm . [(20170510 1539) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single]) (wgrep-ag . [(20160923 403) ((wgrep (2 1 5)) (cl-lib (0 5))) "Writable ag buffer and apply the changes to files" single]) (wgrep-ack . [(20141012 311) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single]) (wgrep . [(20180710 2326) nil "Writable grep buffer and apply the changes to files" single]) (weibo . [(20150307 1442) ((cl-lib (0 5))) "Weibo client for Emacs" tar]) (weechat-alert . [(20160416 548) ((weechat (0 3 1)) (cl-lib (0 5)) (alert (1 2))) "Weechat notifier using alerts" single]) (weechat . [(20180513 310) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar]) (wedge-ws . [(20140714 1449) nil "Wedge whitespace between columns in text" single]) (websocket . [(20180422 1716) ((cl-lib (0 5))) "Emacs WebSocket client and server" single]) (webpaste . [(20180127 1434) ((emacs (24 4)) (request (0 2 0)) (cl-lib (0 5))) "Paste to pastebin-like services" single]) (weblogger . [(20110926 918) ((xml-rpc (1 6 8))) "Weblog maintenance via XML-RPC APIs" single]) (webkit-color-picker . [(20180325 36) ((emacs (26 0)) (posframe (0 1 0))) "Insert and adjust colors using Webkit Widgets" tar]) (web-server . [(20140905 1706) ((emacs (24 3))) "Emacs Web Server" tar]) (web-search . [(20170911 1246) ((emacs (24 3))) "Open a web search" tar]) (web-narrow-mode . [(20170406 1910) ((web-mode (14 0 27))) "quick narrow code block in web-mode" single]) (web-mode-edit-element . [(20161114 954) ((emacs (24 4)) (web-mode (14))) "Helper-functions for attribute- and element-handling" tar]) (web-mode . [(20180628 422) ((emacs (23 1))) "major mode for editing web templates" single]) (web-completion-data . [(20160318 148) nil "Shared completion data for ac-html and company-web" tar]) (web-beautify . [(20161115 1447) nil "Format HTML, CSS and JavaScript/JSON" single]) (web . [(20141231 1201) ((dash (2 9 0)) (s (1 5 0))) "useful HTTP client" single]) (weather-metno . [(20150831 1807) ((emacs (24)) (cl-lib (0 3))) "Weather data from met.no in Emacs" tar]) (wcheck-mode . [(20180126 416) nil "General interface for text checkers" tar]) (wc-mode . [(20170126 2029) nil "Running word count with goals (minor mode)" single]) (wc-goal-mode . [(20140829 659) nil "Running word count with goals (minor mode)" single]) (wavefront-obj-mode . [(20170808 1016) nil "Major mode for Wavefront obj files" single]) (watch-buffer . [(20120331 1344) nil "run a shell command when saving a buffer" single]) (warm-night-theme . [(20161101 728) ((emacs (24))) "Emacs 24 theme with a dark background." single]) (wanderlust . [(20180605 631) ((semi (1 14 7))) "Yet Another Message Interface on Emacsen" tar]) (wandbox . [(20170603 531) ((emacs (24)) (request (0 3 0)) (s (1 10 0))) "Wandbox client" tar]) (wand . [(20180112 454) ((dash (20161121 55)) (s (20160928 636))) "Magic wand for Emacs - Select and execute" tar]) (wakib-keys . [(20180610 1952) ((emacs (24 4))) "Minor Mode for Modern Keybindings" single]) (wakatime-mode . [(20170517 2053) nil "Automatic time tracking extension for WakaTime" single]) (waher-theme . [(20141115 430) ((emacs (24 1))) "Emacs 24 theme based on waher for st2 by dduckster" single]) (waf-mode . [(20170403 1240) nil "Waf integration for Emacs" single]) (wacspace . [(20180311 1650) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar]) (w3m . [(20180404 2220) nil "an Emacs interface to w3m" tar]) (w32-browser . [(20170101 1154) nil "Run Windows application associated with a file." single]) (vyper-mode . [(20180707 1235) ((emacs (24 3))) "Major mode for the Vyper programming language" single]) (vue-mode . [(20180515 2012) ((mmm-mode (0 5 5)) (vue-html-mode (0 2)) (ssass-mode (0 2)) (edit-indirect (0 1 4))) "Major mode for vue component based on mmm-mode" single]) (vue-html-mode . [(20180428 1335) nil "Major mode for editing Vue.js templates" single]) (volume . [(20150718 1309) nil "tweak your sound card volume from Emacs" single]) (volatile-highlights . [(20160611 1855) nil "Minor mode for visual feedback on some operations." single]) (voca-builder . [(20161101 945) ((popup (0 5 2))) "Helps you build up your vocabulary" single]) (vmd-mode . [(20180223 556) ((emacs (24 3))) "Fast Github-flavored Markdown preview using a vmd subprocess." single]) (vlf . [(20180201 1454) nil "View Large Files" tar]) (visual-regexp-steroids . [(20170221 1853) ((visual-regexp (1 1))) "Extends visual-regexp to support other regexp engines" tar]) (visual-regexp . [(20170228 1716) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single]) (visual-fill-column . [(20180511 211) ((emacs (24 3))) "fill-column for visual-line-mode" single]) (visual-ascii-mode . [(20150129 246) nil "Visualize ascii code (small integer) on buffer." single]) (visible-mark . [(20150623 2150) nil "Make marks visible." single]) (virtualenvwrapper . [(20180211 1744) ((dash (1 5 0)) (s (1 6 1))) "a featureful virtualenv tool for Emacs" single]) (virtualenv . [(20140220 1501) nil "Virtualenv for Python" single]) (vimrc-mode . [(20170814 1837) nil "Major mode for vimrc files" single]) (vimish-fold . [(20171231 2212) ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) "Fold text like in Vim" single]) (vim-region . [(20140329 924) ((expand-region (20140127))) "Select region as vim" single]) (vim-empty-lines-mode . [(20150110 2026) ((emacs (23))) "Vim-like empty line indicator at end of files." single]) (viking-mode . [(20160705 1327) nil "kill first, ask later" single]) (viewer . [(20170106 1802) nil "View-mode extension" single]) (vi-tilde-fringe . [(20141027 1942) ((emacs (24))) "Displays tildes in the fringe on empty lines a la Vi." single]) (vhdl-tools . [(20180610 958) ((ggtags (0 8 12)) (emacs (26 1)) (outshine (2 0)) (helm (2 9 6))) "Utilities for navigating vhdl sources." single]) (vhdl-capf . [(20160221 934) nil "Completion at point function (capf) for vhdl-mode." single]) (vertigo . [(20180408 920) ((dash (2 11 0))) "Jump across lines using the home row." single]) (vertica-snippets . [(20180208 154) ((yasnippet (0 6 1))) "Yasnippets for Vertica" tar]) (vertica . [(20131217 711) ((sql (3 0))) "Vertica SQL mode extension" single]) (verify-url . [(20160426 528) ((cl-lib (0 5))) "find out invalid urls in the buffer or region" single]) (vector-utils . [(20140508 1341) nil "Vector-manipulation utility functions" single]) (vdirel . [(20170605 43) ((emacs (24 4)) (org-vcard (0 1 0)) (helm (1 7 0)) (seq (1 11))) "Manipulate vdir (i.e., vCard) repositories" single]) (vdiff-magit . [(20180719 1401) ((emacs (24 4)) (vdiff (0 3)) (magit (2 10 0))) "magit integration for vdiff" single]) (vdiff . [(20180719 1327) ((emacs (24 4)) (hydra (0 13 0))) "A diff tool similar to  vimdiff" single]) (vcomp . [(20140906 1508) nil "compare version strings" single]) (vcl-mode . [(20170119 1251) nil "Syntax highlighting for Varnish Command Language" single]) (vc-osc . [(20161119 1155) nil "non-resident support for osc version-control" single]) (vc-msg . [(20180604 1758) ((emacs (24 3)) (popup (0 5 0))) "Show commit information of current line" tar]) (vc-fossil . [(20180215 835) nil "VC backend for the fossil sofware configuraiton management system" tar]) (vc-darcs . [(20170904 2020) ((emacs (24))) "a VC backend for darcs" single]) (vc-check-status . [(20170107 534) nil "Warn you when quitting emacs and leaving repo dirty." tar]) (vc-auto-commit . [(20170107 533) nil "Auto-committing feature for your repository" tar]) (vbasense . [(20140221 1553) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar]) (vala-snippets . [(20150428 2052) ((yasnippet (0 8 0))) "Yasnippets for Vala" tar]) (vala-mode . [(20150324 1525) nil "Vala mode derived mode" single]) (vagrant-tramp . [(20160427 1632) ((dash (2 12 0))) "Vagrant method for TRAMP" tar]) (vagrant . [(20170301 1406) nil "Manage a vagrant box from emacs" single]) (v2ex-mode . [(20160719 2045) ((cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3))) "Major mode for visit http://v2ex.com/ site." single]) (uuidgen . [(20140918 1601) nil "Provides various UUID generating functions" single]) (uuid . [(20120910 151) nil "UUID's for EmacsLisp" single]) (utop . [(20180706 1549) ((emacs (24))) "Universal toplevel for OCaml" single]) (usql . [(20180305 1523) ((emacs (25 1))) "U-SQL support for sql-mode" single]) (use-ttf . [(20180608 2252) ((emacs (24 4)) (s (1 12 0))) "Use the same font cross OS." single]) (use-package-ensure-system-package . [(20180710 29) ((use-package (2 1)) (system-packages (1 0 4))) "auto install system packages" single]) (use-package-el-get . [(20180130 2105) ((use-package (1 0))) "el-get support for use package" single]) (use-package-chords . [(20180703 1258) ((use-package (2 1)) (bind-key (1 0)) (bind-chord (0 2)) (key-chord (0 6))) "key-chord keyword for use-package" single]) (use-package . [(20180715 1101) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar]) (usage-memo . [(20170925 1737) nil "integration of Emacs help system and memo" single]) (urlenc . [(20140116 656) nil "URL encoding/decoding utility for Emacs." single]) (url-shortener . [(20170804 1942) nil "shorten long url and expand tinyurl" single]) (uptimes . [(20180416 623) ((cl-lib (0 5)) (emacs (24))) "Track and display emacs session uptimes." single]) (upbo . [(20180422 122) ((dash (2 12 0)) (emacs (24 4))) "Karma Test Runner Integration" single]) (untitled-new-buffer . [(20161212 708) ((emacs (24 4)) (magic-filetype (0 2 0))) "Open untitled new buffer like other text editors." single]) (unkillable-scratch . [(20160504 1903) nil "Disallow buffers from being killed by regexp -- default is *scratch* buffer" single]) (universal-emotions-emoticons . [(20171209 1820) ((emacs (24 4))) "Emoticons For The Six Universal Expressions" single]) (unison-mode . [(20160513 801) nil "Syntax highlighting for unison file synchronization program" single]) (unison . [(20160704 40) ((emacs (24 1))) "sync with Unison" single]) (unipoint . [(20140113 1424) nil "a simple way to insert unicode characters by TeX name" single]) (unify-opening . [(20171122 1212) ((emacs (24 4))) "Unify the mechanism to open files" single]) (unidecode . [(20180312 1226) nil "Transliterate Unicode to ASCII" tar]) (unicode-whitespace . [(20140508 1341) ((ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single]) (unicode-troll-stopper . [(20151023 1831) nil "Minor mode for Highlighting Unicode homoglyphs" single]) (unicode-progress-reporter . [(20140508 1341) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single]) (unicode-input . [(20141218 2320) nil "Support for unicode character input" single]) (unicode-fonts . [(20150826 1532) ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) "Configure Unicode fonts" single]) (unicode-escape . [(20160614 534) ((emacs (24)) (names (20151201 0)) (dash (2 12 1))) "Escape/Unescape unicode notations" single]) (unicode-enbox . [(20140508 1341) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single]) (unicode-emoticons . [(20150204 308) nil "Shortcuts for common unicode emoticons" single]) (unfill . [(20170722 1846) nil "Unfill paragraphs or regions, and toggle between filled & unfilled" single]) (undohist . [(20150315 542) ((cl-lib (1 0))) "Persistent undo history for GNU Emacs" single]) (underwater-theme . [(20131117 1602) nil "A gentle, deep blue color theme" single]) (underline-with-char . [(20170814 223) ((emacs (24))) "Underline with a char" single]) (undercover . [(20180403 752) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs Lisp" single]) (uncrustify-mode . [(20130707 659) nil "Minor mode to automatically uncrustify." single]) (ukrainian-holidays . [(20130720 649) nil "Ukrainian holidays for Emacs calendar." single]) (ujelly-theme . [(20180214 824) nil "Ujelly theme for GNU Emacs 24 (deftheme)" single]) (uimage . [(20160901 521) nil "An iimage like mode with the ability to display url images" single]) (ucs-utils . [(20150826 714) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar]) (ubuntu-theme . [(20150805 806) nil "A theme inspired by the default terminal colors in Ubuntu" single]) (typoscript-mode . [(20170126 112) ((emacs (24 4)) (use-package (0))) "mode for TypoScript files" single]) (typo . [(20171209 223) nil "Minor mode for typographic editing" single]) (typit . [(20180317 107) ((emacs (24 4)) (f (0 18)) (mmt (0 1 1))) "Typing game similar to tests on 10 fast fingers" tar]) (typing-game . [(20160426 520) nil "a simple typing game" single]) (typing . [(20171115 2331) nil "The Typing Of Emacs" single]) (typescript-mode . [(20180708 1003) nil "Major mode for editing typescript" single]) (typed-clojure-mode . [(20151003 1122) ((clojure-mode (2 1 1)) (cider (0 10 0 -4))) "Typed Clojure minor mode for Emacs" tar]) (twittering-mode . [(20180507 721) nil "Major mode for Twitter" single]) (twilight-theme . [(20120412 603) nil "Twilight theme for GNU Emacs 24 (deftheme)" single]) (twilight-bright-theme . [(20130605 143) nil "A Emacs 24 faces port of the TextMate theme" single]) (twilight-anti-bright-theme . [(20160622 148) nil "A soothing Emacs 24 light-on-dark theme" single]) (twig-mode . [(20130220 1050) nil "A major mode for twig" single]) (turnip . [(20150308 2329) ((dash (2 6 0)) (s (1 9 0))) "Interacting with tmux from Emacs" single]) (turkish . [(20170910 811) nil "Convert to Turkish characters on-the-fly" single]) (turing-machine . [(20180221 2038) ((emacs (24 4))) "Single-tape Turing machine simulator" single]) (tup-mode . [(20140410 914) nil "Major mode for editing files for Tup" single]) (tumblesocks . [(20140215 1247) ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) "An Emacs tumblr client." tar]) (tumble . [(20160111 2329) ((http-post-simple (0)) (cl-lib (0 5))) "an Tumblr mode for Emacs" single]) (tuareg . [(20180512 1306) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar]) (ttl-mode . [(20160505 132) nil "mode for Turtle (and Notation 3)" single]) (tt-mode . [(20130804 410) nil "Emacs major mode for editing Template Toolkit files." single]) (tss . [(20150913 708) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar]) (ts-comint . [(20171105 2247) nil "Run a Typescript interpreter in an inferior process window." single]) (try . [(20170226 805) ((emacs (24))) "Try out Emacs packages." single]) (truthy . [(20140508 1341) ((list-utils (0 4 2))) "Test the content of a value" single]) (trr . [(20170221 42) nil "a type-writing training program on GNU Emacs." tar]) (trident-mode . [(20130726 1207) ((emacs (24)) (slime (20130526)) (skewer-mode (1 5 0)) (dash (1 0 3))) "Live Parenscript interaction" single]) (treepy . [(20180723 2356) ((emacs (25 1))) "Generic tree traversal tools" single]) (treemacs-projectile . [(20180614 1021) ((projectile (0 14 0)) (treemacs (0))) "Projectile integration for treemacs" single]) (treemacs-evil . [(20180622 426) ((evil (1 2 12)) (treemacs (0))) "Evil mode integration for treemacs" single]) (treemacs . [(20180723 2237) ((emacs (25 2)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 10 0)) (f (0 11 0)) (ace-window (0 9 0)) (pfuture (1 2)) (hydra (0 13 2)) (ht (2 2))) "A tree style file explorer package" tar]) (tree-mode . [(20151104 531) nil "A mode to manage tree widgets" single]) (travis . [(20150825 438) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Travis" tar]) (transpose-mark . [(20150405 16) nil "Transpose data using the Emacs mark" single]) (transpose-frame . [(20151126 626) nil "Transpose windows arrangement in a frame" single]) (transmission . [(20180610 1653) ((emacs (24 4)) (let-alist (1 0 5))) "Interface to a Transmission session" single]) (transfer-sh . [(20180603 731) ((async (1 0))) "Simple interface for sending buffer contents to transfer.sh" single]) (tramp-term . [(20180223 727) nil "Automatic setup of directory tracking in ssh sessions." single]) (tramp-hdfs . [(20170821 620) ((emacs (24 4))) "Tramp extension to access hadoop/hdfs file system in Emacs" single]) (tracwiki-mode . [(20150119 821) ((xml-rpc (1 6 8))) "Emacs Major mode for working with Trac" single]) (tracking . [(20171210 1302) nil "Buffer modification tracking" tar]) (traad . [(20180720 512) ((dash (2 13 0)) (deferred (0 3 2)) (popup (0 5 0)) (request (0 2 0)) (request-deferred (0 2 0)) (virtualenvwrapper (20151123)) (f (0 20 0))) "emacs interface to the traad refactoring server." single]) (tql-mode . [(20170723 1954) ((emacs (24))) "TQL mode" single]) (toxi-theme . [(20160424 1426) ((emacs (24))) "A dark color theme by toxi" single]) (tox . [(20160810 855) nil "Launch current python test with tox" single]) (totd . [(20150519 740) ((s (1 9 0)) (cl-lib (0 5))) "Display a random daily emacs command." single]) (total-lines . [(20171227 439) ((emacs (24 3))) "Keep track of a buffer's total number of lines" single]) (tornado-template-mode . [(20141128 208) nil "A major mode for editing tornado templates" single]) (tommyh-theme . [(20131004 1630) nil "A bright, bold-colored theme for emacs" single]) (toml-mode . [(20161107 1000) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing TOML files" single]) (toml . [(20130903 555) nil "TOML (Tom's Obvious, Minimal Language) parser" single]) (tomatinho . [(20180621 1048) nil "Simple and beautiful pomodoro timer" tar]) (toggle-window . [(20141207 748) nil "toggle current window size between half and full" single]) (toggle-test . [(20140722 2237) nil "Toggle between source and test files in various programming languages" single]) (toggle-quotes . [(20140710 226) nil "Toggle between single and double quoted string" single]) (toggle . [(20180315 1703) ((cl-lib (0 5))) "quickly open corresponding file (eg test vs impl)." single]) (togetherly . [(20170425 2316) ((cl-lib (0 3))) "allow multiple clients to edit a single buffer online" single]) (todotxt-mode . [(20150424 704) nil "Major mode for editing todo.txt files" single]) (todotxt . [(20180626 1530) nil "A major mode for editing todo.txt files" single]) (toc-org . [(20180613 840) nil "add table of contents to org-mode files (formerly, org-toc)" single]) (tmmofl . [(20121025 401) nil "Calls functions dependant on font lock highlighting at point" single]) (tldr . [(20180122 312) ((emacs (24 3))) "tldr client for Emacs" single]) (tj3-mode . [(20180519 528) nil "major mode for editing TaskJuggler 3 files" single]) (tinysegmenter . [(20141124 213) ((cl-lib (0 5))) "Super compact Japanese tokenizer in Javascript ported to emacs lisp" single]) (tiny-menu . [(20161213 435) ((emacs (24 4))) "Display tiny menus." single]) (tiny . [(20170903 249) nil "Quickly generate linear ranges in Emacs" single]) (tinkerer . [(20170906 524) ((s (1 2 0))) "Elisp wrapper for Tinkerer Blogging Engine." single]) (timp . [(20160618 103) ((emacs (24 4)) (cl-lib (0 5)) (fifo-class (1 0)) (signal (1 0))) "Multithreading library" tar]) (timonier . [(20170411 100) ((emacs (24 4)) (s (1 11 0)) (f (0 19 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (hydra (0 13 6)) (request (0 2 0)) (all-the-icons (2 0 0))) "Manage Kubernetes Applications" tar]) (timesheet . [(20160530 1445) ((s (1)) (org (7)) (auctex (11))) "Timesheet management add-on for org-mode" tar]) (timer-revert . [(20150122 1232) nil "minor mode to revert buffer for a given time interval." tar]) (timecop . [(20160520 352) ((cl-lib (0 5)) (datetime-format (0 0 1))) "Freeze Time for testing" single]) (time-ext . [(20170126 415) nil "more function for time/date" single]) (tile . [(20161224 1957) ((emacs (25 1)) (s (1 9 0)) (dash (2 12 0)) (stream (2 2 3))) "Tile windows with layouts" single]) (tide . [(20180713 30) ((dash (2 10 0)) (s (1 11 0)) (flycheck (27)) (typescript-mode (0 1)) (cl-lib (0 5))) "Typescript Interactive Development Environment" tar]) (tidal . [(20180410 1245) ((haskell-mode (16)) (emacs (24))) "Interact with TidalCycles for live coding patterns" single]) (tickscript-mode . [(20171218 1803) ((emacs (24 1))) "A major mode for Tickscript files" single]) (thumb-through . [(20120118 2134) nil "Plain text reader of HTML documents" single]) (thrift . [(20140312 1348) nil "Major mode for Apache Thrift files" single]) (threes . [(20160820 542) ((emacs (24)) (seq (1 11))) "A clone of Threes (a tiny puzzle game)" single]) (thread-dump . [(20170816 1150) nil "Java thread dump viewer" single]) (thinks . [(20170802 428) ((cl-lib (0 5))) "Insert text in a think bubble." single]) (thingopt . [(20160520 1618) nil "Thing at Point optional utilities" single]) (therapy . [(20151113 1153) ((emacs (24))) "Hooks for managing multiple Python major versions" single]) (theme-looper . [(20170425 606) ((cl-lib (0 5))) "Loop thru the available color-themes" single]) (theme-changer . [(20171221 1127) nil "Sunrise/Sunset Theme Changer for Emacs" single]) (tfsmacs . [(20180724 1538) ((emacs (25)) (tablist (0 70))) "MS TFS source control interaction." single]) (tf2-conf-mode . [(20161209 820) nil "TF2 Configuration files syntax highlighting" single]) (textx-mode . [(20170516 211) ((emacs (24 3))) "Major mode for editing TextX files" single]) (textmate-to-yas . [(20160409 1008) nil "Import Textmate macros into yasnippet syntax" tar]) (textmate . [(20110816 1446) nil "TextMate minor mode for Emacs" single]) (textile-mode . [(20170304 916) nil "Textile markup editing major mode" single]) (texfrag . [(20180318 1647) ((emacs (25)) (auctex (11 90 2))) "preview LaTeX fragments in alien major modes" single]) (tex-smart-umlauts . [(20160427 58) nil "Smart umlaut conversion for TeX." single]) (test-simple . [(20170527 832) ((cl-lib (0))) "Simple Unit Test Framework for Emacs Lisp" single]) (test-kitchen . [(20171129 1235) nil "Run test-kitchen inside of emacs" single]) (test-case-mode . [(20130525 734) ((fringe-helper (0 1 1))) "unit test front-end" single]) (test-c . [(20180423 1020) ((emacs (24 3))) "quickly test c code" single]) (terraform-mode . [(20170111 2117) ((emacs (24 3)) (hcl-mode (0 3))) "Major mode for terraform configuration file" single]) (tern-django . [(20160221 1123) ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) "Create tern projects for django applications." tar]) (tern-context-coloring . [(20161217 2347) ((emacs (24 3)) (context-coloring (8 1 0)) (tern (0 0 1))) "Use Tern for context coloring" single]) (tern-auto-complete . [(20170521 1235) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single]) (tern . [(20170925 1333) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single]) (terminal-here . [(20180513 133) ((emacs (24)) (cl-lib (0 5))) "Run an external terminal in current directory" single]) (termbright-theme . [(20151030 1935) ((emacs (24 1))) "a more usable theme for white-on-black terminals" single]) (term-run . [(20151228 105) nil "Run arbitrary command in terminal buffer" single]) (term-projectile . [(20170421 105) ((emacs (24)) (term-manager (0 1 0)) (projectile (0 13 0))) "projectile terminal management" single]) (term-manager . [(20171020 141) ((dash (2 12 0)) (emacs (24 4))) "Contextual terminal management" tar]) (term-cmd . [(20160517 345) ((emacs (24 0)) (dash (2 12 0)) (f (0 18 2))) "Send commands from programs running in term.el." tar]) (term-alert . [(20161119 145) ((emacs (24 0)) (term-cmd (1 1)) (alert (1 1)) (f (0 18 2))) "Notifications when commands complete in term.el." tar]) (term+mux . [(20140210 2349) ((term+ (0 1)) (tab-group (0 1))) "term+ terminal multiplexer and session management" single]) (term+key-intercept . [(20140210 2350) ((term+ (0 1)) (key-intercept (0 1))) "term+ intercept key mapping" single]) (term+ . [(20170508 1717) ((emacs (24)) (cl-lib (0 5))) "term-mode enhancement" tar]) (ten-hundred-mode . [(20161028 1536) ((cl-lib (0 5))) "use only the ten hundred most usual words" tar]) (temporary-persistent . [(20161210 333) ((emacs (24 3)) (names (20151201 0)) (dash (2 12 1)) (s (1 10 0))) "Keep temp notes buffers persistent -*- lexical-binding: t" single]) (template-overlays . [(20180706 432) ((emacs (24 4)) (ov (1 0 6))) "Display template regions using overlays" single]) (telephone-line . [(20180601 1943) ((emacs (24 4)) (cl-lib (0 5)) (cl-generic (0 2)) (seq (1 8))) "Rewrite of Powerline" tar]) (telepathy . [(20131209 458) nil "Access Telepathy from Emacs" single]) (tea-time . [(20120331 120) nil "Simple timer package, useful to make perfect tea." single]) (tdd-status-mode-line . [(20131123 916) nil "TDD status on the mode-line" single]) (tco . [(20160810 1712) ((dash (1 2 0)) (emacs (24))) "tail-call optimisation for Emacs lisp" single]) (tc . [(20180715 6) nil "a Japanese input method with T-Code on Emacs" tar]) (tbx2org . [(20140224 759) ((dash (2 5 0)) (s (1 8 0)) (cl-lib (0 4))) "Tinderbox to org-mode conversion" single]) (tblui . [(20161007 1212) ((dash (2 12 1)) (magit-popup (2 6 0)) (tablist (0 70)) (cl-lib (0 5))) "Define tabulated list UI easily" single]) (tawny-mode . [(20170422 1502) ((cider (0 12)) (emacs (25))) "Ontology Editing with Tawny-OWL" single]) (taskpaper-mode . [(20180710 158) nil "Major mode for working with TaskPaper files" tar]) (tao-theme . [(20171221 1001) nil "This package provides two parametrized uncoloured color themes for Emacs: tao-yin and tao-yang." tar]) (tangotango-theme . [(20170924 809) nil "Tango Palette color theme for Emacs 24." single]) (tango-plus-theme . [(20170214 908) nil "A color theme based on the tango palette" single]) (tango-2-theme . [(20120312 1325) nil "Tango 2 color theme for GNU Emacs 24" single]) (take-off . [(20140531 217) ((emacs (24 3)) (web-server (0 1 0))) "Emacs remote web access" tar]) (tagedit . [(20161121 55) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single]) (tabula-rasa . [(20141215 2147) ((emacs (24 4))) "Distraction free writing mode" single]) (tablist . [(20170219 1935) ((emacs (24 3))) "Extended tabulated-list-mode" tar]) (tabbar-ruler . [(20160801 2007) ((tabbar (2 0 1)) (powerline (2 3)) (mode-icons (0 4 0)) (cl-lib (0 5))) "Pretty tabbar, autohide, use both tabbar/ruler" tar]) (tabbar . [(20160524 1401) nil "Display a tab bar in the header line" tar]) (tab-jump-out . [(20151005 1830) ((dash (2 10)) (emacs (24 4))) "Use tab to jump out of delimiter pairs." single]) (tab-group . [(20140306 650) nil "Grouped tabs and their tabbar" single]) (ta . [(20160619 945) ((emacs (24 3)) (cl-lib (0 5))) "A tool to deal with Chinese homophonic characters" single]) (systemtap-mode . [(20151122 1140) nil "A mode for SystemTap" single]) (systemd . [(20180629 1406) ((emacs (24 4))) "Major mode for editing systemd units" tar]) (system-specific-settings . [(20140818 757) nil "Apply settings only on certain systems" single]) (system-packages . [(20180724 1648) ((emacs (24 3))) "functions to manage system packages" single]) (syntax-subword . [(20160519 1205) nil "make operations on words more fine-grained" single]) (syntactic-sugar . [(20140508 1341) nil "Effect-free forms such as if/then/else" single]) (syntactic-close . [(20180722 935) ((emacs (24)) (cl-lib (0 5))) "Insert closing delimiter" single]) (synquid . [(20160930 850) ((flycheck (27)) (emacs (24 3))) "Major mode for editing Synquid files" single]) (synosaurus . [(20180125 1034) ((cl-lib (0 5))) "An extensible thesaurus supporting lookup and substitution." tar]) (synonymous . [(20180325 1117) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "A thesaurus at your fingertips" single]) (syndicate . [(20160603 823) ((evil (1 0))) "evil keybindings for org-mode" single]) (sync-recentf . [(20160326 1301) nil "Synchronize the recent files list between Emacs instances" single]) (symon-lingr . [(20150719 642) ((symon (1 1 2)) (cl-lib (0 5))) "A notification-based Lingr client powered by symon.el" single]) (symon . [(20170224 33) nil "tiny graphical system monitor" single]) (symbolword-mode . [(20180401 727) ((emacs (24)) (f (0 19 0))) "modify word split" single]) (symbol-overlay . [(20180412 339) ((emacs (24 3))) "Highlight symbols with keymap-enabled overlays" single]) (sx . [(20180606 36) ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" tar]) (sws-mode . [(20150317 1245) nil "(S)ignificant (W)hite(S)pace mode" single]) (swoop . [(20160120 915) ((ht (2 0)) (pcre2el (1 5)) (async (1 1)) (emacs (24))) "Peculiar buffer navigation for Emacs" tar]) (switch-window . [(20180723 2118) ((emacs (24))) "A *visual* way to switch window" tar]) (switch-buffer-functions . [(20171011 1004) nil "Hook run when current buffer changed" single]) (swiper-helm . [(20180131 944) ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) "Helm version of Swiper." single]) (swiper . [(20180713 946) ((emacs (24 1)) (ivy (0 9 0))) "Isearch with an overview. Oh, man!" single]) (swift3-mode . [(20160918 550) ((emacs (24 4))) "Major-mode for Apple's Swift programming language." tar]) (swift-mode . [(20180721 35) ((emacs (24 4)) (seq (2 3))) "Major-mode for Apple's Swift programming language." tar]) (sweetgreen . [(20180604 2035) ((dash (2 12 1)) (helm (1 5 6)) (request (0 2 0)) (cl-lib (0 5))) "Order Salads from sweetgreen.com" single]) (swap-regions . [(20180116 253) ((emacs (24 3))) "Swap text in two regions" single]) (swap-buffers . [(20150506 1439) nil "The quickest way to swap buffers between windows. Based on switch-window package." single]) (swagger-to-org . [(20160610 1756) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "Convert a swagger.json file into an org-mode file" single]) (svnwrapper . [(20180414 1143) ((e2ansi (0 1 1))) "Highlighting and paging for shell command `svn'" tar]) (svg-mode-line-themes . [(20150425 1306) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar]) (suscolors-theme . [(20161109 1215) nil "Colorful theme, inspired by Gruvbox." single]) (supergenpass . [(20130328 2248) nil "SuperGenPass for Emacs" single]) (super-save . [(20171008 3) ((emacs (24 4))) "Auto-save buffers, based on your activity." single]) (suomalainen-kalenteri . [(20170801 126) nil "Finnish national and Christian holidays for calendar" tar]) (sunshine . [(20180325 548) ((cl-lib (0 5))) "Provide weather and forecast information." single]) (sunny-day-theme . [(20140413 1425) nil "Emacs24 theme with a light background." single]) (sunburn-theme . [(20180602 1229) ((emacs (24))) "A low contrast color theme" single]) (suggestion-box . [(20170830 107) ((emacs (25 1)) (popup (0 5 3))) "show tooltip on the cursor" single]) (suggest . [(20180722 350) ((emacs (24 4)) (loop (1 3)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2)) (spinner (1 7 3))) "suggest elisp functions that give the output requested" tar]) (sudoku . [(20161110 2306) ((emacs (24 4))) "Simple sudoku game, can download puzzles" single]) (sudo-ext . [(20170126 414) nil "sudo support" single]) (sudo-edit . [(20180608 911) ((emacs (24)) (cl-lib (0 5))) "Open files as another user" single]) (sudden-death . [(20180216 1623) nil "Totsuzen-no-Shi" single]) (sublimity . [(20170820 827) ((cl-lib (0 3))) "smooth-scrolling, minimap and distraction-free mode" tar]) (sublime-themes . [(20170606 1144) nil "A collection of themes based on Sublime Text" tar]) (subemacs . [(20170401 234) nil "Evaluating expressions in a fresh Emacs subprocess" single]) (subatomic256-theme . [(20130620 1910) nil "Fork of subatomic-theme for terminals." single]) (subatomic-theme . [(20160126 738) nil "Low contrast bluish color theme" single]) (stylus-mode . [(20150313 812) ((sws-mode (0))) "Major mode for editing .jade files" single]) (stylefmt . [(20161025 124) nil "Stylefmt interface" single]) (stupid-indent-mode . [(20170525 417) nil "Plain stupid indentation minor mode" single]) (stumpwm-mode . [(20140130 1816) nil "special lisp mode for evaluating code into running stumpwm" single]) (stripe-buffer . [(20141208 708) ((cl-lib (1 0))) "Use a different background for even and odd lines" single]) (string-utils . [(20140508 1341) ((list-utils (0 4 2))) "String-manipulation utilities" single]) (string-inflection . [(20180722 2141) nil "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" single]) (string-edit . [(20160410 2356) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single]) (strie . [(20160211 1422) ((cl-lib (0 5))) "A simple trie data structure implementation" single]) (strace-mode . [(20171116 1239) nil "strace output syntax highlighting" single]) (stock-ticker . [(20150204 252) ((s (1 9 0)) (request (0 2 0))) "Show stock prices in mode line" single]) (stickyfunc-enhance . [(20150429 1114) ((emacs (24 3))) "An enhancement to stock `semantic-stickyfunc-mode'" single]) (sticky . [(20170925 1736) nil "Sticky key for capital letters" single]) (stgit . [(20171130 759) nil "major mode for StGit interaction" single]) (stem-english . [(20180108 1958) ((emacs (24 3))) "- routines for stemming English word" single]) (stem . [(20131102 409) nil "Routines for stemming" single]) (steam . [(20171108 1613) ((cl-lib (0 5))) "Organize and launch Steam games" single]) (status . [(20151230 608) nil "This package adds support for status icons to Emacs." tar]) (state . [(20180627 1256) ((emacs (24))) "Quick navigation between workspaces" single]) (stash . [(20151117 627) nil "lightweight persistent caching" single]) (start-menu . [(20160426 525) ((cl-lib (0 5)) (config-parser (0 1))) "start-menu for executing external program like in windows" single]) (standoff-mode . [(20171115 931) nil "Create stand-off markup, also called external markup." tar]) (stan-snippets . [(20161023 1958) ((stan-mode (9 2 0)) (yasnippet (0 8 0))) "Yasnippets for Stan" tar]) (stan-mode . [(20180110 1441) nil "Major mode for editing Stan files" tar]) (stack-mode . [(20150923 823) ((haskell-mode (13 14)) (cl-lib (0 5)) (flycheck (0 23))) "A minor mode enabling various features based on stack-ide." tar]) (ssh-tunnels . [(20180703 1327) ((cl-lib (0 5)) (emacs (24))) "Manage SSH tunnels" single]) (ssh-deploy . [(20180713 650) ((emacs (24))) "Deployment via TRAMP, global or per directory." tar]) (ssh-config-mode . [(20180609 251) nil "Mode for fontification of ~/.ssh/config" tar]) (ssh-agency . [(20180507 1726) ((emacs (24 4)) (dash (2 10 0))) "manage ssh-agent from Emacs" single]) (ssh . [(20120904 1342) nil "Support for remote logins using ssh." single]) (ssass-mode . [(20180428 1339) ((emacs (24 3))) "Edit Sass without a Turing Machine" single]) (srefactor . [(20180703 1110) ((emacs (24 4))) "A refactoring tool based on Semantic parser framework" tar]) (srcery-theme . [(20180623 619) ((emacs (24))) "Dark color theme." single]) (sr-speedbar . [(20161025 131) nil "Same frame speedbar" single]) (sqlup-mode . [(20170610 837) nil "Upcase SQL words for you" single]) (sqlite . [(20180708 1011) nil "use sqlite via elisp" single]) (sql-indent . [(20170112 1507) nil "indentation of SQL statements" single]) (sql-impala . [(20160427 1658) nil "comint support for Cloudera Impala" single]) (sql-clickhouse . [(20180302 755) ((emacs (24))) "support ClickHouse as SQL interpreter" single]) (spu . [(20161213 1924) ((emacs (24 4)) (signal (1 0)) (timp (1 2 0))) "Silently upgrade package in the background" tar]) (sprunge . [(20160229 1843) ((request (0 2 0)) (cl-lib (0 5))) "Upload pastes to sprunge.us" single]) (sproto-mode . [(20151115 1005) nil "Major mode for editing sproto." single]) (sprintly-mode . [(20121005 2234) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single]) (springboard . [(20170105 2355) ((helm (1 6 9))) "Temporarily change default-directory for one command" single]) (spray . [(20160304 1420) nil "a speed reading mode" single]) (spotlight . [(20150929 55) ((emacs (24 1)) (swiper (0 6 0)) (counsel (0 6 0))) "search files with Mac OS X spotlight" single]) (spotify . [(20170302 2229) ((cl-lib (0 5))) "Control the spotify application from emacs" single]) (splitter . [(20170809 1508) nil "Manage window splits" single]) (splitjoin . [(20150505 732) ((cl-lib (0 5))) "Transition between multiline and single-line code" single]) (spiral . [(20180223 340) ((emacs (25 1)) (a (0 1 0 -3 4)) (avy (0 4 0)) (clojure-mode (5 6 0)) (highlight (0)) (treepy (1 0 0))) "Clojure IDE based on UNREPL" tar]) (spice-mode . [(20171027 2343) ((emacs (24 3))) "Major mode for SPICE" single]) (sphinx-mode . [(20180620 215) ((f (0 20 0)) (dash (2 14 1))) "Minor mode providing sphinx support." tar]) (sphinx-frontend . [(20161025 58) nil "Launch build process for rst documents via sphinx." single]) (sphinx-doc . [(20160116 317) ((s (1 9 0)) (cl-lib (0 5)) (dash (2 10 0))) "Sphinx friendly docstrings for Python functions" single]) (speeddating . [(20180319 23) ((emacs (25))) "Increase date and time at point" single]) (speed-type . [(20171230 847) ((emacs (24 3)) (cl-lib (0 3))) "Practice touch and speed typing" single]) (speechd-el . [(20180105 1217) nil "Client to speech synthesizers and Braille displays." tar]) (speech-tagger . [(20170728 1129) ((cl-lib (0 5))) "tag parts of speech using coreNLP" tar]) (sparql-mode . [(20180320 1102) ((cl-lib (0 5)) (emacs (24 3))) "Edit and interactively evaluate SPARQL queries." tar]) (sparkline . [(20150101 519) ((cl-lib (0 3))) "Make sparkline images from a list of numbers" single]) (spark . [(20160414 1901) ((emacs (24 3))) "sparkline generation" single]) (spaces . [(20170809 1508) nil "Create and switch between named window configurations." single]) (spacemacs-theme . [(20180618 1129) nil "Color theme with a dark and light versions" tar]) (spaceline-all-the-icons . [(20170829 120) ((emacs (24 4)) (all-the-icons (2 6 0)) (spaceline (2 0 0)) (memoize (1 0 1))) "A Spaceline theme using All The Icons" tar]) (spaceline . [(20180628 46) ((emacs (24 4)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar]) (spacegray-theme . [(20150719 1231) ((emacs (24 1))) "A Hyperminimal UI Theme" single]) (sourcetrail . [(20170410 1437) ((emacs (24 4))) "Communication with Sourcetrail" single]) (sourcerer-theme . [(20161014 925) nil "A version of sourcerer by xero" single]) (sourcemap . [(20161215 2140) ((emacs (24 3))) "Sourcemap parser" single]) (sourcekit . [(20180101 34) ((emacs (24 3)) (dash (2 12 1)) (dash-functional (1 2 0)) (request (0 2 0))) "Library to interact with sourcekittendaemon" single]) (soundklaus . [(20160314 531) ((dash (2 12 1)) (emacs (24)) (emms (4 0)) (s (1 11 0)) (pkg-info (0 4)) (cl-lib (0 5)) (request (0 2 0))) "Play music on SoundCloud with Emacs via EMMS" tar]) (soundcloud . [(20150501 2026) ((emms (20131016)) (json (1 2)) (deferred (0 3 1)) (string-utils (0 3 2)) (request (20140316 417)) (request-deferred (20130526 1015))) "a SoundCloud client for Emacs" single]) (sound-wav . [(20160725 724) ((deferred (0 3 1)) (cl-lib (0 5))) "Play wav file" single]) (sotlisp . [(20180706 1049) ((emacs (24 1))) "Write lisp at the speed of thought." single]) (sotclojure . [(20170921 1708) ((emacs (24 1)) (clojure-mode (4 0 0)) (cider (0 8)) (sotlisp (1 3))) "Write clojure at the speed of thought." tar]) (sos . [(20141214 2003) ((org (7))) "StackOverflow Search" single]) (sort-words . [(20160929 635) nil "Sort words in a selected region" single]) (soothe-theme . [(20141027 741) ((emacs (24 1))) "a dark colorful theme for Emacs24." single]) (sonic-pi . [(20171205 405) ((cl-lib (0 5)) (osc (0 1)) (dash (2 2 0)) (emacs (24)) (highlight (0))) "A Emacs client for SonicPi" tar]) (solidity-mode . [(20180721 1614) nil "Major mode for ethereum's solidity language" tar]) (solarized-theme . [(20180621 1407) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar]) (solaire-mode . [(20180521 235) ((emacs (24 4)) (cl-lib (0 5))) "make certain buffers grossly incandescent" single]) (soft-stone-theme . [(20140614 135) ((emacs (24))) "Emacs 24 theme with a light background." single]) (soft-morning-theme . [(20150918 1341) nil "Emacs24 theme with a light background." single]) (soft-charcoal-theme . [(20140420 943) nil "Dark charcoal theme with soft colors" single]) (socyl . [(20170211 2242) ((s (1 11 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Frontend for several search tools" tar]) (snoopy . [(20171008 1304) ((emacs (24)) (cl-lib (0 6))) "minor mode for number row unshifted character insertion" single]) (snippet . [(20130210 1515) nil "Insert snippets of text into a buffer" single]) (snazzy-theme . [(20170823 1132) ((emacs (24)) (base16-theme (2 1))) "An elegant syntax theme with bright colors" single]) (snapshot-timemachine-rsnapshot . [(20170324 513) ((snapshot-timemachine (20160222 132)) (seq (2 19))) "rsnapshot backend for snapshot-timemachine" single]) (snapshot-timemachine . [(20161221 129) ((emacs (24 4))) "Step through (Btrfs, ZFS, ...) snapshots of files" single]) (snakemake-mode . [(20180519 1739) ((emacs (24)) (cl-lib (0 5)) (magit-popup (2 4 0))) "Major mode for editing Snakemake files" tar]) (smyx-theme . [(20141127 28) nil "smyx Color Theme" single]) (smtpmail-multi . [(20160218 1549) nil "Use different smtp servers for sending mail" single]) (smotitah . [(20150218 230) nil "Modular emacs configuration framework" tar]) (smooth-scrolling . [(20161002 1249) nil "Make emacs scroll smoothly" single]) (smooth-scroll . [(20130321 2114) nil "Minor mode for smooth scrolling and in-place scrolling." single]) (smmry . [(20161024 201) nil "SMMRY client" single]) (sml-modeline . [(20170614 1411) nil "Show position in a scrollbar like way in mode-line" single]) (smiles-mode . [(20160717 420) nil "Major mode for SMILES." single]) (smex . [(20151212 1409) ((emacs (24))) "M-x interface with Ido-style fuzzy matching." single]) (smeargle . [(20161212 1558) ((emacs (24 3))) "Highlighting region by last updated time" single]) (smblog . [(20170419 321) ((emacs (24 3))) "samba log viewer" single]) (smbc . [(20171229 1008) nil "View SMBC from Emacs" single]) (smarty-mode . [(20100703 458) nil "major mode for editing smarty templates" single]) (smartscan . [(20170211 1233) nil "Jumps between other symbols found at point" single]) (smartrep . [(20150508 1930) nil "Support sequential operation which omitted prefix keys." single]) (smartparens . [(20180717 335) ((dash (2 13 0)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar]) (smart-window . [(20160716 1830) ((cl-lib (0 5))) "vim-like window controlling plugin" single]) (smart-tabs-mode . [(20160629 752) nil "Intelligently indent with tabs, align with spaces!" single]) (smart-tab . [(20170902 1407) nil "Intelligent tab completion and indentation." single]) (smart-shift . [(20150202 2325) nil "Smart shift text left/right." single]) (smart-semicolon . [(20171007 1833) ((emacs (25))) "Insert semicolon smartly" single]) (smart-region . [(20150903 703) ((emacs (24 4)) (expand-region (0 10 0)) (multiple-cursors (1 3 0)) (cl-lib (0 5))) "Smartly select region, rectangle, multi cursors" single]) (smart-newline . [(20131207 1940) nil "Provide smart newline for one keybind." single]) (smart-mode-line-powerline-theme . [(20160705 1738) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." tar]) (smart-mode-line . [(20180422 1459) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar]) (smart-mark . [(20150911 1910) nil "Restore point after C-g when mark" single]) (smart-jump . [(20180709 2205) ((emacs (25 1)) (dumb-jump (0 5 1))) "Smart go to definition." tar]) (smart-indent-rigidly . [(20141205 1615) nil "Smart rigid indenting" single]) (smart-hungry-delete . [(20170412 643) ((emacs (24 3))) "smart hungry deletion of whitespace" single]) (smart-forward . [(20140430 13) ((expand-region (0 8 0))) "Semantic navigation" single]) (smart-dash . [(20110130 1916) nil "Smart-Dash minor mode" single]) (smart-cursor-color . [(20141124 919) nil "Change cursor color dynamically" single]) (smart-compile . [(20180315 2030) nil "an interface to `compile'" single]) (smart-comment . [(20160322 1139) nil "smarter commenting" single]) (smart-backspace . [(20171013 2226) nil "intellj like backspace" single]) (sly-repl-ansi-color . [(20171020 816) ((sly (0)) (cl-lib (0 5))) "Add ANSI colors support to the sly mrepl." single]) (sly-quicklisp . [(20170112 135) ((sly (1 0 0 -2 2))) "Quicklisp support for SLY" tar]) (sly-named-readtables . [(20150817 816) ((sly (1 0 0 -2 2))) "Support named readtables in Common Lisp files" tar]) (sly-macrostep . [(20160119 434) ((sly (1 0 0 -2 2)) (macrostep (0 9))) "fancy macro-expansion via macrostep.el" tar]) (sly-hello-world . [(20160119 636) ((sly (1 0 0 -2 2))) "A template SLY contrib" tar]) (sly . [(20180722 1611) ((emacs (24 3))) "Sylvester the Cat's Common Lisp IDE" tar]) (slstats . [(20170823 149) ((cl-lib (0 5)) (emacs (24))) "Acquire and display stats about Second Life" single]) (slovak-holidays . [(20150418 155) nil "Adds a list of slovak holidays to Emacs calendar" single]) (slirm . [(20160201 625) ((emacs (24 4))) "Systematic Literature Review Mode for Emacs." single]) (slime-volleyball . [(20140717 2141) nil "An SVG Slime Volleyball Game" tar]) (slime-theme . [(20170808 622) ((emacs (24 0))) "an Emacs 24 theme based on Slime (tmTheme)" single]) (slime-docker . [(20171004 1151) ((emacs (24)) (slime (2 16)) (docker-tramp (0 1)) (cl-lib (0 5))) "Integration of SLIME with Docker containers." tar]) (slime-company . [(20180119 1043) ((emacs (24 4)) (slime (2 13)) (company (0 9 0))) "slime completion backend for company mode" single]) (slime . [(20180719 1821) ((cl-lib (0 5)) (macrostep (0 9))) "Superior Lisp Interaction Mode for Emacs" tar]) (slim-mode . [(20170728 648) nil "Major mode for editing Slim files" single]) (slideview . [(20150324 1540) ((cl-lib (0 3))) "File slideshow" single]) (slack . [(20180712 2222) ((websocket (1 8)) (request (0 2 0)) (oauth2 (0 10)) (circe (2 2)) (alert (1 2)) (emojify (0 2))) "Slack client for Emacs" tar]) (sl . [(20161217 604) ((cl-lib (0 5))) "An Emacs clone of sl(1)" tar]) (skype . [(20160711 124) nil "skype UI for emacs users.." tar]) (skewer-reload-stylesheets . [(20160725 520) ((skewer-mode (1 5 3))) "live-edit CSS, SCSS, Less, and friends." tar]) (skewer-mode . [(20180706 1107) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar]) (skewer-less . [(20160828 1321) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single]) (skeletor . [(20170616 1746) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar]) (simplezen . [(20130421 300) ((s (1 4 0)) (dash (1 1 0))) "A simple subset of zencoding-mode for Emacs." single]) (simplenote2 . [(20171201 1806) ((request-deferred (0 2 0))) "Interact with app.simplenote.com" tar]) (simplenote . [(20141118 640) nil "Interact with simple-note.appspot.com" single]) (simpleclip . [(20170803 540) nil "Simplified access to the system clipboard" single]) (simple-screen . [(20161009 220) nil "Simple screen configuration manager" single]) (simple-rtm . [(20160222 734) ((rtm (0 1)) (dash (2 0 0))) "Interactive Emacs mode for Remember The Milk" single]) (simple-paren . [(20180427 218) ((emacs (24)) (cl-lib (0 5))) "Insert paired delimiter, wrap" single]) (simple-mpc . [(20180715 1829) ((s (1 10 0))) "provides a simple interface to mpc" tar]) (simple-httpd . [(20180528 903) ((cl-lib (0 3))) "pure elisp HTTP server" single]) (simple-call-tree . [(20180224 1256) ((emacs (24 3)) (anaphora (1 0 0))) "analyze source code based on font-lock text-properties" single]) (simple-bookmarks . [(20160804 701) ((cl-lib (0 5))) "Bookmark / functioncall manager" tar]) (simp . [(20180606 1954) nil "Simple project definition, chiefly for file finding, and grepping" tar]) (silkworm-theme . [(20180301 637) ((emacs (24))) "Light theme with pleasant, low contrast colors." single]) (signature . [(20140730 1249) nil "Signature Survey" tar]) (signal . [(20160816 738) ((emacs (24)) (cl-lib (0 5))) "Advanced hook" single]) (sift . [(20160107 215) nil "Front-end for sift, a fast and powerful grep alternative" single]) (side-notes . [(20180523 2328) ((emacs (24 5))) "Easy access to a directory notes file" single]) (sicp . [(20171028 1523) nil "Structure and Interpretation of Computer Programs in info format" tar]) (sibilant-mode . [(20151119 1345) nil "Support for the Sibilant programming language" single]) (shx . [(20180528 1408) ((emacs (24 4))) "\"Extras\" for the (comint-mode) shell" single]) (shut-up . [(20180628 1130) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single]) (shrink-whitespace . [(20150916 1215) nil "Whitespace removal DWIM key" single]) (shrink-path . [(20170812 1947) ((emacs (24)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0))) "fish-style path" single]) (shr-tag-pre-highlight . [(20171113 114) ((emacs (25 1)) (language-detection (0 1 0))) "Syntax highlighting code block in HTML" single]) (shpec-mode . [(20150530 222) nil "Minor mode for shpec specification" single]) (showtip . [(20090830 340) nil "Show tip at cursor" single]) (show-marks . [(20130805 749) ((fm (1 0))) "Navigate and visualize the mark-ring" single]) (show-css . [(20160210 608) ((doom (1 3)) (s (1 10 0))) "Show the css of the html attribute the cursor is on" tar]) (shoulda . [(20140616 1133) ((cl-lib (0 5))) "Shoulda test support for ruby" single]) (shm . [(20180326 1757) nil "Structured Haskell Mode" tar]) (shimbun . [(20180325 2048) nil "interfacing with web newspapers" tar]) (shift-text . [(20130831 955) ((cl-lib (1 0)) (es-lib (0 3))) "Move the region in 4 directions, in a way similar to Eclipse's" single]) (shift-number . [(20170301 659) nil "Increase/decrease the number at point" single]) (shen-elisp . [(20170427 1502) ((emacs (24 4))) "Shen implementation in Elisp" tar]) (shelltest-mode . [(20180430 1841) nil "Major mode for shelltestrunner" single]) (shelldoc . [(20151114 1925) ((cl-lib (0 3)) (s (1 9 0))) "shell command editing support with man page." single]) (shell-toggle . [(20150226 611) nil "Toggle to and from the shell buffer" single]) (shell-switcher . [(20161028 2252) ((emacs (24))) "Provide fast switching between shell buffers." tar]) (shell-split-string . [(20151224 208) nil "Split strings using shell-like syntax" single]) (shell-pop . [(20170304 616) ((emacs (24)) (cl-lib (0 5))) "helps you to use shell easily on Emacs. Only one key action to work." single]) (shell-history . [(20100505 139) nil "integration with shell history" single]) (shell-here . [(20150728 1004) nil "Open a shell relative to the working directory" single]) (shell-current-directory . [(20140101 1554) nil "create new shell based on buffer directory" single]) (shell-command . [(20090830 340) nil "enables tab-completion for `shell-command'" single]) (shampoo . [(20131230 219) nil "A remote Smalltalk development mode" tar]) (shakespeare-mode . [(20180704 1438) nil "A major mode for editing Shakespearean templates." single]) (shader-mode . [(20180518 457) ((emacs (24))) "Major mode for shader" single]) (shadchen . [(20141102 1039) nil "pattern matching for elisp" single]) (shackle . [(20171209 1401) ((cl-lib (0 5))) "Enforce rules for popups" single]) (sexy-monochrome-theme . [(20180526 108) nil "A sexy dark Emacs >= 24 theme for your sexy code" single]) (sexp-move . [(20150915 1030) nil "Improved S-Expression Movement" single]) (seti-theme . [(20161208 836) nil "A dark colored theme, inspired by Seti Atom Theme" single]) (session . [(20120510 1700) nil "use variables, registers and buffer places across sessions" single]) (sesman . [(20180724 936) ((emacs (25))) "Generic Session Manager" single]) (services . [(20170802 430) ((cl-lib (0 5))) "Services database access functions." single]) (serverspec . [(20150623 455) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar]) (servant . [(20140216 419) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar]) (sequential-command . [(20170925 1740) nil "Many commands into one command" tar]) (sequences . [(20170818 552) ((emacs (24))) "Ports of some Clojure sequence functions." single]) (seoul256-theme . [(20180505 57) ((emacs (24 3))) "Low-contrast color scheme based on Seoul Colors." single]) (sentence-navigation . [(20180408 919) ((ample-regexps (0 1)) (cl-lib (0 5)) (emacs (24 4))) "Commands to navigate one-spaced sentences." single]) (sensitive . [(20170818 551) ((emacs (24)) (sequences (0 1 0))) "A dead simple way to load sensitive information" single]) (sendto . [(20160425 550) ((emacs (24 4))) "send the region content to a function" single]) (semi . [(20180204 1448) ((flim (1 14 9))) "A library to provide MIME features." tar]) (selectric-mode . [(20170216 311) nil "IBM Selectric mode for Emacs" tar]) (selected . [(20170222 34) nil "Keymap for when region is active" single]) (select-themes . [(20160220 1706) nil "Color theme selection with completing-read" single]) (sekka . [(20170803 547) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) "A client for Sekka IME server" single]) (seethru . [(20150218 1029) ((shadchen (1 4))) "Easily change Emacs' transparency" single]) (seeing-is-believing . [(20170214 520) nil "minor mode for running the seeing-is-believing ruby gem" single]) (see-mode . [(20180510 1741) ((emacs (24 4)) (language-detection (0 1 0))) "Edit string  in a separate buffer" single]) (secretaria . [(20180104 720) ((emacs (24 4)) (alert (1 2)) (s (1 12)) (f (0 19 0))) "A personal assistant based on org-mode" tar]) (seclusion-mode . [(20121118 1553) nil "Edit in seclusion. A Dark Room mode." single]) (searchq . [(20150829 511) ((emacs (24 3))) "Framework of queued search tasks using GREP, ACK, AG and more." tar]) (search-web . [(20150312 403) nil "Post web search queries using `browse-url'." single]) (sdlang-mode . [(20161130 2311) ((emacs (24 3))) "Major mode for Simple Declarative Language files." single]) (sdcv . [(20180211 833) ((emacs (24 3)) (popup (0 5 3)) (showtip (0 1)) (pos-tip (0 4 6)) (cl-lib (0 3))) "Interface for sdcv (StartDict console version)." single]) (scss-mode . [(20180123 908) nil "Major mode for editing SCSS files" single]) (scrooge . [(20180630 322) ((emacs (24)) (cl-lib (0 5)) (dash (2 13 0)) (thrift (0 9 3))) "Major mode for Twitter Scrooge files" single]) (scribble-mode . [(20160124 1528) ((emacs (24))) "Major mode for editing Scribble documents" single]) (scratches . [(20151005 2116) ((dash (2 11 0)) (f (0 17 0))) "Multiple scratches in any language" single]) (scratch-pop . [(20170510 758) ((popwin (0 7 0 -3))) "Generate, popup (& optionally backup) scratch buffer(s)." single]) (scratch-palette . [(20150225 42) ((popwin (0 7 0 -3))) "make scratch buffer for each files" single]) (scratch-message . [(20170107 536) nil "Changing message in your scratch buffer" single]) (scratch-log . [(20141114 2343) nil "Utility for *scratch* buffer." single]) (scratch-ext . [(20140103 2116) nil "Extensions for *scratch*" single]) (scratch . [(20170614 1401) nil "Mode-specific scratch buffers" single]) (scpaste . [(20171101 922) ((htmlize (1 39))) "Paste to the web via scp." single]) (scp . [(20171203 1851) ((emacs (25 1)) (cl-lib (0 5))) "Use the SCP command to transfer files with the remote server" single]) (sclang-snippets . [(20130513 51) ((yasnippet (0 8 0))) "Snippets for the SuperCollider Emacs mode" tar]) (sclang-extensions . [(20160508 2038) ((auto-complete (1 4 0)) (s (1 3 1)) (dash (1 2 0)) (emacs (24 1))) "Extensions for the SuperCollider Emacs mode." tar]) (scion . [(20130315 555) nil "Haskell Minor Mode for Interacting with the Scion Library" single]) (schrute . [(20170521 1140) ((emacs (24 3))) "Help you remember there is a better way to do something." single]) (scheme-here . [(20141028 18) nil "cmuscheme extension for multiple inferior processes" single]) (scheme-complete . [(20170824 713) nil "Smart auto completion for Scheme in Emacs" single]) (scf-mode . [(20151121 1848) nil "shorten file-names in compilation type buffers" single]) (scala-mode . [(20170802 432) nil "Major mode for editing Scala" tar]) (scad-preview . [(20160206 536) ((scad-mode (91 0))) "Preview SCAD models in real-time within Emacs" single]) (scad-mode . [(20180108 1809) nil "A major mode for editing OpenSCAD code" single]) (sbt-mode . [(20180511 922) ((emacs (24 4))) "Interactive support for sbt projects" tar]) (sayid . [(20180404 1139) ((cider (0 14 0))) "sayid nREPL middleware client" single]) (say-what-im-doing . [(20160706 1231) nil "dictate what you're doing with text to speech" single]) (savekill . [(20140417 1929) nil "Save kill ring to disk" single]) (save-visited-files . [(20170228 2250) nil "save opened files across sessions" single]) (save-load-path . [(20140206 414) nil "save load-path and reuse it to test" single]) (sauron . [(20171105 247) nil "Track (erc/org/dbus/...) events and react to them." tar]) (sass-mode . [(20161006 2326) ((haml-mode (3 0 15)) (cl-lib (0 5))) "Major mode for editing Sass files" single]) (sane-term . [(20160620 647) ((emacs (24 1))) "Multi Term is crazy. This is not." single]) (salt-mode . [(20180118 1754) ((emacs (24 4)) (yaml-mode (0 0 12)) (mmm-mode (0 5 4)) (mmm-jinja2 (0 1))) "Major mode for Salt States" single]) (salesforce-utils . [(20160813 1854) ((cl-lib (0 5))) "simple utilities for Salesforce" single]) (sailfish-scratchbox . [(20171202 532) nil "Sailfish OS scratchbox inside the emacs." single]) (sage-shell-mode . [(20180215 35) ((cl-lib (0 6 1)) (emacs (24 4)) (let-alist (1 0 5)) (deferred (0 5 1))) "A front-end for Sage Math" tar]) (sackspace . [(20130719 256) nil "A better backspace" single]) (s3ed . [(20180204 549) ((emacs (24 4)) (seq (0)) (dash (0))) "Tramp-like access to s3" tar]) (s12cpuv2-mode . [(20171013 1351) ((emacs (24 3))) "Major-mode for S12CPUV2 assembly" single]) (s-buffer . [(20130605 1424) ((s (1 6 0)) (noflet (0 0 3))) "s operations for buffers" single]) (s . [(20180406 108) nil "The long lost Emacs string manipulation library." single]) (ryo-modal . [(20180331 118) ((emacs (24 4))) "Roll your own modal mode" single]) (rvm . [(20150402 742) nil "Emacs integration for rvm" single]) (rustic . [(20180724 36) ((emacs (25 3)) (xterm-color (1 6)) (dash (2 13 0)) (s (1 10 0)) (f (0 18 2)) (projectile (0 14 0)) (markdown-mode (2 3))) "A major emacs mode for editing Rust source code" tar]) (rust-playground . [(20180507 1032) ((emacs (24 3)) (rust-mode (0 3 0))) "Local Rust playground for short code snippets." single]) (rust-mode . [(20180626 1512) ((emacs (24 0))) "A major emacs mode for editing Rust source code" single]) (russian-holidays . [(20170109 1340) nil "Russian holidays for the calendar" single]) (runtests . [(20150807 131) nil "Run unit tests from Emacs" single]) (runner . [(20160524 43) nil "Improved \"open with\" suggestions for dired" single]) (run-stuff . [(20180208 2348) ((emacs (24 4))) "context based command execution" single]) (rum-mode . [(20180126 1622) ((emacs (24))) "Major mode for Rum programming language" single]) (rufo . [(20170718 716) ((emacs (24 3))) "use rufo to automatically format ruby files" single]) (ruby-tools . [(20151209 815) nil "Collection of handy functions for ruby-mode." tar]) (ruby-test-mode . [(20171016 931) ((ruby-mode (1 0)) (pcre2el (1 8))) "Minor mode for Behaviour and Test Driven" single]) (ruby-refactor . [(20160214 850) ((ruby-mode (1 2))) "A minor mode which presents various Ruby refactoring helpers." single]) (ruby-interpolation . [(20131112 852) nil "Ruby string interpolation helpers" single]) (ruby-hash-syntax . [(20180323 1909) nil "Toggle ruby hash syntax between classic and 1.9 styles" single]) (ruby-factory . [(20160101 2321) ((inflections (1 1))) "Minor mode for Ruby test object generation libraries" tar]) (ruby-extra-highlight . [(20171106 1133) nil "Highlight Ruby parameters." single]) (ruby-end . [(20141215 423) nil "Automatic insertion of end blocks for Ruby" single]) (ruby-electric . [(20170810 430) nil "Minor mode for electrically editing ruby code" single]) (ruby-compilation . [(20150708 2340) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single]) (ruby-additional . [(20180316 1937) ((emacs (24 3)) (ruby-mode (1 2))) "ruby-mode extensions yet to be merged into Emacs" tar]) (rubocopfmt . [(20180519 748) ((cl-lib (0 5))) "Minor-mode to format Ruby code with RuboCop on save" single]) (rubocop . [(20170311 2211) ((emacs (24))) "An Emacs interface for RuboCop" single]) (rubik . [(20180222 1214) ((cl-lib (1 0)) (emacs (25 3))) "Rubik's Cube" single]) (rtm . [(20180329 808) ((cl-lib (1 0))) "An elisp implementation of the Remember The Milk API" single]) (rtags . [(20180619 823) nil "A front-end for rtags" single]) (rspec-mode . [(20180614 448) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar]) (rsense . [(20100510 2105) nil "RSense client for Emacs" single]) (rpn-calc . [(20170522 1842) ((popup (0 4))) "quick RPN calculator for hackers" single]) (rpm-spec-mode . [(20160710 436) nil "RPM spec file editing commands for Emacs/XEmacs" single]) (roy-mode . [(20121208 358) nil "Roy major mode" single]) (rotate . [(20160909 136) nil "Rotate the layout of emacs" single]) (rope-read-mode . [(20171003 719) nil "Rearrange lines to read text smoothly" single]) (roguel-ike . [(20160119 1902) ((popup (0 5 0))) "A coffee-break roguelike" tar]) (robots-txt-mode . [(20170908 642) nil "Major mode for editing robots.txt" single]) (robe . [(20171116 1249) ((inf-ruby (2 5 1)) (emacs (24 4))) "Code navigation, documentation lookup and completion for Ruby" tar]) (rjsx-mode . [(20180624 1758) ((emacs (24 4)) (js2-mode (20170504))) "Real support for JSX" single]) (riscv-mode . [(20170804 821) ((emacs (24 4))) "Major-mode for RISC V assembly" single]) (ripgrep . [(20180323 920) nil "Front-end for ripgrep, a command line search tool" single]) (rings . [(20160531 1327) nil "Buffer rings. Like tabs, but better." single]) (rinari . [(20150708 2340) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single]) (rimero-theme . [(20180630 515) ((emacs (24))) "Theme with a dark background suitable for UI and terminal usage." single]) (rigid-tabs . [(20170903 859) ((emacs (24 3))) "Fix TAB alignment in diff buffers" single]) (rich-minority . [(20170813 622) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single]) (rib-mode . [(20170726 748) ((emacs (24))) "RenderMan® Interface Bytestream (RIB) Major Mode" single]) (rhtml-mode . [(20130422 611) nil "major mode for editing RHTML files" tar]) (rg . [(20180626 1041) ((cl-lib (0 5)) (emacs (24 3)) (s (1 10 0))) "A search tool based on ripgrep." tar]) (reykjavik-theme . [(20160109 0) ((emacs (24))) "Theme with a dark background." single]) (review-mode . [(20180312 535) nil "major mode for ReVIEW" single]) (reverse-theme . [(20141204 1745) nil "Reverse theme for Emacs" single]) (reverse-im . [(20180213 525) ((emacs (24 4))) "Reverse mapping for keyboard layouts other than english." single]) (reveal-in-osx-finder . [(20150802 957) nil "Reveal file associated with buffer in OS X Finder" single]) (restclient-test . [(20180106 1246) ((emacs (24 4)) (restclient (0))) "Run tests with restclient.el" single]) (restclient-helm . [(20170314 854) ((restclient (0)) (helm (1 9 4))) "helm interface for restclient.el" single]) (restclient . [(20180316 851) nil "An interactive HTTP client for Emacs" single]) (restart-emacs . [(20180601 331) nil "Restart emacs from within emacs" single]) (resize-window . [(20170704 2212) ((emacs (24)) (cl-lib (0 5))) "easily resize windows" single]) (requirejs-mode . [(20130215 1304) nil "Improved AMD module management" single]) (requirejs . [(20151203 2319) ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (20151011 1823))) "Requirejs import manipulation and source traversal." tar]) (request-deferred . [(20160419 1605) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single]) (request . [(20170131 1747) ((emacs (24 4))) "Compatible layer for URL request in Emacs" single]) (req-package . [(20180506 2350) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0)) (ht (0))) "A use-package wrapper for package runtime dependencies management" tar]) (repo . [(20170213 139) ((emacs (24 3))) "Running repo from Emacs" single]) (replace-with-inflections . [(20170911 245) ((cl-lib (0 5)) (string-inflection (1 0 5)) (inflections (1 1))) "Inflection aware `query-replace'" single]) (replace-symbol . [(20160517 1712) nil "Rename symbols in expressions or buffers" single]) (replace-pairs . [(20160207 451) ((emacs (24 4))) "Query-replace pairs of things" single]) (replace-from-region . [(20170227 1516) nil "Replace commands whose query is from region" single]) (repl-toggle . [(20180501 328) ((fullframe (0 0 5))) "Switch to/from repl buffer for current major-mode" single]) (repeater . [(20180418 512) ((emacs (24 4))) "Repeat recent repeated commands" single]) (repeatable-motion . [(20170620 1148) ((emacs (24))) "Make repeatable versions of motions" tar]) (remember-last-theme . [(20170619 1433) ((emacs (24 4))) "Remember the last used theme between sessions." single]) (remark-mode . [(20171217 2356) ((emacs (25 1)) (markdown-mode (2 0))) "Major mode for the remark slideshow tool" tar]) (relax . [(20131029 1434) ((json (1 2))) "For browsing and interacting with CouchDB" single]) (relative-buffers . [(20160221 1123) ((cl-lib (0 5)) (dash (2 6 0)) (s (1 9 0)) (f (0 16 2))) "Emacs buffers naming convention" single]) (related . [(20161002 2310) ((cl-lib (0 5))) "Switch back and forth between similarly named buffers." single]) (register-channel . [(20150513 2059) nil "Jump around fast using registers" single]) (region-state . [(20151128 238) nil "Show the number of chars/lines or rows/columns in the region" single]) (region-convert . [(20161118 1859) nil "Convert string in region by Lisp function" single]) (region-bindings-mode . [(20140407 1514) nil "Enable custom bindings when mark is active." single]) (regex-tool . [(20170104 1118) nil "A regular expression evaluation tool for programmers" single]) (regex-dsl . [(20100124 228) nil "lisp syntax for regexps" single]) (refine . [(20180315 1528) ((emacs (24 3)) (s (1 11 0)) (dash (2 12 0)) (list-utils (0 4 4)) (loop (1 2))) "interactive value editing" single]) (redtick . [(20180424 1436) ((emacs (24 4))) "Smallest pomodoro timer (1 char)" tar]) (redshank . [(20180128 1348) ((paredit (21))) "Common Lisp Editing Extensions" tar]) (redprl . [(20180418 734) ((emacs (24 3))) "Major mode for editing RedPRL proofs and interacting with RedPRL" single]) (redpen-paragraph . [(20160625 350) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "RedPen interface." single]) (redis . [(20150531 1248) ((emacs (24)) (cl-lib (0 5))) "Redis integration" single]) (recursive-narrow . [(20140902 1027) nil "narrow-to-region that operates recursively" single]) (rectangle-utils . [(20160914 2108) ((emacs (24)) (cl-lib (0 5))) "Some useful rectangle functions." single]) (rect+ . [(20150620 1744) nil "Extensions to rect.el" single]) (recover-buffers . [(20171008 2137) nil "revisit all buffers from an auto-save file" tar]) (recompile-on-save . [(20151126 646) ((dash (1 1 0)) (cl-lib (0 5))) "Trigger recompilation on file save." single]) (recentf-remove-sudo-tramp-prefix . [(20180204 2156) ((emacs (24 4))) "Normalise recentf history" single]) (recentf-ext . [(20170925 1735) nil "Recentf extensions" single]) (rebox2 . [(20121113 500) nil "Handling of comment boxes in various styles." single]) (rebecca-theme . [(20180324 121) ((emacs (24))) "Rebecca Purple Theme" single]) (reason-mode . [(20180722 437) ((emacs (24 3))) "A major mode for editing ReasonML" tar]) (realgud-rdb2 . [(20160303 43) ((realgud (1 3))) "realgud front-end for interacting with Ruby debugger2" tar]) (realgud-pry . [(20160805 745) ((realgud (1 4 3)) (cl-lib (0 5)) (emacs (24))) "realgud front-end to the Ruby pry debugger" tar]) (realgud-old-debuggers . [(20170316 31) ((realgud (1 4 3)) (cl-lib (0 5)) (emacs (24))) "realgud front-end to older lesser-used debuggers" tar]) (realgud-byebug . [(20180308 1923) ((realgud (1 4 3)) (cl-lib (0 5)) (emacs (24))) "realgud front-end to the Ruby byebug debugger" tar]) (realgud . [(20180710 1953) ((load-relative (1 2)) (loc-changes (1 2)) (test-simple (1 2 0)) (cl-lib (0 5)) (emacs (24))) "A modular front-end for interacting with external debuggers" tar]) (real-auto-save . [(20180107 1850) nil "Automatically save your all your buffers/files at regular intervals." single]) (readline-complete . [(20150708 737) nil "offers completions in shell mode" single]) (readability . [(20140715 1727) ((oauth (1 4)) (ov (1 0)) (emacs (24 3))) "Read articles from Readability in Emacs" single]) (read-aloud . [(20160922 2200) ((emacs (24 4))) "A simple interface to TTS engines" single]) (react-snippets . [(20170803 1550) ((yasnippet (0 7 0))) "Yasnippets for React" tar]) (rdxmk . [(20170629 1834) nil "A small set of tools for redox developments" tar]) (rdp . [(20120928 1854) nil "Recursive Descent Parser library" single]) (rdf-prefix . [(20180127 1006) nil "Prefix lookup for RDF" single]) (rcirc-styles . [(20160206 1850) ((cl-lib (0 5))) "support mIRC-style color and attribute codes" single]) (rcirc-notify . [(20150219 1404) nil "libnotify popups" single]) (rcirc-groups . [(20170731 1401) nil "an emacs buffer in rcirc-groups major mode" single]) (rcirc-alertify . [(20140406 1819) ((alert (20140406 1353))) "Cross platform notifications for rcirc" single]) (rcirc-alert . [(20141127 247) nil "Configurable alert messages on top of RCIRC" tar]) (rc-mode . [(20160913 1218) nil "Major mode for the Plan9 rc shell" single]) (rbt . [(20170202 1502) ((popup (0 5 3)) (magit (20160128 1201))) "Integrate reviewboard with emacs." single]) (rbenv . [(20141119 2349) nil "Emacs integration for rbenv" single]) (rats . [(20170818 313) ((s (1 10 0)) (go-mode (1 3 1)) (cl-lib (0 5))) "Rapid testing suite for Go" single]) (rase . [(20120928 1345) nil "Run At Sun Event daemon" single]) (ranger . [(20170817 857) ((emacs (24 4))) "Make dired more like ranger" single]) (random-splash-image . [(20151002 1830) nil "Randomly sets splash image to *GNU Emacs* buffer on startup." single]) (rand-theme . [(20151219 1535) ((cl-lib (0 5))) "Random Emacs theme at start-up!" single]) (rally-mode . [(20161113 1954) ((popwin (1 0 0))) "a mode to interact with the Rally Software web site." single]) (rake . [(20180212 208) ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) "Run rake commands" single]) (rainbow-identifiers . [(20141102 726) ((emacs (24))) "Highlight identifiers according to their names" single]) (rainbow-delimiters . [(20170929 432) nil "Highlight brackets according to their depth" single]) (rainbow-blocks . [(20171025 738) nil "Block syntax highlighting for lisp code" single]) (railscasts-theme . [(20150219 725) nil "Railscasts color theme for GNU Emacs." single]) (railscasts-reloaded-theme . [(20180131 2246) nil "Railscasts Reloaded color theme" single]) (rails-log-mode . [(20140407 2125) nil "Major mode for viewing Rails log files" single]) (racket-mode . [(20180719 854) ((emacs (24 3)) (faceup (0 0 2)) (s (1 9 0))) "Major mode for Racket language." tar]) (racer . [(20180708 2325) ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 13 0)) (s (1 10 0)) (f (0 18 2)) (pos-tip (0 4 6))) "code completion, goto-definition and docs browsing for Rust via racer" single]) (r-autoyas . [(20140101 710) ((ess (0)) (yasnippet (0 8 0))) "Provides automatically created yasnippets for R function argument lists." tar]) (quiz . [(20170818 415) ((cl-lib (0 5)) (emacs (25))) "Multiple choice quiz game" single]) (quiet . [(20160508 556) nil "disconnect from the online world for a while" single]) (quickrun . [(20170222 1715) ((emacs (24 3))) "Run commands quickly" single]) (quickref . [(20170817 532) ((dash (1 0 3)) (s (1 0 0))) "Display relevant notes-to-self in the echo area" single]) (quick-shell-keybind . [(20171022 2313) ((emacs (24))) "Interactively bind a key to shell commands" single]) (quick-preview . [(20150828 2139) nil "quick preview using GNOME sushi, gloobus or quick look" single]) (quick-peek . [(20180525 711) ((emacs (24 3))) "Inline quick-peek windows" single]) (quick-buffer-switch . [(20151007 1508) nil "Quick switch to file or dir buffers." single]) (quelpa-use-package . [(20180617 2356) ((emacs (24 3)) (quelpa (0)) (use-package (2))) "quelpa handler for use-package" single]) (quelpa . [(20180711 1338) ((emacs (24 3))) "Emacs Lisp packages built directly from source" tar]) (quasi-monochrome-theme . [(20180516 813) nil "Quasi Monochrome theme" tar]) (qt-pro-mode . [(20170604 1141) ((emacs (24))) "Qt Pro/Pri major mode" single]) (qml-mode . [(20161015 1731) nil "Major mode for editing QT Declarative (QML) code." single]) (ql . [(20180418 1320) ((emacs (24))) "Control Quod Libet" single]) (qiita . [(20140118 44) ((helm (1 5 9)) (markdown-mode (2 0))) "Qiita API Library for emacs" single]) (pyvenv . [(20180720 214) nil "Python virtual environment interface" single]) (pythonic . [(20180624 2212) ((emacs (25)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." single]) (python-x . [(20180218 1447) ((python (0 24)) (folding (0)) (cl-lib (0 5))) "python.el extras for interactive evaluation" tar]) (python-test . [(20171112 2137) ((emacs (25 1))) "Python testing integration" single]) (python-switch-quotes . [(20161228 9) ((emacs (24 3))) "cycle between ' and \" quotes in python strings" single]) (python-pytest . [(20180614 253) ((emacs (24 4)) (dash (2 12 0)) (dash-functional (2 12 0)) (magit-popup (2 12 0)) (projectile (0 14 0)) (s (1 12 0))) "helpers to run pytest" single]) (python-mode . [(20180721 1147) nil "Python major mode" tar]) (python-info . [(20151228 1052) nil "Python info manual for Emacs" tar]) (python-environment . [(20150310 153) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar]) (python-docstring . [(20170508 156) nil "Smart Python docstring formatting" tar]) (python-django . [(20150821 2104) nil "A Jazzy package for managing Django projects" single]) (python-cell . [(20131029 1616) nil "Support for MATLAB-like cells in python mode" single]) (pytest . [(20170614 745) ((s (1 9 0))) "Easy Python test running in Emacs" single]) (pyramid . [(20180718 1420) ((emacs (25 2)) (pythonic (0 1 1)) (tablist (0 70))) "Minor mode for working with pyramid projects" tar]) (pynt . [(20180710 26) ((emacs (24 4)) (ein (0 13 1)) (epc (0 1 1)) (deferred (0 5 1))) "Generate and scroll EIN buffers from python code" single]) (pylint . [(20170402 555) nil "minor mode for running `pylint'" single]) (pyimpsort . [(20160129 2053) ((emacs (24 3))) "Sort python imports." tar]) (pyimport . [(20180308 952) ((dash (2 8 0)) (s (1 9 0)) (shut-up (0 3 2))) "Manage Python imports!" single]) (pyim-wbdict . [(20170724 1527) ((pyim (1 0))) "Some wubi dicts for pyim" tar]) (pyim-cangjie5dict . [(20170729 1946) ((pyim (1 0))) "Some cangjie5 dicts for pyim" tar]) (pyim-basedict . [(20170726 1959) nil "The default pinyin dict of pyim" tar]) (pyim . [(20180712 640) ((emacs (24 4)) (popup (0 1)) (async (1 6)) (pyim-basedict (0 1))) "A Chinese input method support quanpin, shuangpin, wubi and cangjie." tar]) (pygen . [(20161120 2106) ((elpy (1 12 0)) (python-mode (6 2 2)) (dash (2 13 0))) "Python code generation using Elpy and Python-mode." single]) (pyfmt . [(20150521 1356) nil "Emacs interface to pyfmt" single]) (pyenv-mode-auto . [(20180620 552) ((pyenv-mode (0 1 0)) (s (1 11 0)) (f (0 17 0))) "Automatically activates pyenv version if .python-version file exists." single]) (pyenv-mode . [(20170801 1648) ((pythonic (0 1 0))) "Integrate pyenv with python-mode" single]) (pydoc-info . [(20110301 34) nil "Better Python support for info-lookup-symbol." tar]) (pydoc . [(20180509 1519) nil "functional, syntax highlighted pydoc navigation" single]) (pycoverage . [(20160324 1812) ((emacs (24 3))) "Support for coverage stats on Python 2.X and 3" tar]) (pycarddavel . [(20150831 516) ((helm (1 7 0)) (emacs (24 0))) "Integrate pycarddav" single]) (py-yapf . [(20160925 422) nil "Use yapf to beautify a Python buffer" single]) (py-test . [(20151116 2222) ((dash (2 9 0)) (f (0 17)) (emacs (24 4))) "A test runner for Python code." single]) (py-smart-operator . [(20170531 509) ((s (1 9 0))) "smart-operator for python-mode" single]) (py-isort . [(20160925 318) nil "Use isort to sort the imports in a Python buffer" single]) (py-import-check . [(20130802 411) nil "Finds the unused python imports using importchecker" single]) (py-gnitset . [(20170821 1032) nil "Run your Python tests any way you'd like" single]) (py-autopep8 . [(20160925 352) nil "Use autopep8 to beautify a Python buffer" single]) (px . [(20170317 1630) nil "preview inline latex in any mode" single]) (pushover . [(20170818 1403) ((cl-lib (0 5))) "Pushover API Access" single]) (pushbullet . [(20140809 532) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single]) (purty-mode . [(20131004 1559) nil "Safely pretty-print greek letters, mathematical symbols, or anything else." single]) (purple-haze-theme . [(20141014 1929) ((emacs (24 0))) "an overtly purple color theme for Emacs24." single]) (purescript-mode . [(20180120 709) nil "A PureScript editing mode" tar]) (puppet-mode . [(20171220 2249) ((emacs (24 1)) (pkg-info (0 4))) "Major mode for Puppet manifests" single]) (punpun-theme . [(20161103 147) nil "A bleak theme" tar]) (pungi . [(20150222 446) ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) "Integrates jedi with virtualenv and buildout python environments" single]) (punctuality-logger . [(20141120 1231) nil "Punctuality logger for Emacs" single]) (pulseaudio-control . [(20180627 450) nil "Use `pactl' to manage PulseAudio volumes." single]) (pug-mode . [(20180513 1426) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for jade/pug template files" single]) (pt . [(20161226 1159) nil "A front-end for pt, The Platinum Searcher." single]) (psysh . [(20171022 2229) ((emacs (24 3)) (s (1 9 0)) (f (0 17))) "PsySH, PHP interactive shell (REPL)" single]) (psession . [(20180423 2159) ((emacs (24)) (cl-lib (0 5)) (async (1 9 3))) "Persistent save of elisp objects." single]) (psci . [(20180418 533) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1))) "Major mode for purescript repl psci" tar]) (psc-ide . [(20180605 302) ((dash (2 13 0)) (dash-functional (1 2 0)) (company (0 8 7)) (cl-lib (0 5)) (s (1 10 0)) (emacs (24 4)) (flycheck (0 24)) (let-alist (1 0 4)) (seq (1 11))) "Minor mode for PureScript's psc-ide tool." tar]) (proxy-mode . [(20180520 2030) ((emacs (25))) "A minor mode to toggle proxy." single]) (protocols . [(20170802 432) ((cl-lib (0 5))) "Protocol database access functions." single]) (protobuf-mode . [(20170526 950) nil "major mode for editing protocol buffers." single]) (prosjekt . [(20151127 616) ((dash (2 8 0))) "a software project tool for emacs" tar]) (proportional . [(20171025 1637) ((emacs (25 1))) "use a proportional font everywhere" single]) (propfont-mixed . [(20150113 1411) ((emacs (24)) (cl-lib (0 5))) "Use proportional fonts with space-based indentation." single]) (prop-menu . [(20150728 418) ((emacs (24 3)) (cl-lib (0 5))) "Create and display a context menu based on text and overlay properties" single]) (prompts . [(20160916 341) ((dash (2 13 0))) "utilities for working with text prompts." single]) (prompt-text . [(20160106 609) nil "Various information in minibuffer prompt" single]) (promise . [(20180409 252) ((emacs (25)) (async (1 9))) "Promises/A+" tar]) (projmake-mode . [(20161031 1015) ((dash (20150611 922)) (indicators (20130217 1405))) "Project oriented automatic builder and error highlighter, flymake for projects" tar]) (projekt . [(20150324 148) ((emacs (24))) "some kind of staging for CVS" single]) (projector . [(20180724 1122) ((alert (1 1)) (projectile (0 11 0)) (cl-lib (0 5))) "Lightweight library for managing project-aware shell and command buffers" single]) (projectile-variable . [(20170208 918) ((emacs (24)) (cl-lib (0 5))) "Store project local variables." single]) (projectile-trailblazer . [(20170928 924) ((emacs (24 4)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects using trailblazer" single]) (projectile-speedbar . [(20170516 1943) ((projectile (0 11 0)) (sr-speedbar (0))) "projectile integration for speedbar" single]) (projectile-sift . [(20160107 215) ((sift (0 2 0)) (projectile (0 13 0))) "Run a sift with Projectile" single]) (projectile-ripgrep . [(20180301 651) ((ripgrep (0 3 0)) (projectile (0 14 0))) "Run ripgrep with Projectile" single]) (projectile-rails . [(20180718 55) ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects based on projectile-mode" single]) (projectile-hanami . [(20160505 611) ((emacs (24 3)) (projectile (0 12 0)) (rake (0 3 2)) (inf-ruby (2 2 6))) "Minor mode for Hanami projects based on projectile" single]) (projectile-git-autofetch . [(20180418 1636) ((projectile (0 14 0)) (alert (1 2))) "automatically fetch git repositories" single]) (projectile-direnv . [(20160305 1738) ((emacs (24)) (s (1 11 0)) (dash (2 12 0)) (projectile (0 13 0))) "Set environment variables from .envrc" single]) (projectile-codesearch . [(20180508 822) ((codesearch (20171122 431)) (projectile (20150405 126))) "Integration of codesearch into projectile" single]) (projectile . [(20180724 318) ((emacs (25 1)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single]) (project-shells . [(20171107 51) ((emacs (24 3)) (seq (2 19))) "Manage the shell buffers of each project" single]) (project-root . [(20110206 1230) nil "Define a project root and take actions based upon it." single]) (project-persist-drawer . [(20151108 422) ((project-persist (0 3))) "Use a project drawer with project-persist." tar]) (project-persist . [(20150519 1324) nil "A minor mode to allow loading and saving of project settings." tar]) (project-explorer . [(20150503 1714) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single]) (project-abbrev . [(20180705 1954) ((emacs (24 4))) "Customize abbreviation expansion in the project." single]) (programmer-dvorak . [(20150426 1837) nil "Input method for Programmer Dvorak." single]) (prognth . [(20130920 1059) nil "Extend prog1 to arbitrary index" single]) (prog-fill . [(20180606 1832) ((emacs (25 1)) (cl-lib (0 6 1))) "Smartly format lines to use vertical space." single]) (professional-theme . [(20150315 400) nil "Emacs port of Vim's professional theme" single]) (prodigy . [(20180511 238) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single]) (processing-snippets . [(20140426 728) ((yasnippet (0 8 0))) "Snippets for processing-mode" tar]) (processing-mode . [(20171022 1602) nil "Major mode for Processing 2.0" single]) (proc-net . [(20130321 1712) nil "network process tools" single]) (private-diary . [(20151216 857) ((emacs (24 0))) "maintain a private diary in Emacs" single]) (private . [(20150121 1757) ((aes (0 6))) "take care of your private configuration files." single]) (pretty-symbols . [(20140814 259) nil "Draw tokens as Unicode glyphs." single]) (pretty-sha-path . [(20141105 1026) nil "Prettify Guix/Nix store paths" single]) (pretty-mode . [(20160614 1146) nil "Redisplay parts of the buffer as pretty Unicode symbols." single]) (prettify-greek . [(20160603 208) nil "Greek letters for prettify-symbols" single]) (prettier-js . [(20180108 2326) nil "Minor mode to format JS code on file save" single]) (presentation . [(20180426 1924) ((emacs (24 4)) (cl-lib (0 5))) "Display large character for presentation" single]) (preseed-generic-mode . [(20180209 2100) nil "Debian preseed file major mode" single]) (prescient . [(20180702 1140) ((emacs (25 1))) "Better sorting and filtering." single]) (preproc-font-lock . [(20151107 1218) nil "Highlight C-style preprocessor directives." single]) (prassee-theme . [(20180709 304) ((emacs (24))) "A high contrast color theme for Emacs." single]) (ppd-sr-speedbar . [(20151108 424) ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) "Sr Speedbar adaptor for project-persist-drawer." tar]) (powerthesaurus . [(20180719 208) ((emacs (24)) (request (0 3 0)) (s (1 12 0))) "Powerthesaurus integration" single]) (powershell . [(20180616 2328) ((emacs (24))) "Mode for editing Powershell scripts" single]) (powerline-evil . [(20151112 710) ((evil (1 0 8)) (powerline (2 3))) "Utilities for better Evil support for Powerline" tar]) (powerline . [(20180321 1948) ((cl-lib (0 2))) "Rewrite of Powerline" tar]) (pow . [(20140420 106) ((emacs (24)) (cl-lib (0 5))) "pow (http://pow.cx/) manager for emacs" tar]) (pov-mode . [(20161114 2343) nil "Major mode for editing POV-Ray scene files." tar]) (postcss-sorting . [(20180211 156) ((emacs (24))) "postcss-sorting interface" single]) (posframe . [(20180708 702) ((emacs (26))) "Pop a posframe (just a frame) at point" single]) (pos-tip . [(20150318 813) nil "Show tooltip at point" single]) (portage-navi . [(20141208 555) ((concurrent (0 3 1)) (ctable (0 1 2))) "portage viewer" single]) (popwin . [(20150315 600) nil "Popup Window Manager." single]) (popup-switcher . [(20171205 51) ((cl-lib (0 3)) (popup (0 5 3))) "switch to other buffers and files via popup." single]) (popup-kill-ring . [(20131020 1154) ((popup (0 4)) (pos-tip (0 4))) "interactively insert item from kill-ring" single]) (popup-imenu . [(20170326 340) ((dash (2 12 1)) (popup (0 5 3)) (flx-ido (0 6 1))) "imenu index popup" single]) (popup-edit-menu . [(20170404 725) ((emacs (24))) "a popup context edit menu package" single]) (popup-complete . [(20141108 1908) ((popup (0 5 0))) "completion with popup" single]) (popup . [(20160709 729) ((cl-lib (0 5))) "Visual Popup User Interface" single]) (poporg . [(20170403 51) nil "Pop a comment or string to an empty buffer for text editing" single]) (pophint . [(20170917 1948) ((log4e (0 2 0)) (yaxception (0 3))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar]) (ponylang-mode . [(20171028 1356) ((dash (2 10 0))) "Major mode for Pony code" single]) (pony-snippets . [(20160204 2011) ((yasnippet (0 8 0))) "Yasnippets for Pony" tar]) (pony-mode . [(20170807 822) nil "Minor mode for working with Django Projects" tar]) (pomodoro . [(20150716 1046) nil "A timer for the Pomodoro Technique" single]) (pomidor . [(20180614 128) ((emacs (24 3)) (alert (1 2))) "Simple and cool pomodoro timer" tar]) (polymode . [(20170307 322) ((emacs (24))) "Versatile multiple modes with extensive literate programming support" tar]) (poly-ruby . [(20170802 648) ((emacs (24 3)) (polymode (1 0))) "Provides poly-ruby-mode" single]) (pollen-mode . [(20180404 612) ((emacs (24 3)) (cl-lib (0 5))) "major mode for editing pollen files" single]) (pointback . [(20100210 752) nil "Restore window points when returning to buffers" single]) (point-stack . [(20170808 958) nil "Back and forward navigation through buffer locations" single]) (point-pos . [(20170421 932) nil "Save and restore point positions" single]) (poet-theme . [(20180603 1523) nil "A prose friendly theme." single]) (podcaster . [(20161020 835) ((cl-lib (0 5))) "Podcast client" single]) (pocket-reader . [(20180719 1453) ((emacs (25 1)) (dash (2 13 0)) (kv (0 0 19)) (pocket-lib (0 1)) (s (1 10)) (ov (1 0 6)) (rainbow-identifiers (0 2 2)) (org-web-tools (0 1)) (ht (2 2))) "Client for Pocket reading list" single]) (pocket-mode . [(20171201 515) ((emacs (24 4)) (pocket-api (0 1))) "Manage your pocket" single]) (pocket-lib . [(20180711 1723) ((emacs (25 1)) (request (0 2)) (dash (2 13 0)) (kv (0 0 19)) (s (1 12 0))) "Library for accessing getpocket.com API" single]) (pocket-api . [(20180402 1809) ((emacs (24 4)) (request (0 2))) "another pocket api" single]) (po-mode . [(20180505 415) nil "major mode for GNU gettext PO files" single]) (pmdm . [(20151109 1036) nil "poor man's desktop-mode alternative." single]) (plur . [(20160504 224) ((emacs (24 4))) "Easily search and replace multiple variants of a word" single]) (plsense-direx . [(20140520 1308) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single]) (plsense . [(20151104 645) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single]) (plim-mode . [(20140812 1713) nil "Major mode for editing Plim files" single]) (plenv . [(20130706 2316) nil "A plenv wrapper for Emacs" single]) (playground . [(20180623 2026) ((emacs (24 4))) "Manage sandboxes for alternative configurations" single]) (playerctl . [(20180301 554) nil "Control your music player (e.g. Spotify) with playerctl" single]) (play-routes-mode . [(20170426 33) nil "Play Framework Routes File Support" single]) (play-crystal . [(20180114 224) ((emacs (24 4)) (dash (2 12 0)) (request (0 2 0))) "https://play.crystal-lang.org integration." single]) (platformio-mode . [(20161210 539) ((projectile (0 13 0))) "PlatformIO integration" single]) (plaster . [(20180127 1250) ((emacs (24 3))) "Pasting to a plaster host with buffers." single]) (plantuml-mode . [(20170819 1033) nil "Major mode for PlantUML" single]) (planet-theme . [(20161030 1917) ((emacs (24))) "A dark theme inspired by Gmail's 'Planets' theme of yore" single]) (plan9-theme . [(20180606 2035) nil "A color theme for Emacs based on Plan9" single]) (plain-theme . [(20171123 2010) ((emacs (24))) "Plain theme without syntax highlighting" single]) (pkgbuild-mode . [(20180723 747) ((emacs (25 1))) "Interface to the ArchLinux package manager" single]) (pkg-info . [(20150517 443) ((epl (0 8))) "Information about packages" single]) (pixiv-novel-mode . [(20160220 621) nil "Major mode for pixiv novel" single]) (pixie-mode . [(20180625 2241) ((clojure-mode (3 0 1)) (inf-clojure (1 0 0))) "Major mode for Pixie-lang" single]) (pivotal-tracker . [(20170720 816) nil "Interact with Pivotal Tracker through its API" single]) (pippel . [(20180710 156) ((emacs (25 1)) (s (1 11 0)) (dash (2 12 0))) "Frontend to python package manager pip" tar]) (pipenv . [(20180718 2247) ((emacs (25 1)) (f (0 19 0)) (s (1 12 0))) "A Pipenv porcelain." single]) (pip-requirements . [(20180602 1034) ((dash (2 8 0))) "A major mode for editing pip requirements files." single]) (pinyinlib . [(20170827 1442) nil "Convert first letter of Pinyin to Simplified/Traditional Chinese characters" single]) (pinyin-search . [(20160514 2058) ((pinyinlib (0 1 0))) "Search Chinese by Pinyin" single]) (pinyin . [(20180620 541) ((cl-lib (0 5)) (emacs (24))) "Convert Hanzi to Pinyin (汉字转拼音)" tar]) (pinot . [(20140211 1226) nil "Emacs interface to pinot-search" tar]) (pinboard-popular . [(20180511 1026) ((loop (1 4))) "Displays links from the pinboard.in popular page." single]) (pinboard-api . [(20140324 448) nil "Rudimentary http://pinboard.in integration" single]) (pillar . [(20141112 1011) ((makey (0 3))) "Major mode for editing Pillar files" tar]) (pig-snippets . [(20130912 2324) ((yasnippet (0 8 0))) "Snippets for pig-mode" tar]) (pig-mode . [(20180520 700) nil "Major mode for Pig files" single]) (picpocket . [(20180610 359) ((emacs (24 4))) "Image viewer" single]) (picolisp-mode . [(20150516 155) nil "Major mode for PicoLisp programming." single]) (pickle . [(20180627 1937) ((emacs (25 1)) (cl-lib (0 6 1))) "Major mode for editing cucumber gherkin files." single]) (pianobar . [(20180416 1804) nil "thin wrapper for Pianobar, a Pandora Radio client" single]) (phpunit . [(20171127 301) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5)) (cl-lib (0 5)) (emacs (24 3))) "Launch PHP unit tests using phpunit" tar]) (phpstan . [(20180721 1235) ((emacs (24 3))) "Interface to PHPStan." single]) (phpcbf . [(20180519 138) ((s (1 9 0))) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" single]) (phpactor . [(20180721 1022) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17))) "Interface to Phpactor" tar]) (php-scratch . [(20161103 1517) ((emacs (24 3)) (s (1 11 0)) (php-mode (1 17 0))) "A scratch buffer to interactively evaluate php code" single]) (php-runtime . [(20180110 934) ((emacs (25)) (cl-lib (0 5))) "Language binding bridge to PHP" single]) (php-refactor-mode . [(20171123 2235) nil "Minor mode to quickly and safely perform common refactorings" single]) (php-mode . [(20180608 250) ((emacs (24 3)) (cl-lib (0 5))) "Major mode for editing PHP code" tar]) (php-eldoc . [(20140202 1141) nil "eldoc backend for php" tar]) (php-cs-fixer . [(20170506 1133) ((cl-lib (0 5))) "php-cs-fixer wrapper." single]) (php-boris-minor-mode . [(20140209 1035) ((php-boris (0 0 1)) (highlight (0))) "a minor mode to evaluate PHP code in the Boris repl" single]) (php-boris . [(20130527 121) nil "Run boris php REPL" single]) (php-auto-yasnippets . [(20170330 1814) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar]) (phoenix-dark-pink-theme . [(20170729 703) nil "Originally a port of the Sublime Text 2 theme" single]) (phoenix-dark-mono-theme . [(20170729 706) nil "Monochromatic version of the Phoenix theme" single]) (phi-search-migemo . [(20170618 221) ((phi-search (2 2 0)) (migemo (1 9 1))) "migemo extension for phi-search" single]) (phi-search-mc . [(20160324 803) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single]) (phi-search-dired . [(20150405 14) ((phi-search (2 2 0))) "interactive filtering for dired powered by phi-search" single]) (phi-search . [(20180321 1829) nil "another incremental search & replace, compatible with \"multiple-cursors\"" tar]) (phi-rectangle . [(20151207 2254) nil "another rectangle-mark command (rewrite of rect-mark)" single]) (phi-grep . [(20170606 107) ((cl-lib (0 1))) "Interactively-editable recursive grep implementation in elisp" single]) (phi-autopair . [(20170216 1953) ((paredit (20))) "another simple-minded autopair implementation" single]) (phan . [(20180527 2039) ((emacs (24)) (composer (0 0 8)) (f (0 17))) "Utility functions for Phan (PHP static analizer)" single]) (phabricator . [(20160510 725) ((emacs (24 4)) (dash (1 0)) (projectile (0 13 0)) (s (1 10 0)) (f (0 17 2))) "Phabricator/Arcanist helpers for Emacs." single]) (ph . [(20161029 822) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar]) (pgdevenv . [(20150105 1436) nil "Manage your PostgreSQL development envs" tar]) (pg . [(20130731 1442) nil "Emacs Lisp interface to the PostgreSQL RDBMS" single]) (pfuture . [(20180715 524) ((emacs (25 2))) "a simple wrapper around asynchronous processes" single]) (perspeen . [(20171203 221) ((emacs (25 0)) (powerline (2 4))) "An package for multi-workspace" tar]) (perspective . [(20180717 1403) ((cl-lib (0 5))) "switch between named \"perspectives\" of the editor" single]) (persp-projectile . [(20180616 1244) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single]) (persp-mode-projectile-bridge . [(20170315 420) ((persp-mode (2 9)) (projectile (0 13 0)) (cl-lib (0 5))) "persp-mode + projectile integration." single]) (persp-mode . [(20180604 1018) nil "windows/buffers sets shared among frames + save/load." single]) (persp-fr . [(20180103 642) ((emacs (25 0)) (persp-mode (2 9 6)) (dash (2 13 0))) "In persp-mode, show perspective list in the GUI window title" single]) (persistent-soft . [(20150223 1053) ((pcache (0 3 1)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single]) (persistent-scratch . [(20180425 1811) ((emacs (24))) "Preserve the scratch buffer across Emacs sessions" single]) (persistent-overlays . [(20161127 2300) nil "Minor mode to store selected overlays to be loaded later" tar]) (perlbrew . [(20161108 2309) nil "A perlbrew wrapper for Emacs" single]) (perl6-mode . [(20180619 459) ((emacs (24 4)) (pkg-info (0 1))) "Major mode for editing Perl 6 code" tar]) (per-buffer-theme . [(20160318 1501) ((cl-lib (0 5))) "Change theme according to buffer name or major mode." single]) (pelican-mode . [(20180604 1507) ((emacs (25))) "Minor mode for editing Pelican sites" single]) (peg . [(20150707 2341) nil "Parsing Expression Grammars in Emacs Lisp" single]) (peep-dired . [(20160321 1537) nil "Peep at files in another window from dired buffers" single]) (peek-mode . [(20130620 1246) ((elnode (0 9 8 1))) "Serve buffers live over HTTP with elnode backend" tar]) (peacock-theme . [(20170808 620) ((emacs (24 0))) "an Emacs 24 theme based on Peacock (tmTheme)" single]) (pdf-tools . [(20180428 827) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar]) (pdb-mode . [(20150128 951) nil "Major mode for editing Protein Data Bank files" single]) (pcsv . [(20150220 331) nil "Parser of csv" single]) (pcre2el . [(20161120 1303) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" single]) (pcomplete-extension . [(20180706 2155) ((emacs (24)) (cl-lib (0 5))) "additional completion for pcomplete" single]) (pcmpl-pip . [(20171201 33) ((s (1 12 0)) (f (0 19 0)) (seq (2 15))) "pcomplete for pip" single]) (pcmpl-homebrew . [(20170110 1609) nil "pcomplete for homebrew" single]) (pcmpl-git . [(20170120 1659) nil "pcomplete for git" tar]) (pcmpl-args . [(20120911 2224) nil "Enhanced shell command completion" single]) (pcap-mode . [(20161025 748) ((emacs (24 3))) "Major mode for working with PCAP files" single]) (pcache . [(20170105 1414) ((eieio (1 3))) "persistent caching for Emacs." single]) (pc-bufsw . [(20180107 1040) nil "PC style quick buffer switcher" single]) (pbcopy . [(20150224 2059) nil "Emacs Interface to pbcopy" single]) (paxedit . [(20160730 1027) ((cl-lib (0 5)) (paredit (23))) "Structured, Context Driven LISP Editing and Refactoring" single]) (pathify . [(20160423 146) nil "Symlink your scripts into a PATH directory" single]) (path-headerline-mode . [(20140423 632) nil "Displaying file path on headerline." single]) (pastery . [(20171113 1949) ((emacs (24 4)) (request (0 2 0))) "paste snippets to pastery.net." tar]) (pastelmac-theme . [(20151030 1936) ((emacs (24 1))) "a soothing theme with a pastel color palette" single]) (pastehub . [(20140614 2320) nil "A client for the PasteHub cloud service" single]) (pastebin . [(20101125 1202) nil "A simple interface to the www.pastebin.com webservice" single]) (paste-of-code . [(20170709 1655) ((emacs (24 3)) (request (0 2 0))) "paste code on https://paste.ofcode.org" single]) (password-vault . [(20160126 1020) ((cl-lib (0 2)) (emacs (24))) "A Password manager for Emacs." single]) (password-store-otp . [(20170928 18) ((emacs (25)) (s (1 9 0)) (password-store (0 1))) "Password store (pass) OTP extension support" single]) (password-store . [(20170829 1633) ((emacs (24)) (f (0 11 0)) (s (1 9 0)) (with-editor (2 5 11))) "Password store (pass) support" single]) (password-mode . [(20170411 2329) nil "Hide password text using overlays" single]) (password-generator . [(20150222 1240) nil "Password generator for humans. Good, Bad, Phonetic passwords included." single]) (passthword . [(20141201 123) ((cl-lib (0 5))) "Simple password manager" single]) (passmm . [(20180622 1626) ((emacs (24 4)) (password-store (0))) "A minor mode for pass (Password Store)." single]) (pass . [(20180201 451) ((emacs (24 3)) (password-store (0 1)) (password-store-otp (0 1 5)) (f (0 17))) "Major mode for password-store.el" single]) (pasp-mode . [(20180404 1000) ((emacs (24 3))) "- A major mode for editing Answer Set Programs." single]) (parseclj . [(20180602 1306) ((emacs (25)) (a (0 1 0 -3 4))) "Clojure/EDN parser" tar]) (parsec . [(20171202 2031) ((emacs (24)) (cl-lib (0 5))) "Parser combinator library" single]) (parsebib . [(20180116 627) ((emacs (24 3))) "A library for parsing bib files" single]) (parse-csv . [(20160512 1023) nil "Parse strings with CSV fields into s-expressions" single]) (parinfer . [(20180718 16) ((dash (2 13 0)) (cl-lib (0 5))) "Simpler Lisp editing" tar]) (parent-mode . [(20150824 1600) nil "get major mode's parent modes" single]) (paren-face . [(20180318 1325) nil "a face for parentheses in lisp modes" single]) (paren-completer . [(20160501 352) ((emacs (24 3))) "Automatically, language agnostically, fill in delimiters." single]) (paredit-menu . [(20160128 933) ((paredit (25))) "Adds a menu to paredit.el as memory aid" single]) (paredit-everywhere . [(20180506 149) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single]) (paredit . [(20171126 1805) nil "minor mode for editing parentheses" single]) (paradox . [(20180216 334) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar]) (paperless . [(20180224 445) ((emacs (24 4)) (f (0 11 0)) (s (1 10 0)) (cl-lib (0 6 1))) "A major mode for sorting and filing PDF documents." tar]) (paper-theme . [(20180429 1515) ((emacs (24))) "A minimal Emacs colour theme." single]) (pangu-spacing . [(20170317 157) nil "Minor-mode to add space between Chinese and English characters." single]) (pandoc-mode . [(20180710 746) ((hydra (0 10 0)) (dash (2 10 0))) "Minor mode for interacting with Pandoc" tar]) (pandoc . [(20161128 357) ((emacs (24 4))) "Pandoc interface" single]) (panda-theme . [(20180203 2318) ((emacs (24))) "Panda Theme" single]) (pamparam . [(20180415 48) ((emacs (24 3)) (lispy (0 26 0)) (worf (0 1 0)) (hydra (0 13 4))) "Simple and fast flashcards." single]) (pallet . [(20150512 2) ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) "A package management tool for Emacs, using Cask." tar]) (palimpsest . [(20170119 1232) nil "Various deletion strategies when editing" single]) (pager-default-keybindings . [(20130719 1357) ((pager (1 0))) "Add the default keybindings suggested for pager.el" single]) (pager . [(20151201 1720) nil "windows-scroll commands" single]) (page-break-lines . [(20171210 31) ((emacs (24 4))) "Display ^L page breaks as tidy horizontal lines" single]) (paganini-theme . [(20180710 821) ((emacs (24 0))) "A colorful, dark and warm theme." single]) (pacmacs . [(20160131 32) ((emacs (24 4)) (dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5)) (f (0 18 0))) "Pacman for Emacs" tar]) (packed . [(20180318 1029) ((emacs (24 3))) "package manager agnostic Emacs Lisp package utilities" single]) (package-utils . [(20180514 715) ((restart-emacs (0 1 1))) "Extensions for package.el" single]) (package-safe-delete . [(20150116 807) ((emacs (24)) (epl (0 7 -4))) "Safely delete package.el packages" single]) (package-lint . [(20180608 2119) ((cl-lib (0 5)) (emacs (24))) "A linting library for elisp package authors" tar]) (package-filter . [(20161121 2319) nil "package archive whitelist and blacklist" single]) (package-build . [(20180628 2221) ((cl-lib (0 5))) "Tools for assembling a package archive" tar]) (package+ . [(20170815 1956) nil "Extensions for the package library." single]) (pabbrev . [(20160320 1401) nil "Predictive abbreviation expansion" single]) (p4 . [(20150721 1237) nil "Simple Perforce-Emacs Integration" single]) (ox-twiki . [(20170803 1339) ((org (8)) (cl-lib (0 5))) "org Twiki and Foswiki export" single]) (ox-twbs . [(20161103 1316) nil "Bootstrap compatible HTML Back-End for Org" single]) (ox-tufte . [(20160926 907) ((org (8 2)) (emacs (24))) "Tufte HTML org-mode export backend" single]) (ox-trac . [(20171026 1123) ((org (9 0))) "Org Export Backend to Trac WikiFormat" single]) (ox-tiddly . [(20180626 1352) ((org (8)) (cl-lib (0 5))) "org TiddlyWiki exporter" single]) (ox-textile . [(20180502 247) ((org (8 1))) "Textile Back-End for Org Export Engine" single]) (ox-rst . [(20180314 1713) ((emacs (24 4)) (org (8 2 4))) "Export reStructuredText using org-mode." single]) (ox-reveal . [(20161027 226) ((org (20150330))) "reveal.js Presentation Back-End for Org Export Engine" single]) (ox-qmd . [(20170402 957) ((org (8 0))) "Qiita Markdown Back-End for Org Export Engine" single]) (ox-pukiwiki . [(20150124 916) ((org (8 1))) "Pukiwiki Back-End for Org Export Engine" single]) (ox-pandoc . [(20180510 638) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0)) (cl-lib (0 5))) "org exporter for pandoc." single]) (ox-nikola . [(20151114 316) ((emacs (24 4)) (org (8 2 4)) (ox-rst (0 2))) "Export Nikola articles using org-mode." single]) (ox-minutes . [(20180202 934) ((emacs (24 4))) "Plain text backend for Org for Meeting Minutes" single]) (ox-mediawiki . [(20180105 1354) ((cl-lib (0 5)) (s (1 9 0))) "Mediawiki Back-End for Org Export Engine" single]) (ox-jira . [(20171001 216) ((org (8 3))) "JIRA Backend for Org Export Engine" single]) (ox-ioslide . [(20161015 638) ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2)) (makey (0 3))) "Export org-mode to Google I/O HTML5 slide." tar]) (ox-impress-js . [(20150412 1016) ((org (8))) "impress.js Back-End for Org Export Engine" tar]) (ox-hugo . [(20180723 1139) ((emacs (24 4)) (org (9 0))) "Hugo Markdown Back-End for Org Export Engine" tar]) (ox-html5slide . [(20131227 2206) ((org (8 0))) "Export org-mode to HTML5 slide." single]) (ox-gfm . [(20170628 1402) nil "Github Flavored Markdown Back-End for Org Export Engine" single]) (ox-epub . [(20171202 1713) ((emacs (24 3)) (org (9))) "Export org mode projects to EPUB" single]) (ox-clip . [(20180305 1940) ((org (8 2)) (htmlize (0))) "Cross-platform formatted copying for org-mode" single]) (ox-bibtex-chinese . [(20170722 2009) ((emacs (24 4))) "Let ox-bibtex work well for Chinese users" tar]) (ox-asciidoc . [(20171111 354) ((org (8 1))) "AsciiDoc Back-End for Org Export Engine" single]) (owdriver . [(20170401 612) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single]) (overseer . [(20180225 2219) ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4)) (f (0 18 1))) "Ert-runner Integration Into Emacs" single]) (overcast-theme . [(20180315 1243) ((emacs (24))) "A dark but vibrant color theme for Emacs" single]) (ov . [(20150311 2228) ((emacs (24 3))) "Overlay library for Emacs Lisp" single]) (outshine . [(20180625 1259) ((outorg (2 0)) (cl-lib (0 5))) "outline with outshine outshines outline" tar]) (outrespace . [(20180711 732) ((emacs (24 4))) "c++ namespace utility functions" single]) (outorg . [(20170414 1215) ((emacs (24 4))) "Org-style comment editing" single]) (outlook . [(20180428 730) ((emacs (24 4))) "send emails in MS Outlook style" tar]) (outlined-elisp-mode . [(20131108 327) nil "outline-minor-mode settings for emacs lisp" single]) (outline-toc . [(20170730 430) nil "Sidebar showing a \"table of contents\"." single]) (outline-magic . [(20180619 1119) nil "outline mode extensions for Emacs" single]) (other-emacs-eval . [(20180408 648) ((emacs (25 1)) (async (1 9 2))) "Evaluate the Emacs Lisp expression in other Emacs" single]) (otama . [(20160404 332) nil "Org-table Manipulator" single]) (osx-trash . [(20160520 600) ((emacs (24 1))) "System trash for OS X" tar]) (osx-pseudo-daemon . [(20170721 2307) nil "Daemon mode that plays nice with OSX." single]) (osx-org-clock-menubar . [(20150205 1311) nil "simple menubar integration for org-clock" tar]) (osx-location . [(20150613 217) nil "Watch and respond to changes in geographical location on OS X" tar]) (osx-lib . [(20160919 1700) ((emacs (24 4))) "Basic function for Apple/OSX." single]) (osx-dictionary . [(20171026 34) ((cl-lib (0 5))) "Interface for OSX Dictionary.app" tar]) (osx-clipboard . [(20141012 17) nil "Use the OS X clipboard from terminal Emacs" single]) (osx-browse . [(20140508 1341) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single]) (origami . [(20180101 753) ((s (1 9 0)) (dash (2 5 0)) (emacs (24)) (cl-lib (0 5))) "Flexible text folding" tar]) (orgtbl-show-header . [(20141023 137) nil "Show the header of the current column in the minibuffer" single]) (orgtbl-join . [(20150121 1446) ((cl-lib (0 5))) "join columns from another table" tar]) (orgtbl-ascii-plot . [(20151215 1351) nil "ascii-art bar plots in org-mode tables" single]) (orgtbl-aggregate . [(20180620 1043) nil "Create an aggregated Org table from another one" tar]) (orgnav . [(20170608 1013) ((helm (2 7 0)) (s (1 11 0)) (dash (1 11 0)) (emacs (24))) "Org tree navigation using helm" tar]) (orglue . [(20171220 426) ((org (8 1)) (epic (0 2))) "more functionality to org-mode." tar]) (orglink . [(20180318 1323) ((emacs (24 3)) (dash (2 12 1)) (org (8 3))) "use Org Mode links in other modes" single]) (orgit . [(20180318 1301) ((emacs (24 4)) (dash (2 13 0)) (magit (2 10 0)) (org (8 3 3))) "support for Org links to Magit buffers" single]) (orgbox . [(20140528 1826) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single]) (organize-imports-java . [(20180623 1209) ((emacs (26)) (f (0 20 0)) (s (1 12 0)) (cl-lib (0 6))) "Mimic Eclipse's Organize Imports functionality." single]) (organic-green-theme . [(20180522 920) nil "Low-contrast green color theme." single]) (org2web . [(20171005 1617) ((cl-lib (1 0)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (el2org (0 10)) (simple-httpd (0 1))) "A static site generator based on org mode." tar]) (org2jekyll . [(20170225 115) ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1)) (kv (0 0 19))) "Minor mode to publish org-mode post to jekyll without specific yaml" tar]) (org2issue . [(20160426 1818) ((org (8 0)) (emacs (24 4)) (ox-gfm (0 1)) (gh (0 1)) (s (20160405 920))) "export org to github issue" single]) (org2elcomment . [(20170324 245) ((org (8 3 4))) "Convert Org file to Elisp comments" single]) (org2ctex . [(20171016 2343) ((emacs (24 4))) "Export org to ctex (a latex macro for Chinese)" single]) (org2blog . [(20171218 1911) ((org (8 3)) (xml-rpc (1 6 12)) (metaweblog (1 0 1)) (htmlize (1 51))) "Blog from Org mode to wordpress" tar]) (org-wunderlist . [(20150817 1913) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4)) (s (1 9 0))) "Org sync with Wunderlist" single]) (org-wild-notifier . [(20180221 2025) ((alert (1 2)) (dash (2 13 0)) (emacs (24 4))) "Customizable org-agenda notifications" single]) (org-web-tools . [(20180531 1808) ((emacs (25 1)) (org (9 0)) (dash (2 12)) (esxml (0 3 4)) (s (1 10 0))) "Display and capture web content with Org-mode" single]) (org-wc . [(20180609 1953) nil "Count words in org mode trees." single]) (org-vcard . [(20170929 410) nil "org-mode support for vCard export and import." tar]) (org-variable-pitch . [(20180429 1515) ((emacs (25))) "Minor mode for variable pitch text in org mode." single]) (org-trello . [(20180330 2331) ((request-deferred (0 2 0)) (deferred (0 4 0)) (s (1 11 0)) (dash-functional (2 12 1)) (dash (2 12 1))) "Minor mode to synchronize org-mode buffer and trello board" tar]) (org-tree-slide . [(20180424 1636) nil "A presentation tool for org-mode" single]) (org-transform-tree-table . [(20150110 633) ((dash (2 10 0)) (s (1 3 0))) "Transform org-mode tree with properties to a table, and the other way around" single]) (org-tracktable . [(20161118 529) ((emacs (24)) (cl-lib (0 5))) "Track your writing progress in an org-table" single]) (org-toodledo . [(20150301 313) ((request-deferred (0 2 0)) (emacs (24)) (cl-lib (0 5))) "Toodledo integration for Emacs Org mode" tar]) (org-time-budgets . [(20151111 1) ((alert (0 5 10)) (cl-lib (0 5))) "Define time budgets and display clocked time." single]) (org-themis . [(20160121 2004) ((cl-lib (0 4))) "Experimental project management mode for org-mode" single]) (org-tfl . [(20170923 518) ((org (0 16 2)) (cl-lib (0 5)) (emacs (24 1))) "Transport for London meets Orgmode" tar]) (org-table-sticky-header . [(20170408 1814) ((org (8 2 10)) (emacs (24 4))) "Sticky header for org-mode tables" single]) (org-table-comment . [(20120209 1051) nil "Org table comment modes." single]) (org-sync-snippets . [(20170824 1128) ((org (8 3 5)) (emacs (24 3)) (f (0 17 3))) "Export snippets to org-mode and vice versa" single]) (org-sync . [(20180221 1127) ((cl-lib (0 5)) (org (8 2)) (emacs (24))) "Synchronize Org documents with External Issue Trackers" tar]) (org-super-agenda . [(20180714 1348) ((emacs (25 1)) (s (1 10 0)) (dash (2 13)) (org (9 0)) (ht (2 2))) "Supercharge your agenda" single]) (org-sticky-header . [(20170422 2135) ((emacs (24 4)) (org (8 3 5))) "Show off-screen Org heading at top of window" single]) (org-static-blog . [(20180527 2348) ((emacs (24 3))) "a simple org-mode based static blog generator" single]) (org-send-ebook . [(20180401 1015) ((emacs (25)) (cl-lib (0 5)) (seq (2 20))) "Send org link file to ebook reader." single]) (org-seek . [(20161216 2102) ((emacs (24 3)) (ag (0 48))) "Searching Org-mode files with search tools." single]) (org-rtm . [(20160214 436) ((rtm (0 1))) "Simple import/export from rememberthemilk to org-mode" single]) (org-rich-yank . [(20180430 644) ((emacs (24 4))) "paste with org-mode markup and link to source" single]) (org-review . [(20160906 2237) nil "schedule reviews for Org entries" single]) (org-repo-todo . [(20171227 1719) nil "Simple repository todo management with org-mode" single]) (org-ref . [(20180706 614) ((dash (2 11 0)) (htmlize (1 51)) (helm (1 5 5)) (helm-bibtex (2 0 0)) (ivy (0 8 0)) (hydra (0 13 2)) (key-chord (0)) (s (1 10 0)) (f (0 18 0)) (emacs (24 4)) (pdf-tools (0 7))) "citations, cross-references and bibliographies in org-mode" tar]) (org-redmine . [(20160711 414) nil "Redmine tools using Emacs OrgMode" single]) (org-recent-headings . [(20170907 2129) ((emacs (25 1)) (org (9 0 5)) (dash (2 13 0)) (frecency (0 1))) "Jump to recently used Org headings" single]) (org-readme . [(20151204 417) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0)) (cl-lib (0 5))) "Integrates Readme.org and Commentary/Change-logs." tar]) (org-randomnote . [(20171210 557) ((f (0 19 0)) (dash (2 12 0))) "Find a random note in your Org-Mode files" single]) (org-random-todo . [(20180312 104) ((emacs (24 3)) (alert (1 2))) "show a random TODO (with alert) every so often" single]) (org-radiobutton . [(20180612 328) ((dash (2 13 0)) (emacs (24))) "Radiobutton for org-mode lists." single]) (org-protocol-jekyll . [(20170328 939) ((cl-lib (0 5))) "Jekyll's handler for org-protocol" single]) (org-projectile-helm . [(20180601 1122) ((org-projectile (1 0 0)) (helm (2 3 1)) (emacs (25))) "helm functions for org-projectile" single]) (org-projectile . [(20180531 1942) ((projectile (0 11 0)) (dash (2 10 0)) (emacs (24)) (s (1 9 0)) (org-category-capture (0 0 0))) "Repository todo management for org-mode" single]) (org-preview-html . [(20180624 2319) ((org (8 0)) (emacs (24 4))) "automatically use eww to preview the current org file on save" single]) (org-present . [(20180303 1530) ((org (7))) "Minimalist presentation minor-mode for Emacs org-mode." single]) (org-pomodoro . [(20171108 1314) ((alert (0 5 10)) (cl-lib (0 5))) "Pomodoro implementation for org-mode." tar]) (org-pdfview . [(20180225 206) ((org (8 2 10)) (pdf-tools (0 80))) "Support for links to documents in pdfview mode" single]) (org-password-manager . [(20180227 1010) ((org (8 2 10)) (s (1 9 0)) (dash (2 13 0))) "Password manager for Org Mode." single]) (org-parser . [(20171002 2136) ((emacs (25 1)) (dash (2 12 0)) (ht (2 1))) "parse org files into structured datatypes." single]) (org-page . [(20170806 1924) ((ht (1 5)) (simple-httpd (1 4 6)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (cl-lib (0 5)) (git (0 1 1))) "a static site generator based on org mode" tar]) (org-outlook . [(20160705 638) nil "Outlook org" tar]) (org-outline-numbering . [(20180705 801) ((emacs (24)) (org (8 3)) (cl-lib (0 6)) (ov (1 0 6))) "Show outline numbering as overlays in org-mode" single]) (org-onenote . [(20171007 2200) ((oauth2 (0 11)) (request (0 2 0)) (org (8 2 10))) "export org-mode document to onenote." single]) (org-octopress . [(20170820 2115) ((org (9 0)) (orglue (0 1)) (ctable (0 1 1))) "Compose octopress articles using org-mode." tar]) (org-noter . [(20180723 1804) ((emacs (24 4)) (cl-lib (0 6)) (org (9 0))) "A synchronized, Org-mode, document annotator" single]) (org-notebook . [(20170321 2152) ((emacs (24)) (org (8)) (cl-lib (0 5))) "Ease the use of org-mode as a notebook" single]) (org-multiple-keymap . [(20150328 1806) ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) "Set keymap to elements, such as timestamp and priority." single]) (org-mru-clock . [(20180419 606) ((emacs (24 3))) "clock in/out of tasks with completion and persistent history" single]) (org-mobile-sync . [(20180605 2224) ((emacs (24 3 50)) (org (8 0))) "automatically sync org-mobile on changes" single]) (org-mind-map . [(20180614 1352) ((emacs (24)) (dash (1 8 0)) (org (8 2 10))) "Creates a directed graph from org-mode files" single]) (org-mime . [(20180607 2350) ((emacs (24 4)) (cl-lib (0 5))) "org html export for text/html MIME emails" single]) (org-make-toc . [(20180614 1959) ((emacs (25 1)) (dash (2 12)) (s (1 10 0)) (org (9 0))) "Automatic tables of contents for Org files" single]) (org-listcruncher . [(20180630 1326) ((cl-lib (0 5)) (seq (2 3)) (emacs (24 4))) "Parse Org mode list contents into table" single]) (org-linkany . [(20160206 2011) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single]) (org-link-travis . [(20140405 1627) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single]) (org-link-minor-mode . [(20170805 1152) ((org (8))) "Enable org-mode links in non-org modes" single]) (org-kanban . [(20180722 2301) ((dash (2 13 0)) (emacs (24 4)) (org (9 1))) "kanban dynamic block for org-mode." single]) (org-journal . [(20180723 57) ((emacs (25 1))) "a simple org-mode based journaling mode" single]) (org-jira . [(20180625 2111) ((emacs (24 5)) (cl-lib (0 5)) (request (0 2 0)) (s (0 0 0))) "Syncing between Jira and Org-mode." tar]) (org-iv . [(20171001 322) ((impatient-mode (1 0 0)) (org (8 0)) (cl-lib (0 5))) "a tool used to view html (in browser) generated by org-file once the org-file changes" tar]) (org-index . [(20180724 809) ((emacs (24 4))) "A personal adaptive index for org" single]) (org-if . [(20150920 813) nil "Interactive Fiction Authoring System for Org-Mode." tar]) (org-grep . [(20151202 429) ((cl-lib (0 5))) "Kind of M-x rgrep adapted for Org mode." single]) (org-gnome . [(20150614 757) ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single]) (org-gcal . [(20170420 1401) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" single]) (org-fancy-priorities . [(20180328 1631) nil "Display org priorities as custom strings" single]) (org-evil . [(20180620 817) ((dash (2 13 0)) (evil (0)) (monitor (0)) (org (0))) "Evil extensions for Org." tar]) (org-emms . [(20180720 659) ((emacs (24))) "Play multimedia files from org-mode" single]) (org-elisp-help . [(20161121 1655) ((cl-lib (0 5)) (org (9 0))) "org links to emacs-lisp documentation" single]) (org-ehtml . [(20150506 1658) ((web-server (20140109 2200)) (emacs (24 3))) "Export Org-mode files as editable web pages" tar]) (org-edit-latex . [(20170908 822) ((emacs (24 4)) (auctex (11 90))) "Edit embedded LaTeX in a dedicated buffer" single]) (org-easy-img-insert . [(20160915 1308) ((emacs (24 4))) "An easier way to add images from the web in org mode" single]) (org-dropbox . [(20150113 2109) ((dash (2 2)) (names (20150000)) (emacs (24))) "move Dropbox notes from phone into org-mode datetree" single]) (org-drill-table . [(20180115 209) ((s (1 7 0)) (dash (2 2 0)) (cl-lib (0 3)) (org (8 2)) (emacs (24 1))) "Generate drill cards from org tables" single]) (org-dp . [(20180311 123) ((cl-lib (0 5))) "Declarative Local Programming with Org Elements" tar]) (org-download . [(20180625 842) ((async (1 2))) "Image drag-and-drop for Emacs org-mode" single]) (org-dotemacs . [(20151119 1022) ((org (7 9 3)) (cl-lib (1 0))) "Store your emacs config as an org file, and choose which bits to load." single]) (org-doing . [(20161017 920) nil "Keep track of what you're doing" tar]) (org-dashboard . [(20171223 1124) ((cl-lib (0 5))) "Visually summarize progress in org files" single]) (org-cua-dwim . [(20120202 2134) nil "Org-mode and Cua mode compatibility layer" single]) (org-context . [(20170107 537) nil "Contextual capture and agenda commands for Org-mode" single]) (org-commentary . [(20160801 2337) ((dash (2 0)) (emacs (24 4)) (org (8 0))) "generate or update conventional library headers using Org mode files" tar]) (org-clock-today . [(20161014 220) ((emacs (25))) "Show the total clocked time of the current day in the mode line" single]) (org-clock-csv . [(20180313 1957) ((org (8 3)) (s (1 0))) "Export `org-mode' clock entries to CSV format." single]) (org-clock-convenience . [(20160830 1156) ((cl-lib (0 5)) (org (8)) (emacs (24 3))) "convenience functions for org time tracking" single]) (org-cliplink . [(20180717 408) ((emacs (24 4))) "insert org-mode links from the clipboard" tar]) (org-chef . [(20180706 1835) ((org (0)) (emacs (24))) "Cookbook and recipe management with org-mode." tar]) (org-category-capture . [(20180531 1942) ((org (9 0 0)) (emacs (24))) "Contextualy capture of org-mode TODOs." single]) (org-capture-pop-frame . [(20160518 308) ((emacs (24 4))) "Run org-capture in a new pop frame" single]) (org-caldav . [(20180403 1336) ((org (7))) "Sync org files with external calendar through CalDAV" single]) (org-bullets . [(20180208 1543) nil "Show bullets in org-mode as UTF-8 characters" single]) (org-brain . [(20180712 1410) ((emacs (25)) (org (9))) "Org-mode concept mapping" single]) (org-bookmark-heading . [(20170510 1008) ((emacs (24 4))) "Emacs bookmark support for org-mode" single]) (org-board . [(20180530 1120) nil "bookmarking and web archival system for Org mode." single]) (org-beautify-theme . [(20170908 1518) nil "A sub-theme to make org-mode more beautiful." single]) (org-babel-eval-in-repl . [(20170511 514) ((eval-in-repl (0 9 2)) (matlab-mode (3 3 6)) (ess (16 10)) (emacs (24))) "Eval org-mode babel code blocks in various REPLs." tar]) (org-autolist . [(20170924 1201) nil "Improved list management in org-mode" single]) (org-attach-screenshot . [(20180419 2225) nil "screenshots integrated with org attachment dirs" single]) (org-alert . [(20180523 1833) ((s (1 10 0)) (dash (2 11 0)) (alert (1 2))) "Notify org deadlines via notify-send" single]) (org-agenda-property . [(20140626 1416) ((emacs (24 2))) "Display org properties in the agenda buffer." single]) (org-ac . [(20170401 607) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single]) (orca . [(20171030 1216) ((emacs (24 3))) "Org Capture" single]) (operate-on-number . [(20150706 2323) nil "Operate on number at point with arithmetic functions" single]) (openwith . [(20120531 1436) nil "Open files with external programs" single]) (openstack-cgit-browse-file . [(20130819 227) nil "Browse the current file in OpenStack cgit" single]) (opensource . [(20160926 916) ((s (1 11 0)) (dash (2 12 1)) (pkg-info (0 6 0)) (request (0 2 0))) "Client for Opensource API" tar]) (opener . [(20161207 1010) ((request (0 2 0)) (emacs (24)) (cl-lib (0 5))) "opening urls as buffers" tar]) (opencl-mode . [(20170816 549) nil "Syntax coloring for opencl kernels" single]) (opencc . [(20170722 116) ((emacs (24 4))) "中文简繁转换 <-> 中文簡繁轉換 (Convert Chinese with OpenCC)" single]) (open-junk-file . [(20161210 314) nil "Open a junk (memo) file to try-and-error" single]) (open-in-msvs . [(20170123 1428) nil "Open current file:line:column in Microsoft Visual Studio" tar]) (opam . [(20150719 520) ((emacs (24 1))) "OPAM tools" single]) (one-time-pad-encrypt . [(20160329 813) nil "One time pad encryption within file" single]) (one-themes . [(20180507 1008) ((emacs (24))) "One Colorscheme" tar]) (on-screen . [(20160302 150) ((cl-lib (0))) "guide your eyes while scrolling" single]) (on-parens . [(20180202 1441) ((dash (2 10 0)) (emacs (24)) (evil (1 1 6)) (smartparens (1 6 3))) "smartparens wrapper to fit with evil-mode/vim normal-state" single]) (omtose-phellack-theme . [(20161111 1320) nil "A dark theme, with cold bluish touch." tar]) (omnisharp . [(20180606 318) ((emacs (24 4)) (flycheck (30)) (dash (2 12 0)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5)) (s (1 10 0)) (shut-up (0 3 2)) (f (0 19 0))) "Omnicompletion (intellisense) and more for C#" tar]) (omnibox . [(20180422 1749) ((emacs (26 1)) (dash (2 13)) (frame-local (0 0 1))) "Selection package" single]) (omni-tags . [(20170426 1409) ((pcre2el (1 7)) (cl-lib (0 5))) "Highlight and Actions for 'Tags'" tar]) (omni-scratch . [(20171009 1451) nil "Easy and mode-specific draft buffers" single]) (omni-quotes . [(20170425 1132) ((dash (2 8)) (omni-log (0 3 3)) (f (0 19 0)) (s (1 11 0)) (ht (2 1))) "Random quotes displayer" tar]) (omni-log . [(20170930 535) ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (2 13 0))) "Logging utilities" tar]) (omni-kill . [(20171016 1440) nil "Kill all the things" single]) (om-mode . [(20140915 1410) nil "Insert Om component template with life cycle." single]) (olivetti . [(20180531 37) ((emacs (24 4))) "Minor mode for a nice writing environment" single]) (oldlace-theme . [(20150705 600) ((emacs (24))) "Emacs 24 theme with an 'oldlace' background." single]) (old-norse-input . [(20170816 1142) ((emacs (24))) "An input method for Old Norse" single]) (offlineimap . [(20150916 458) nil "Run OfflineIMAP from Emacs" single]) (octopress . [(20170813 615) nil "A lightweight wrapper for Jekyll and Octopress." tar]) (octo-mode . [(20161008 529) ((emacs (24))) "Major mode for Octo assembly language" single]) (octicons . [(20151031 2040) ((cl-lib (0 5))) "octicons utility" tar]) (ocp-indent . [(20180417 849) nil "automatic indentation with ocp-indent" single]) (ocodo-svg-modelines . [(20150516 719) ((svg-mode-line-themes (0))) "A collection of beautiful SVG modelines" tar]) (oceanic-theme . [(20161015 119) nil "Oceanic theme." single]) (occur-x . [(20130610 643) nil "Extra functionality for occur" single]) (occur-context-resize . [(20170904 1609) nil "dynamically resize context around matches in occur-mode" single]) (occidental-theme . [(20130312 1258) nil "Custom theme for faces based on Adwaita" single]) (obsidian-theme . [(20170719 248) nil "port of the eclipse obsidian theme" single]) (objc-font-lock . [(20141021 1122) nil "Highlight Objective-C method calls." single]) (obfusurl . [(20170809 824) ((cl-lib (0 5))) "Obfuscate URLs so they aren't spoilers" single]) (oberon . [(20120715 209) nil "Major mode for editing Oberon/Oberon-2 program texts" single]) (ob-uart . [(20170521 158) nil "org-babel support for UART communication" single]) (ob-typescript . [(20150804 530) ((emacs (24)) (org (8 0))) "org-babel functions for typescript evaluation" single]) (ob-translate . [(20170720 1219) ((google-translate (0 11)) (org (8))) "Translation of text blocks in org-mode." single]) (ob-swift . [(20170921 625) ((org (8))) "org-babel functions for swift evaluation" single]) (ob-sql-mode . [(20180426 1211) ((emacs (24 4))) "SQL code blocks evaluated by sql-mode" single]) (ob-sml . [(20130829 1143) ((sml-mode (6 4))) "org-babel functions for template evaluation" single]) (ob-sagemath . [(20170130 1833) ((sage-shell-mode (0 0 8)) (s (1 8 0)) (emacs (24))) "org-babel functions for SageMath evaluation" tar]) (ob-rust . [(20180606 1646) nil "Org-babel functions for Rust" tar]) (ob-restclient . [(20180703 902) ((restclient (0))) "org-babel functions for restclient-mode" single]) (ob-prolog . [(20180720 344) nil "org-babel functions for prolog evaluation." single]) (ob-nim . [(20170809 1130) ((cl-lib (0 5))) "Babel Functions for nim" single]) (ob-mongo . [(20170720 1219) ((org (8))) "Execute mongodb queries within org-mode blocks." single]) (ob-ml-marklogic . [(20170622 1133) nil "org-babel functions for MarkLogic evaluation" tar]) (ob-mermaid . [(20180522 959) nil "org-babel support for mermaid evaluation" single]) (ob-lfe . [(20170725 720) ((org (8))) "org-babel functions for lfe evaluation" single]) (ob-kotlin . [(20170725 718) ((org (8))) "org-babel functions for kotlin evaluation" single]) (ob-ipython . [(20180224 153) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "org-babel functions for IPython evaluation" tar]) (ob-hy . [(20180701 2240) ((emacs (24 4))) "org-babel functions for Hy-lang evaluation" tar]) (ob-http . [(20180707 748) ((s (1 9 0)) (cl-lib (0 5))) "http request in org-mode babel" tar]) (ob-go . [(20170731 1057) nil "org-babel functions for go evaluation" tar]) (ob-fsharp . [(20170618 729) ((emacs (25)) (fsharp-mode (1 9 8))) "Org-Babel F#" single]) (ob-elvish . [(20180427 1200) nil "org-babel functions for Elvish shell" single]) (ob-elixir . [(20170725 719) ((org (8))) "org-babel functions for elixir evaluation" single]) (ob-diagrams . [(20160407 537) nil "org-babel functions for diagrams evaluation" single]) (ob-dart . [(20170106 824) nil "org-babel functions for Dart evaluation" single]) (ob-dao . [(20170816 858) ((org (8))) "Org Babel Functions for Dao" single]) (ob-cypher . [(20170725 720) ((s (1 9 0)) (cypher-mode (0 0 6)) (dash (2 10 0)) (dash-functional (1 2 0))) "query neo4j using cypher in org-mode blocks" single]) (ob-crystal . [(20180125 2318) ((emacs (24 3))) "org-babel functions for Crystal evaluation" tar]) (ob-coffeescript . [(20180125 2319) ((emacs (24 4))) "org-babel functions for coffee-script evaluation, and fully implementation!" single]) (ob-coffee . [(20170725 724) ((org (8))) "org-babel functions for coffee-script evaluation" tar]) (ob-clojurescript . [(20180406 1128) ((emacs (24 4)) (org (9 0))) "org-babel functions for ClojureScript evaluation" single]) (ob-cfengine3 . [(20180102 1012) nil "Org Babel functions for CFEngine 3" single]) (ob-browser . [(20170720 1218) ((org (8))) "Render HTML in org-mode blocks." tar]) (ob-blockdiag . [(20170727 1801) nil "org-babel functions for blockdiag evaluation" single]) (ob-axiom . [(20171103 1548) ((emacs (24 2)) (axiom-environment (20171021))) "An org-babel backend for the axiom-environment system" single]) (ob-async . [(20180624 1553) ((async (1 9)) (org (9 0 1)) (emacs (24 4)) (dash (2 14 1))) "Asynchronous org-babel src block execution" single]) (ob-applescript . [(20160914 1327) nil "org-babel functions for template evaluation" single]) (oauth . [(20130127 1751) nil "Oauth library." tar]) (o-blog . [(20151202 1539) nil "Standalone orgmode blog exporter" tar]) (nyx-theme . [(20170910 607) ((emacs (24))) "Dark theme" single]) (nyan-mode . [(20170423 40) nil "Nyan Cat shows position in current buffer in mode-line." tar]) (nvm . [(20171217 836) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) "Manage Node versions within Emacs" single]) (nv-delete-back . [(20170224 449) ((emacs (24))) "backward delete like modern text editors" single]) (nummm-mode . [(20131117 214) nil "Display the number of minor modes instead of their names" single]) (numbers . [(20170802 434) ((emacs (24))) "Display information and trivia about numbers" single]) (number-lock . [(20160829 1900) nil "Enter symbols on your number keys without pressing shift" single]) (number . [(20170901 612) nil "Working with numbers at point." single]) (nubox . [(20170619 210) nil "Nubox color theme (dark, light and tty versions)" tar]) (nu-mode . [(20180619 1428) ((undo-tree (0 6 5)) (ace-window (0)) (avy (0)) (which-key (0)) (transpose-frame (0))) "Modern Emacs Prompts Based Keybinding." tar]) (nsis-mode . [(20180718 2008) nil "NSIS-mode" tar]) (nrepl-sync . [(20140807 854) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single]) (nrepl-eval-sexp-fu . [(20140311 341) ((highlight (0 0 0)) (smartparens (0 0 0)) (thingatpt (0 0 0))) "Tiny functionality enhancements for evaluating sexps." single]) (npm-mode . [(20180720 1001) ((emacs (24 1))) "minor mode for working with npm projects" single]) (noxml-fold . [(20170823 657) nil "Fold away XML things." single]) (nova-theme . [(20180530 801) ((emacs (24 3))) "A dark, pastel color theme" single]) (nov . [(20180617 1444) ((dash (2 12 0)) (esxml (0 3 3)) (emacs (24 4))) "Featureful EPUB reader mode" single]) (notmuch-labeler . [(20131230 919) ((notmuch (0))) "Improve notmuch way of displaying labels" tar]) (notmuch . [(20180503 1659) nil "run notmuch within emacs" tar]) (nose . [(20140520 948) nil "Easy Python test running in Emacs" single]) (northcode-theme . [(20180423 949) ((emacs (24))) "A dark theme focused on blue and orange colors." single]) (nordless-theme . [(20180613 50) nil "A mostly colorless theme" single]) (nord-theme . [(20180102 1001) ((emacs (24))) "An arctic, north-bluish clean and elegant theme" single]) (nofrils-acme-theme . [(20180620 548) ((emacs (24))) "Port of \"No Frils Acme\" Vim theme." tar]) (noflet . [(20141102 654) nil "locally override functions" single]) (nodemcu-mode . [(20180501 1525) ((emacs (25))) "Minor mode for NodeMCU" single]) (nodejs-repl . [(20170722 443) nil "Run Node.js REPL" single]) (node-resolver . [(20140930 1023) ((cl-lib (0 5))) "hook to install node modules in background" single]) (noctilux-theme . [(20161113 642) ((emacs (24))) "Dark theme inspired by LightTable" single]) (nocomments-mode . [(20170213 1237) nil "Minor mode that makes comments invisible." single]) (noccur . [(20150514 1420) nil "Run multi-occur on project/dired files" single]) (noaa . [(20180419 1133) ((request (0 2 0)) (cl-lib (0 5)) (emacs (24))) "Get NOAA weather data" single]) (no-littering . [(20180723 1440) ((cl-lib (0 5))) "help keeping ~/.emacs.d clean" single]) (no-emoji . [(20180515 1137) ((emacs (24))) "Show :emoji-name: instead of emoji characters" single]) (nnir-est . [(20180710 1403) nil "Gnus nnir interface for HyperEstraier" single]) (nm . [(20151110 1110) ((notmuch (0 21)) (peg (0 6)) (company (0)) (emacs (24 3))) "NEVERMORE: an email interface for Notmuch" tar]) (nlinum-relative . [(20160526 8) ((emacs (24 4)) (nlinum (1 5))) "Relative line number with nlinum" single]) (nlinum-hl . [(20170613 1748) ((emacs (24 4)) (nlinum (1 7)) (cl-lib (0 5))) "heal nlinum's line numbers" single]) (nixos-options . [(20160209 1041) ((emacs (24))) "Interface for browsing and completing NixOS options." single]) (nix-update . [(20180424 1748) ((emacs (25))) "Update \"fetch\" blocks in .nix expressions" single]) (nix-sandbox . [(20171004 1006) ((dash (2 12 1)) (s (1 10 0))) "Utility functions to work with nix-shell sandboxes" single]) (nix-mode . [(20180629 1501) ((emacs (24 3))) "Major mode for editing .nix files" tar]) (nix-buffer . [(20180212 718) ((f (0 17 3)) (emacs (24 4))) "Set up buffer environments with nix" single]) (ninja-mode . [(20141203 2159) ((emacs (24))) "Major mode for editing .ninja files" single]) (nimbus-theme . [(20180606 1936) nil "An awesome dark theme" single]) (nim-mode . [(20180516 1309) ((emacs (24 4)) (epc (0 1 1)) (let-alist (1 0 1)) (commenter (0 5 1)) (flycheck-nimsuggest (0 8 1))) "A major mode for the Nim programming language" tar]) (nikola . [(20170703 1321) ((async (1 5)) (emacs (24 3))) "Simple wrapper for nikola" single]) (night-owl-theme . [(20180630 1431) ((emacs (24))) "A color theme for the night owls out there" single]) (niconama . [(20170910 801) ((emacs (24)) (request (20170131 1747)) (cl-lib (0 5))) "Tools for Niconico Live Broadcast" single]) (niceify-info . [(20160416 544) nil "improve usability of Info pages" single]) (nginx-mode . [(20170611 2137) nil "major mode for editing nginx config files" single]) (ng2-mode . [(20180520 1731) ((typescript-mode (0 1))) "Major modes for editing Angular 2" tar]) (nexus . [(20140114 505) nil "REST Client for Nexus Maven Repository servers" tar]) (newlisp-mode . [(20160226 745) nil "newLISP editing mode for Emacs" single]) (never-comment . [(20140104 1407) nil "Never blocks are comment" single]) (network-watch . [(20171123 346) ((emacs (24 3))) "Support for intermittent network connectivity" single]) (netrunner . [(20160910 1632) ((popup (0 5 3)) (company (0 9 0)) (helm (1 9 5))) "Create Android: Netrunner decklists using Company, Helm and org-mode" single]) (netherlands-holidays . [(20150202 817) nil "Netherlands holidays for Emacs calendar." single]) (netease-music . [(20180429 1822) ((names (0 5)) (emacs (25))) "listen netease music" single]) (nerdtab . [(20180527 408) ((emacs (24 5))) "Keyboard-oriented tabs" single]) (neotree . [(20180616 903) ((cl-lib (0 5))) "A tree plugin like NerdTree for Vim" tar]) (neon-mode . [(20180406 456) nil "Simple major mode for editing neon files" single]) (nemerle . [(20161029 1323) nil "major mode for editing nemerle programs" single]) (neato-graph-bar . [(20171230 1753) ((emacs (24 3))) "Neat-o graph bars CPU/memory etc." single]) (nclip . [(20130617 1315) nil "Network (HTTP) Clipboard" tar]) (ncl-mode . [(20180128 2303) ((emacs (24))) "Major Mode for editing NCL scripts and other goodies" tar]) (navorski . [(20141203 1024) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single]) (navi2ch . [(20150329 1916) nil "Navigator for 2ch for Emacsen" tar]) (navi-mode . [(20180515 1948) ((outshine (2 0)) (outorg (2 0))) "major-mode for easy buffer-navigation" single]) (nav-flash . [(20140508 1341) nil "Briefly highlight the current line" single]) (nav . [(20120507 7) nil "Emacs mode for filesystem navigation" tar]) (nasm-mode . [(20180711 1209) ((emacs (24 3))) "NASM x86 assembly major mode" single]) (nash-mode . [(20160830 512) nil "Nash major mode" single]) (narrowed-page-navigation . [(20150108 2119) ((emacs (24)) (cl-lib (0 5))) "A minor mode for showing one page at a time" single]) (narrow-reindent . [(20150722 1206) ((emacs (24 4))) "Defines a minor mode to left-align narrowed regions." single]) (naquadah-theme . [(20180212 440) nil "A theme based on Tango color set" single]) (nanowrimo . [(20151104 1828) nil "Track progress for nanowrimo" single]) (nand2tetris-assembler . [(20171201 1013) ((nand2tetris (1 1 0))) "Assembler For the Nand2tetris Course" single]) (nand2tetris . [(20171201 1013) ((emacs (24))) "Major mode for HDL files in the nand2tetris course" tar]) (namespaces . [(20130326 1550) nil "An implementation of namespaces for Elisp, with an emphasis on immutabilty." single]) (names . [(20180321 455) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." tar]) (nameless . [(20180215 1421) ((emacs (24 4))) "Hide package namespace in your emacs-lisp code" single]) (nameframe-projectile . [(20160927 2103) ((nameframe (0 4 1 -2)) (projectile (0 13 0))) "Nameframe integration with Projectile" single]) (nameframe-perspective . [(20170405 1819) ((nameframe (0 4 1 -2)) (perspective (1 12))) "Nameframe integration with perspective.el" single]) (nameframe . [(20171106 1656) nil "Manage frames by name." single]) (name-this-color . [(20151014 1330) ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) "Match RGB codes to names easily and precisely" single]) (n4js . [(20150713 1931) ((emacs (24)) (cypher-mode (0))) "Neo4j Shell" single]) (myterminal-controls . [(20170425 1936) ((emacs (24)) (cl-lib (0 5))) "Quick toggle controls at a key-stroke" single]) (mysql2sqlite . [(20170725 1516) nil "Convert mysql databases into sqlite databases." single]) (mysql-to-org . [(20180123 714) ((emacs (24 3)) (s (1 11 0))) "Minor mode to output the results of mysql queries to org tables" single]) (mynt-mode . [(20150512 1349) ((virtualenvwrapper (20131514))) "Minor mode to work with the mynt static site generator" single]) (mykie . [(20150808 1505) ((emacs (24 3)) (cl-lib (0 5))) "Command multiplexer: Register multiple functions to a keybind" tar]) (myanmar-input-methods . [(20160106 737) nil "Emacs Input Method for Myanmar" single]) (mxf-view . [(20180501 40) ((emacs (25))) "Simple MXF viewer" single]) (mwim . [(20180227 852) nil "Switch between the beginning/end of line or code" single]) (mw-thesaurus . [(20180628 2225) ((emacs (25))) "Merriam-Webster Thesaurus" single]) (mvn . [(20160211 743) nil "helpers for compiling with maven" single]) (mutant . [(20160124 553) ((emacs (24 4)) (dash (2 1 0))) "An interface for the Mutant testing tool" single]) (mustard-theme . [(20170808 619) ((emacs (24 0))) "an Emacs 24 theme based on Mustard (tmTheme)" single]) (mustang-theme . [(20170719 246) nil "port of vim's mustang theme" single]) (mustache-mode . [(20141024 732) nil "A major mode for editing Mustache files." single]) (mustache . [(20170923 533) ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) "a mustache templating library in emacs lisp" tar]) (multitran . [(20180320 956) ((emacs (24)) (cl-lib (0 5))) "Interface to multitran" single]) (multiple-cursors . [(20180615 518) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar]) (multifiles . [(20130615 1433) nil "View and edit parts of multiple files in one buffer" single]) (multicolumn . [(20150202 1451) nil "Creating and managing multiple side-by-side windows." single]) (multi-web-mode . [(20130823 2054) nil "multiple major mode support for web editing" tar]) (multi-term . [(20160619 233) nil "Managing multiple terminal buffers in Emacs." single]) (multi-run . [(20180122 709) ((emacs (24)) (window-layout (1 4))) "Manage multiple terminals and run commands on them" single]) (multi-project . [(20171217 1211) ((emacs (25))) "Find files, compile, search, and switch between" single]) (multi-line . [(20170821 1926) ((emacs (24 3)) (s (1 9 0)) (cl-lib (0 5)) (dash (2 12 0)) (shut-up (0 3 2))) "multi-line statements" tar]) (multi-compile . [(20160306 1423) ((emacs (24)) (dash (2 12 1))) "Multi target interface to compile." single]) (multi . [(20131013 844) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single]) (muban . [(20180415 519) ((emacs (25))) "Lightweight template expansion tool" single]) (mu4e-query-fragments . [(20170923 622) ((emacs (24 4))) "mu4e query fragments extension" single]) (mu4e-maildirs-extension . [(20180606 112) ((dash (0 0 0))) "Show mu4e maildirs summary in mu4e-main-view" single]) (mu4e-jump-to-list . [(20180425 1132) ((emacs (24 4)) (cl-lib (0 5))) "mu4e jump-to-list extension" single]) (mu4e-conversation . [(20180722 159) ((emacs (25 1))) "Show a complete thread in a single buffer" single]) (mu4e-alert . [(20180304 2246) ((alert (1 2)) (s (1 10 0)) (ht (2 0)) (emacs (24 3))) "Desktop notification for mu4e" single]) (mu-cite . [(20160130 300) ((flim (1 14 9))) "A library to provide MIME features." tar]) (mtg-deck-mode . [(20180613 1310) ((emacs (25 1))) "Major mode to edit MTG decks" tar]) (msvc . [(20171225 738) ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (2 0 0))) "Microsoft Visual C/C++ mode" tar]) (mqtt-mode . [(20180605 1031) ((emacs (25)) (dash (2 12 0))) "client for interaction with MQTT servers" single]) (mqr . [(20180527 504) ((emacs (24 4))) "Multi-dimensional query and replace" single]) (mpv . [(20180602 314) ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (org (8 0))) "control mpv for easy note-taking" single]) (mpmc-queue . [(20180303 1229) ((emacs (26 0)) (queue (0 2 0))) "a multiple-producer-multiple-consumer queue" single]) (mpdel . [(20180606 512) ((emacs (25 1)) (libmpdel (0 7 0))) "Play and control your MPD music" tar]) (mpages . [(20150710 704) nil "An Emacs buffer for quickly writing your Morning Pages" single]) (mozc-temp . [(20160228 40) ((emacs (24)) (dash (2 10 0)) (mozc (0))) "Use mozc temporarily" single]) (mozc-popup . [(20150223 1634) ((popup (0 5 2)) (mozc (0))) "Mozc with popup" single]) (mozc-im . [(20160411 1722) ((mozc (0))) "Mozc with input-method-function interface." single]) (mozc . [(20180101 0) nil "minor mode to input Japanese with Mozc" single]) (moz-controller . [(20151208 1806) ((moz (0))) "Control Firefox from Emacs" single]) (moz . [(20150805 1006) nil "Lets current buffer interact with inferior mozilla." single]) (mowedline . [(20161121 1835) nil "elisp utilities for using mowedline" single]) (move-text . [(20170908 2030) nil "Move current line or region with M-up or M-down." single]) (move-dup . [(20180531 537) nil "Eclipse-like moving and duplicating lines or rectangles." single]) (mouse-slider-mode . [(20161021 1214) ((emacs (24 3)) (cl-lib (0 3))) "scale numbers dragged under the mouse" single]) (motion-mode . [(20140919 1856) ((flymake-easy (0 7)) (flymake-cursor (1 0 2))) "major mode for RubyMotion enviroment" tar]) (mote-mode . [(20160122 1629) ((ruby-mode (1 1))) "Mote minor mode" single]) (mosey . [(20180614 949) ((emacs (24 4))) "Mosey around your buffers" single]) (morlock . [(20180318 1323) nil "more font-lock keywords for elisp" single]) (morganey-mode . [(20170118 134) ((emacs (24 4))) "Major mode for editing Morganey files" single]) (moonscript . [(20170831 1526) ((cl-lib (0 5)) (emacs (24))) "Major mode for editing MoonScript code" tar]) (moom . [(20180618 1245) ((emacs (25 1))) "Commands to control frame position and size" tar]) (moody . [(20180403 549) ((emacs (25 3))) "Tabs and ribbons for the mode line" single]) (monroe . [(20180703 1046) nil "Yet another client for nREPL" single]) (monotropic-theme . [(20180218 357) ((emacs (24))) "Monotropic Theme" single]) (monokai-theme . [(20180402 221) nil "A fruity color theme for Emacs." single]) (monokai-alt-theme . [(20170630 1348) ((emacs (24))) "Theme with a dark background. Based on sublime monokai theme." single]) (monochrome-theme . [(20140326 350) nil "A dark Emacs 24 theme for your focused hacking sessions" tar]) (monky . [(20180716 720) nil "Control Hg from Emacs." tar]) (monitor . [(20161018 444) ((dash (2 13 0))) "Utilities for monitoring expressions." tar]) (mongo . [(20150315 519) nil "MongoDB driver for Emacs Lisp" tar]) (molokai-theme . [(20151016 845) nil "molokai theme with Emacs theme engine" single]) (molecule . [(20180527 43) ((emacs (25 1))) "Simple wrapper for molecule" single]) (moe-theme . [(20180616 1900) nil "A colorful eye-candy theme. Moe, moe, kyun!" tar]) (modtime-skip-mode . [(20140128 1401) nil "Minor mode for disabling modtime and supersession checks on files." single]) (modern-cpp-font-lock . [(20180110 1231) nil "Font-locking for \"Modern C++\"" single]) (mode-line-debug . [(20180318 1525) nil "show status of `debug-on-error' in the mode-line" single]) (mode-line-bell . [(20171231 1939) nil "Flash the mode line instead of ringing the bell" single]) (mode-icons . [(20170216 620) ((emacs (24)) (cl-lib (0 5))) "Show icons for modes" tar]) (modalka . [(20171231 2213) ((emacs (24 4))) "Easily introduce native modal editing of your own design" single]) (mocker . [(20150916 1854) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single]) (mocha-snippets . [(20170103 2127) ((yasnippet (0 8 0))) "Yasnippets for the Mocha JS Testing Framework" tar]) (mocha . [(20180321 1622) ((js2-mode (20150909)) (f (0 18))) "Run Mocha or Jasmine tests" single]) (mobdebug-mode . [(20140109 1946) ((lua-mode (20130419)) (emacs (24))) "Major mode for MobDebug" single]) (mo-vi-ment-mode . [(20131028 2333) nil "Provide vi-like cursor movement that's easy on the fingers" single]) (mo-git-blame . [(20160129 959) nil "An interactive, iterative 'git blame' mode for Emacs" single]) (mmt . [(20171231 2219) ((emacs (24 1)) (cl-lib (0 3))) "Missing macro tools for Emacs Lisp" single]) (mmm-mako . [(20121019 2351) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single]) (mmm-jinja2 . [(20170313 720) ((mmm-mode (0 5 4))) "MMM submode class for Jinja2 Templates" single]) (mkdown . [(20140517 718) ((markdown-mode (2 0))) "Pretty Markdown previews based on mkdown.com" tar]) (mixed-pitch . [(20180410 917) ((emacs (24 3))) "Use a variable pitch, keeping fixed pitch where it's sensible" single]) (mips-mode . [(20180502 757) nil "Major-mode for MIPS assembly" single]) (mip-mode . [(20151126 2217) nil "virtual projects for emacs." single]) (minor-mode-hack . [(20170925 1734) nil "Change priority of minor-mode keymaps" single]) (minizinc-mode . [(20180201 650) ((emacs (24 1))) "Major mode for MiniZinc code" single]) (minitest . [(20160628 1120) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" tar]) (minions . [(20180709 1012) ((emacs (25 3)) (dash (2 13 0))) "A minor-mode menu for the mode line" single]) (minimal-theme . [(20160608 322) nil "A light/dark minimalistic Emacs 24 theme." tar]) (minimal-session-saver . [(20140508 1341) nil "Very lean session saver" single]) (miniedit . [(20100419 1045) nil "Enhanced editing for minibuffer fields." single]) (minibuffer-cua . [(20130906 434) nil "Make CUA mode's S-up/S-down work in minibuffer" single]) (minibuffer-complete-cycle . [(20130813 945) nil "Cycle through the *Completions* buffer" single]) (minibuf-isearch . [(20151226 1143) nil "incremental search on minibuffer history" single]) (mini-header-line . [(20170621 521) ((emacs (24 4))) "a minimal header-line" single]) (mingus . [(20180712 2336) ((libmpdee (2 1))) "MPD Interface" tar]) (minesweeper . [(20150413 2222) nil "play minesweeper in Emacs" single]) (milkode . [(20140926 2229) nil "Command line search and direct jump with Milkode" single]) (migemo . [(20160924 741) ((cl-lib (0 5))) "Japanese incremental search through dynamic pattern expansion" single]) (midje-mode . [(20170808 2103) ((cider (0 1 4)) (clojure-mode (1 0))) "Minor mode for running Midje tests in emacs" tar]) (micgoline . [(20160414 2026) ((emacs (24 3)) (powerline (2 3))) "powerline mode, color schemes from microsoft and google's logo." single]) (mic-paren . [(20170731 1207) nil "advanced highlighting of matching parentheses" single]) (mhc . [(20180723 2158) ((calfw (20150703))) "Message Harmonized Calendaring system." tar]) (mgmtconfig-mode . [(20180222 1257) ((emacs (24 3))) "mgmt configuration management language" single]) (mexican-holidays . [(20160109 1342) nil "Mexico holidays for Emacs calendar." single]) (mew . [(20180709 1817) nil "Messaging in the Emacs World" tar]) (metaweblog . [(20171216 1840) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar]) (metascript-mode . [(20150708 1757) ((emacs (24 3))) "Major mode for the Metascript programming language" single]) (metalheart-theme . [(20160709 2341) ((emacs (24))) "Low-contrast theme with a dark blue-green background." single]) (meta-presenter . [(20170425 1934) nil "A simple multi-file presentation tool for Emacs" single]) (messages-are-flowing . [(20170218 1720) nil "visible indication when composing \"flowed\" emails" single]) (meson-mode . [(20170901 1135) ((emacs (24 3))) "Major mode for the Meson build system files" single]) (merlin-eldoc . [(20180630 1026) ((emacs (24 4)) (merlin (3 0))) "eldoc for OCaml and Reason" single]) (merlin . [(20180214 242) nil "Mode for Merlin, an assistant for OCaml." tar]) (mentor . [(20170105 221) ((xml-rpc (1 6 9)) (seq (1 11)) (cl-lib (0 5))) "Frontend for the rTorrent bittorrent client" tar]) (memolist . [(20150804 1021) ((markdown-mode (22 0)) (ag (0 45))) "memolist.el is Emacs port of memolist.vim." single]) (memoize . [(20180614 1230) nil "Memoization functions" single]) (melpa-upstream-visit . [(20130720 333) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single]) (mellow-theme . [(20170808 617) ((emacs (24 0))) "an Emacs 24 theme based on Mellow (tmTheme)" single]) (melancholy-theme . [(20170220 1248) nil "A dark theme for dark minds" single]) (meghanada . [(20180717 1810) ((emacs (24 3)) (yasnippet (0 6 1)) (company (0 9 0)) (flycheck (0 23))) "A better java development mode" tar]) (mediawiki . [(20170812 2255) nil "mediawiki frontend" single]) (md4rd . [(20180625 2236) ((emacs (25 1)) (hierarchy (0 7 0)) (request (0 3 0)) (cl-lib (0 6 1)) (dash (2 12 0)) (s (1 12 0)) (tree-mode (1 0 0))) "Mode for reddit (browse it)." single]) (md-readme . [(20160811 946) nil "Markdown-formatted READMEs for your ELisp" tar]) (mc-extras . [(20180519 2139) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar]) (mbsync . [(20180530 33) nil "run mbsync to fetch mails" single]) (mbo70s-theme . [(20170808 615) ((emacs (24 0))) "70s style palette, with similarities to mbo theme" single]) (mbe . [(20151126 334) ((emacs (24)) (cl-lib (0 5))) "Macros by Example" single]) (mb-url . [(20161224 1806) ((cl-lib (0))) "Multiple Backends for Emacs URL package." tar]) (maxframe . [(20170120 905) nil "maximize the emacs frame based on display size" single]) (maven-test-mode . [(20141219 2157) ((s (1 9)) (emacs (24))) "Utilities for navigating test files and running maven test tasks." single]) (maude-mode . [(20160222 807) nil "Emacs mode for the programming language Maude" single]) (matlab-mode . [(20180125 1010) nil "Major mode for MATLAB(R) dot-m files" tar]) (math-symbols . [(20170818 759) ((helm (1 0))) "Math Symbol Input methods and conversion tools" tar]) (math-symbol-lists . [(20170221 553) nil "Lists of Unicode math symbols and latex commands" tar]) (material-theme . [(20171123 1040) ((emacs (24 1))) "A Theme based on the colors of the Google Material Design" tar]) (mastodon . [(20180305 1909) ((emacs (24 4))) "Client for Mastodon" tar]) (maruo-macro-mode . [(20160616 649) ((emacs (24 3))) "Major mode for editing Hidemaru/Maruo macro script" single]) (marshal . [(20180124 439) ((eieio (1 4)) (json (1 3)) (ht (2 1))) "eieio extension for automatic (un)marshalling" single]) (marmalade-client . [(20141231 1207) ((web (0 5 2)) (kv (0 0 19)) (gh (0 8 0))) "client for marmalade API from emacs" tar]) (markup-faces . [(20141110 17) nil "collection of faces for markup language modes" single]) (markup . [(20170420 429) ((cl-lib (0 5))) "Simple markup generation helpers." single]) (markdownfmt . [(20160609 541) ((emacs (24))) "Format markdown using markdownfmt" single]) (markdown-toc . [(20170711 1249) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 1))) "A simple TOC generator for markdown file" tar]) (markdown-preview-mode . [(20171121 2323) ((emacs (24 3)) (websocket (1 6)) (markdown-mode (2 0)) (cl-lib (0 5)) (web-server (0 1 1)) (uuidgen (0 3))) "markdown realtime preview minor mode." tar]) (markdown-preview-eww . [(20160111 702) ((emacs (24 4))) "Realtime preview by eww" single]) (markdown-mode . [(20180707 555) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" single]) (markdown-mode+ . [(20170320 1404) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar]) (mark-tools . [(20130614 325) nil "Some simple tools to access the mark-ring in Emacs" single]) (mark-multiple . [(20121118 754) nil "Sorta lets you mark several regions at once." tar]) (marcopolo . [(20160421 304) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client to the Docker HUB/Registry API" tar]) (map-regexp . [(20130522 1403) ((cl-lib (0 2))) "map over matches of a regular expression" single]) (map-progress . [(20140310 1432) nil "mapping macros that report progress" single]) (mandoku-tls . [(20171117 1840) ((emacs (24 4)) (mandoku (20170301)) (github-clone (0 2)) (hydra (0 13 6)) (helm (1 7 0)) (org (9 0)) (helm-charinfo (20170601))) "A tool to access the TLS database" single]) (mandoku . [(20180403 406) ((org (8 0)) (magit (20151028)) (github-clone (20150705)) (git (20140128))) "A tool to access repositories of premodern Chinese texts" tar]) (mandm-theme . [(20170925 321) nil "An M&M color theme." single]) (manage-minor-mode . [(20140310 900) ((emacs (24 3))) "Manage your minor-modes easily" single]) (man-commands . [(20151221 1421) ((cl-lib (0 5))) "Add interactive commands for every manpages installed in your computer." single]) (malyon . [(20161208 1325) ((cl-lib (0 5))) "mode to execute Z-code files version 3, 5, 8" single]) (mallard-snippets . [(20131023 1151) ((yasnippet (0 8 0)) (mallard-mode (0 1 1))) "Yasnippets for Mallard" tar]) (mallard-mode . [(20131203 2025) nil "Major mode for editing Mallard files" tar]) (malinka . [(20171202 221) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single]) (makey . [(20131231 630) ((cl-lib (0 2))) "interactive commandline mode" single]) (makefile-executor . [(20180720 132) ((emacs (24 3)) (dash (2 11 0)) (f (0 11 0)) (s (1 10 0))) "Commands for conveniently running makefile targets" single]) (make-it-so . [(20180128 1307) ((swiper (0 8 0)) (emacs (24))) "Transform files with Makefile recipes." tar]) (make-color . [(20140625 450) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single]) (major-mode-icons . [(20170228 2314) ((emacs (24 3)) (powerline (2 4)) (all-the-icons (2 3 0))) "display icon for major-mode on mode-line." tar]) (majapahit-theme . [(20160817 1148) nil "Color theme with a dark and light versions" tar]) (magnatune . [(20151030 1235) ((dash (2 9 0)) (s (1 9 0))) "browse magnatune's music catalog" tar]) (magma-mode . [(20180413 727) ((cl-lib (0 3)) (dash (2 6 0)) (f (0 17 1))) "Magma mode for Emacs" tar]) (magithub . [(20180724 1122) ((emacs (25)) (magit (2 12)) (s (1 12 0)) (ghub+ (0 3)) (git-commit (2 12)) (markdown-mode (2 3))) "Magit interfaces for GitHub" tar]) (magit-topgit . [(20160313 1254) ((emacs (24 4)) (magit (2 1 0))) "TopGit extension for Magit" single]) (magit-todos . [(20180716 2339) ((emacs (25 2)) (a (0 1 0)) (anaphora (1 0 0)) (async (1 9 2)) (dash (2 13 0)) (f (0 17 2)) (hl-todo (1 9 0)) (magit (2 13 0)) (pcre2el (1 8)) (s (1 12 0))) "Show source file TODOs in Magit" single]) (magit-tbdiff . [(20180527 652) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-tbdiff" single]) (magit-svn . [(20170213 433) ((emacs (24 4)) (magit (2 1 0))) "Git-Svn extension for Magit" single]) (magit-stgit . [(20180522 542) ((emacs (24 4)) (magit (2 1 0))) "StGit extension for Magit" single]) (magit-popup . [(20180618 1602) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefix-infix-suffix command combos" tar]) (magit-p4 . [(20170414 546) ((magit (2 1)) (magit-popup (2 1)) (p4 (12 0)) (cl-lib (0 5))) "git-p4 plug-in for Magit" single]) (magit-org-todos . [(20180709 1250) ((magit (2 0 0)) (emacs (24))) "Add local todo items to the magit status buffer" single]) (magit-lfs . [(20170312 1524) ((emacs (24 4)) (magit (2 10 3)) (dash (2 13 0))) "Magit plugin for Git LFS" single]) (magit-imerge . [(20180609 858) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-imerge" single]) (magit-gitflow . [(20170929 124) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single]) (magit-gh-pulls . [(20180716 936) ((emacs (24 4)) (gh (0 9 1)) (magit (2 12 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single]) (magit-gerrit . [(20160226 130) ((magit (2 3 1))) "Magit plugin for Gerrit Code Review" single]) (magit-find-file . [(20150702 130) ((magit (2 1 0)) (dash (2 8 0))) "completing-read over all files in Git" single]) (magit-filenotify . [(20151116 1540) ((magit (1 3 0)) (emacs (24 4))) "Refresh status buffer when git tree changes" single]) (magit-annex . [(20180715 1812) ((cl-lib (0 3)) (magit (2 12 0))) "Control git-annex from Magit" single]) (magit . [(20180723 1158) ((emacs (25 1)) (async (20180527)) (dash (20180413)) (ghub (20180417)) (git-commit (20180602)) (magit-popup (20180509)) (with-editor (20180414))) "A Git porcelain inside Emacs." tar]) (magic-latex-buffer . [(20170530 1705) ((cl-lib (0 5)) (emacs (24 3))) "Magically enhance LaTeX-mode font-locking for semi-WYSIWYG editing" single]) (magic-filetype . [(20180219 752) ((emacs (24)) (s (1 9 0))) "Enhance filetype major mode" single]) (mag-menu . [(20150505 1150) ((splitter (0 1 0))) "Intuitive keyboard-centric menu system" single]) (madhat2r-theme . [(20170202 1630) ((emacs (24))) "dark color theme that is easy on the eyes" single]) (macrostep . [(20161120 1306) ((cl-lib (0 5))) "interactive macro expander" tar]) (macro-math . [(20130328 904) nil "in-buffer mathematical operations" single]) (maces-game . [(20170903 851) ((dash (2 12 0)) (cl-lib (0 5)) (emacs (24))) "another anagram game." tar]) (mac-pseudo-daemon . [(20170728 1240) ((cl-lib (0 1))) "Daemon mode that plays nice with Mac OS." single]) (m-buffer . [(20170407 1441) ((seq (2 14))) "List-Oriented, Functional Buffer Manipulation" tar]) (lyrics . [(20180123 2004) ((emacs (25 1)) (seq (2 15))) "Show lyrics" single]) (lxc-tramp . [(20180523 1324) ((emacs (24)) (cl-lib (0 6))) "TRAMP integration for LXC containers" single]) (lxc . [(20140410 1322) nil "lxc integration with Emacs" single]) (lv . [(20160912 756) nil "Other echo area" single]) (lusty-explorer . [(20180628 646) nil "Dynamic filesystem explorer and buffer switcher" single]) (lush-theme . [(20141107 806) ((emacs (24))) "A dark theme with strong colors" single]) (luarocks . [(20170430 1605) ((emacs (24)) (cl-lib (0 5))) "luarocks tools" single]) (lua-mode . [(20180323 321) nil "a major-mode for editing Lua scripts" tar]) (lsp-vue . [(20180628 15) ((emacs (25 1)) (lsp-mode (3 0))) "Vue support for lsp-mode" single]) (lsp-ui . [(20180618 1951) ((emacs (25 1)) (dash (2 13)) (dash-functional (1 2 0)) (flycheck (31)) (lsp-mode (4 0)) (markdown-mode (2 3))) "UI modules for lsp-mode" tar]) (lsp-typescript . [(20180614 1311) ((lsp-mode (3 0)) (typescript-mode (0 1)) (emacs (25 1))) "Javascript/Typescript support for lsp-mode" single]) (lsp-rust . [(20180305 508) ((emacs (25)) (lsp-mode (3 0)) (rust-mode (0 3 0)) (dash (1 0)) (markdown-mode (2 3))) "Rust support for lsp-mode" single]) (lsp-python . [(20180609 16) ((lsp-mode (3 0))) "Python support for lsp-mode" single]) (lsp-php . [(20180331 944) ((emacs (25 1)) (lsp-mode (3 4))) "PHP support for lsp-mode" single]) (lsp-ocaml . [(20180610 1154) ((emacs (25 1)) (lsp-mode (3 0))) "OCaml support for lsp-mode" single]) (lsp-mode . [(20180708 1914) ((emacs (25 1))) "Minor mode for interacting with Language Servers" tar]) (lsp-javascript-typescript . [(20180614 1311) ((lsp-mode (3 0)) (typescript-mode (0 1)) (emacs (25 1))) "Javascript/Typescript support for lsp-mode" single]) (lsp-javascript-flow . [(20180612 2208) ((lsp-mode (3 0)) (emacs (25 1))) "Javascript/Flow support for lsp-mode" single]) (lsp-javacomp . [(20180218 2334) ((emacs (25 1)) (lsp-mode (3 0)) (s (1 2 0))) "Provide Java IDE features powered by JavaComp." single]) (lsp-java . [(20180701 111) ((emacs (25 1)) (lsp-mode (3 0))) "Java support for lsp-mode" single]) (lsp-intellij . [(20180621 1131) ((emacs (25 1)) (lsp-mode (4 1))) "intellij lsp client" single]) (lsp-html . [(20180629 25) ((lsp-mode (4 2))) "HTML support for lsp-mode" single]) (lsp-haskell . [(20180131 459) ((lsp-mode (3 0)) (haskell-mode (1 0))) "Haskell support for lsp-mode" single]) (lsp-hack . [(20180703 1837) ((lsp-mode (4 2))) "lsp-mode client for hacklang" single]) (lsp-go . [(20180630 1101) ((lsp-mode (3 0))) "Go support for lsp-mode" single]) (lsp-css . [(20180627 1251) ((lsp-mode (3 0)) (emacs (25 1))) "CSS/LESS/SASS support for lsp-mode" single]) (lsp-clangd . [(20180630 1834) ((lsp-mode (3 0)) (emacs (24 3))) "clangd support for lsp-mode" single]) (love-minor-mode . [(20170726 2236) ((lua-mode (20130419))) "Minor mode for working on LÖVE projects" single]) (lorem-ipsum . [(20140911 1408) nil "Insert dummy pseudo Latin text." single]) (loop . [(20160813 707) nil "friendly imperative loop structures" single]) (look-mode . [(20151211 1026) nil "quick file viewer for image and text file browsing" single]) (look-dired . [(20160729 1623) ((look-mode (1 0))) "Extensions to look-mode for dired buffers" single]) (lolcode-mode . [(20111002 147) nil "Major mode for editing LOLCODE" single]) (logview . [(20180522 1054) ((emacs (24 4)) (datetime (0 3))) "Major mode for viewing log files" single]) (logstash-conf . [(20170524 1229) nil "basic mode for editing logstash configuration" single]) (logpad . [(20180607 1215) nil "Simulate Windows Notepad for logging." single]) (lognav-mode . [(20180708 322) ((emacs (24 3))) "Navigate Log Error Messages" single]) (logito . [(20120225 1255) ((eieio (1 3))) "logging library for Emacs" single]) (logalimacs . [(20131021 1129) ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120))) "Front-end to logaling-command for Ruby gems" single]) (log4j-mode . [(20160108 1118) nil "major mode for viewing log files" single]) (log4e . [(20170401 604) nil "provide logging framework for elisp" single]) (lodgeit . [(20150312 649) nil "Paste to a lodgeit powered pastebin" single]) (lockfile-mode . [(20170624 2207) nil "Major mode for .lock files" single]) (loccur . [(20161227 251) ((emacs (24 3))) "Perform an occur-like folding in current buffer" single]) (loc-changes . [(20160801 1008) nil "keep track of positions even after buffer changes" single]) (load-theme-buffer-local . [(20120702 1336) nil "Install emacs24 color themes by buffer." single]) (load-relative . [(20170526 310) nil "relative file load (within a multi-file Emacs package)" tar]) (load-env-vars . [(20180511 1510) ((emacs (24))) "Load environment variables from files" single]) (lms . [(20170804 922) ((emacs (25 1))) "Squeezebox / Logitech Media Server frontend" single]) (livid-mode . [(20131116 544) ((skewer-mode (1 5 3)) (s (1 8 0))) "Live browser eval of JavaScript every time a buffer changes" single]) (livescript-mode . [(20140612 2121) nil "Major mode for editing LiveScript files" single]) (livereload . [(20170628 2350) ((emacs (25)) (websocket (1 8))) "Livereload server" tar]) (lively . [(20171005 54) nil "interactively updating text" single]) (live-py-mode . [(20180723 2228) ((emacs (24 3))) "Live Coding in Python" tar]) (live-code-talks . [(20150115 1423) ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) "Support for slides with live code in them" single]) (literate-starter-kit . [(20150730 1154) ((emacs (24 3))) "A literate starter kit to configure Emacs using Org-mode files." tar]) (literate-coffee-mode . [(20170211 715) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single]) (literal-string . [(20170301 730) ((markdown-mode (2 0)) (emacs (25))) "edit string literals in a dedicated buffer" single]) (litecoin-ticker . [(20160611 1711) ((json (1 2))) "litecoin price in modeline" single]) (litable . [(20160922 859) ((dash (2 6 0))) "dynamic evaluation replacement with emacs" single]) (lit-mode . [(20141123 936) nil "Major mode for lit" single]) (list-utils . [(20160414 702) nil "List-manipulation utility functions" single]) (list-unicode-display . [(20150219 101) ((cl-lib (0 5))) "Search for and list unicode characters by name" single]) (list-packages-ext . [(20151115 916) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single]) (list-environment . [(20151226 1856) nil "A tabulated process environment editor" single]) (lispyville . [(20180704 458) ((lispy (0)) (evil (1 2 12)) (cl-lib (0 5)) (emacs (24 4))) "A minor mode for integrating evil with lispy." single]) (lispyscript-mode . [(20170720 1217) nil "Major mode for LispyScript code." single]) (lispy . [(20180723 858) ((emacs (24 1)) (ace-window (0 9 0)) (iedit (0 9 9)) (swiper (0 7 0)) (hydra (0 13 4)) (zoutline (0 1 0))) "vi-like Paredit" tar]) (lispxmp . [(20170925 1723) nil "Automagic emacs lisp code annotation" single]) (lisp-extra-font-lock . [(20160930 1227) nil "Highlight bound variables and quoted exprs." single]) (liso-theme . [(20160410 1329) nil "Eclectic Dark Theme for GNU Emacs" single]) (liquid-types . [(20151201 2335) ((flycheck (0 13)) (dash (1 2)) (emacs (24 1)) (popup (0 5 2)) (pos-tip (0 5 0)) (flycheck-liquidhs (0 0 1)) (button-lock (1 0 2))) "show inferred liquid-types" single]) (linum-relative . [(20180124 247) nil "display relative line number in emacs." single]) (linum-off . [(20160217 1337) nil "Provides an interface for turning line-numbering off" single]) (linphone . [(20130524 409) nil "Emacs interface to Linphone" tar]) (link-hint . [(20180519 1430) ((avy (0 4 0)) (emacs (24 1)) (cl-lib (0 5))) "Use avy to open, copy, etc. visible links." single]) (link . [(20140717 2029) nil "Hypertext links in text buffers" single]) (lingr . [(20100807 1031) nil "Lingr Client for GNU Emacs" single]) (lines-at-once . [(20180421 1947) ((emacs (25))) "Insert and edit multiple lines at once" single]) (line-up-words . [(20180219 224) nil "Align words in an intelligent way" single]) (line-reminder . [(20180602 2252) ((emacs (24 4)) (cl-lib (0 6))) "Remind current line status by current buffer." single]) (light-soap-theme . [(20150607 745) ((emacs (24))) "Emacs 24 theme with a light background." single]) (lice . [(20170220 143) nil "License And Header Template" tar]) (libmpdel . [(20180606 453) ((emacs (25 1))) "Communication with an MPD server" single]) (libmpdee . [(20160117 1501) nil "Client end library for mpd, a music playing daemon" single]) (libgit . [(20180624 2359) ((emacs (25 1))) "Thin bindings to libgit2." tar]) (libelcouch . [(20180604 53) ((emacs (25 1)) (request (0 3 0))) "Communication with CouchDB" single]) (lfe-mode . [(20170121 454) nil "Lisp Flavoured Erlang mode" tar]) (lexbind-mode . [(20141027 729) nil "Puts the value of lexical-binding in the mode line" single]) (levenshtein . [(20090830 340) nil "Edit distance between two strings." single]) (leuven-theme . [(20170919 252) nil "Awesome Emacs color theme on white background" tar]) (letterbox-mode . [(20170701 1825) ((emacs (24 3))) "hide sensitive text on a buffer" single]) (letcheck . [(20160202 1148) nil "Check the erroneous assignments in let forms" single]) (less-css-mode . [(20160930 2153) nil "Major mode for editing LESS CSS files (lesscss.org)" single]) (lentic-server . [(20160717 1352) ((lentic (0 8)) (web-server (0 1 1))) "Web Server for Emacs Literate Source" single]) (lentic . [(20161202 1352) ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) "One buffer as a view of another" tar]) (lenlen-theme . [(20170328 1945) ((color-theme-solarized (20150110))) "a solarized-based kawaii light theme" single]) (lemon-mode . [(20130216 504) nil "A major mode for editing lemon grammar files" single]) (legalese . [(20150820 1024) nil "Add legalese to your program files" single]) (leerzeichen . [(20170422 613) nil "Minor mode to display whitespace characters." single]) (ledger-mode . [(20180705 138) ((emacs (24 3))) "Helper code for use with the \"ledger\" command-line tool" tar]) (leanote . [(20161222 1739) ((emacs (24 4)) (cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3)) (pcache (0 4 0)) (s (1 10 0)) (async (1 9))) "A minor mode writing markdown leanote" single]) (lean-mode . [(20180712 57) ((emacs (24 3)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 10 0)) (f (0 19 0)) (flycheck (30))) "A major mode for the Lean language" tar]) (lcr . [(20180414 1256) ((dash (2 12 0)) (emacs (25 1))) "lightweight coroutines" single]) (lcb-mode . [(20160815 2240) ((emacs (24))) "LiveCode Builder major mode" single]) (lavender-theme . [(20170808 613) ((emacs (24 0))) "an Emacs 24 theme based on Lavender (tmTheme)" single]) (launchctl . [(20150518 609) ((emacs (24 1))) "Interface to launchctl on Mac OS X." single]) (launch-mode . [(20170105 2112) ((emacs (24 4))) "Major mode for launch-formatted text" tar]) (launch . [(20130619 1504) nil "launch files with OS-standard associated applications." single]) (latexdiff . [(20180521 1532) ((emacs (24 4))) "Latexdiff integration in Emacs" single]) (latex-unicode-math-mode . [(20170123 1016) nil "Input method for Unicode math symbols" tar]) (latex-preview-pane . [(20180222 951) nil "Makes LaTeX editing less painful by providing a updatable preview pane" tar]) (latex-pretty-symbols . [(20151112 244) nil "Display many latex symbols as their unicode counterparts" single]) (latex-math-preview . [(20170522 1455) nil "preview LaTeX mathematical expressions." single]) (latex-extra . [(20170816 1847) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." single]) (lastpass . [(20171208 216) ((emacs (24 4)) (seq (1 9)) (cl-lib (0 5))) "LastPass command wrapper" single]) (language-detection . [(20161123 1013) ((emacs (24)) (cl-lib (0 5))) "Automatic language detection from code snippets" single]) (langtool . [(20180409 316) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" single]) (langdoc . [(20150217 2245) ((cl-lib (0 2))) "Help to define help document mode for various languages" single]) (lang-refactor-perl . [(20131122 1327) nil "Simple refactorings, primarily for Perl" single]) (labburn-theme . [(20170502 207) nil "A lab color space zenburn theme." single]) (kwin . [(20150308 1112) nil "communicatewith the KWin window manager" single]) (kv . [(20140108 734) nil "key/value data structure functions" single]) (kurecolor . [(20180401 521) ((emacs (24 1)) (s (1 0))) "color editing goodies for Emacs" single]) (kubernetes-tramp . [(20171026 922) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for kubernetes containers" single]) (kubernetes-evil . [(20171122 1819) ((kubernetes (0 12 0)) (evil (1 2 12))) "Kubernetes keybindings for evil-mode." single]) (kubernetes . [(20180706 520) ((emacs (25 1)) (dash (2 12 0)) (magit (2 8 0))) "Magit-like porcelain for Kubernetes." tar]) (ksp-cfg-mode . [(20180608 2247) ((cl-lib (0 5))) "major mode for editing KSP CFG files" single]) (kroman . [(20150827 1640) nil "Korean hangul romanization" single]) (kpm-list . [(20170924 652) nil "An emacs buffer list that tries to intelligently group together buffers." single]) (kotlin-mode . [(20180219 853) ((emacs (24 3))) "Major mode for kotlin" single]) (kosmos-theme . [(20170502 1150) ((emacs (24))) "Black and lightgray theme with not so much syntax highlighting." single]) (korean-holidays . [(20170228 2045) nil "Korean holidays for calendar." single]) (kooten-theme . [(20161023 205) ((emacs (24 1))) "Dark color theme" single]) (kolon-mode . [(20140122 334) nil "Syntax highlighting for Text::Xslate's Kolon syntax" single]) (kodi-remote . [(20180609 1654) ((request (0 2 0)) (let-alist (1 0 4)) (json (1 4)) (elnode (20140203 1506))) "Remote Control for Kodi" single]) (know-your-http-well . [(20160208 1504) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar]) (klere-theme . [(20180415 1123) ((emacs (24))) "A dark theme with lambent color highlights and incremental grays" single]) (kixtart-mode . [(20150611 904) ((emacs (24))) "major mode for Kixtart scripting files" single]) (kiwix . [(20170927 120) ((emacs (24 4)) (cl-lib (0 5))) "Kiwix interface and support." single]) (kivy-mode . [(20180702 1329) nil "Emacs major mode for editing Kivy files" single]) (kite-mini . [(20160508 406) ((dash (2 11 0)) (websocket (1 5))) "Remotely evaluate JavaScript in the WebKit debugger" tar]) (kite . [(20130201 1138) ((json (1 2)) (websocket (0 93 1))) "WebKit inspector front-end" tar]) (killer . [(20120808 422) nil "kill and delete text" single]) (kill-ring-search . [(20140422 855) nil "incremental search for the kill ring" single]) (kill-or-bury-alive . [(20171231 2218) ((emacs (24 4)) (cl-lib (0 5))) "Precise control over buffer killing in Emacs" single]) (kibit-helper . [(20150508 833) ((s (0 8)) (emacs (24))) "Conveniently use the Kibit Leiningen plugin from Emacs" single]) (keyword-search . [(20180424 402) nil "browser keyword search from Emacs" tar]) (keyswap . [(20160813 257) ((emacs (24 3))) "swap bindings between key pairs" single]) (keyset . [(20150219 2130) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single]) (keymap-utils . [(20180318 1537) ((cl-lib (0 3))) "keymap utilities" single]) (keyfreq . [(20160516 716) ((cl-lib (0 5))) "track command frequencies" single]) (keydef . [(20090428 1231) nil "a simpler way to define keys, with kbd syntax" single]) (keychain-environment . [(20180318 1523) nil "load keychain environment variables" single]) (keycast . [(20180318 1321) ((emacs (25 3))) "Show current command and its key in the mode line" single]) (key-seq . [(20150907 56) ((key-chord (0 6))) "map pairs of sequentially pressed keys to commands" single]) (key-leap . [(20160831 747) ((emacs (24 3))) "Leap between lines by typing keywords" single]) (key-intercept . [(20140210 2349) nil "Intercept prefix keys" single]) (key-combo . [(20150324 739) nil "map key sequence to commands" single]) (key-chord . [(20160227 438) nil "map pairs of simultaneously pressed keys to commands" single]) (kerl . [(20150424 1305) nil "Emacs integration for kerl" single]) (kdeconnect . [(20180126 1540) nil "An interface for KDE Connect" single]) (karma . [(20160220 445) ((pkg-info (0 4)) (emacs (24))) "Karma Test Runner Emacs Integration" single]) (kaomoji . [(20171226 2040) ((emacs (24 3)) (helm-core (1 9 1))) "Input kaomoji superb easily" tar]) (kaolin-themes . [(20180722 1037) ((emacs (25 1)) (autothemer (0 2 2)) (cl-lib (0 6))) "A set of eye pleasing themes" tar]) (kanji-mode . [(20160826 439) nil "View stroke order for kanji characters at cursor" tar]) (kanban . [(20170418 110) nil "Parse org-todo headlines to use org-tables as Kanban tables" single]) (kaleidoscope-evil-state-flash . [(20170728 320) ((evil (1 2 12)) (kaleidoscope (0 1 0)) (s (1 11 0))) "Flash keyboard LEDs when changing Evil state" single]) (kaleidoscope . [(20170808 117) ((s (1 11 0))) "Controlling Kaleidoscope-powered devices." single]) (kakapo-mode . [(20171003 2151) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single]) (kaesar-mode . [(20160128 208) ((kaesar (0 1 4)) (cl-lib (0 3))) "Encrypt/Decrypt buffer by AES with password." single]) (kaesar-file . [(20160128 208) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single]) (kaesar . [(20160128 208) ((cl-lib (0 3))) "Another AES algorithm encrypt/decrypt string with password." single]) (jvm-mode . [(20150422 8) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single]) (jumplist . [(20151119 1945) ((cl-lib (0 5))) "Jump like vim jumplist or ex jumplist" single]) (jump-tree . [(20171014 851) nil "Treat position history as a tree" tar]) (jump-to-line . [(20130122 853) nil "Jump to line number at point." single]) (jump-char . [(20180601 648) nil "navigation by char" single]) (jump . [(20161126 1728) ((findr (0 7)) (inflections (2 4)) (cl-lib (0 5))) "build functions which contextually jump between files" single]) (jumblr . [(20170727 1343) ((s (1 8 0)) (dash (2 2 0))) "an anagram game for emacs" tar]) (julia-shell . [(20161125 1110) ((julia-mode (0 3))) "Major mode for an inferior Julia shell" tar]) (julia-repl . [(20171116 46) ((emacs (25))) "A minor mode for a Julia REPL" single]) (julia-mode . [(20171116 642) nil "Major mode for editing Julia source code" single]) (jtags . [(20160211 1229) nil "enhanced tags functionality for Java development" tar]) (jsx-mode . [(20130908 1024) nil "major mode for JSX" single]) (jst . [(20150604 438) ((s (1 9)) (f (0 17)) (dash (2 10)) (pcache (0 3)) (emacs (24 4))) "JS test mode" single]) (jss . [(20130508 723) ((emacs (24 1)) (websocket (0)) (js2-mode (0))) "An emacs interface to webkit and mozilla debuggers" tar]) (jsonnet-mode . [(20180310 2256) ((emacs (24))) "Major mode for editing jsonnet files" single]) (json-snatcher . [(20150511 2047) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single]) (json-rpc . [(20180104 728) ((emacs (24 1)) (cl-lib (0 5))) "JSON-RPC library" single]) (json-reformat . [(20160212 53) nil "Reformatting tool for JSON" single]) (json-navigator . [(20171220 19) ((emacs (24 3)) (hierarchy (0 6 0))) "View and navigate JSON structures" single]) (json-mode . [(20180718 109) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files." single]) (jsfmt . [(20150727 1525) nil "Interface to jsfmt command for javascript files" single]) (jscs . [(20151015 1049) ((emacs (24 1)) (cl-lib (0 5))) "Consistent JavaScript editing using JSCS" single]) (js3-mode . [(20160515 850) nil "An improved JavaScript editing mode" tar]) (js2-refactor . [(20180502 342) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar]) (js2-mode . [(20180724 101) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar]) (js2-highlight-vars . [(20170418 1129) ((emacs (24 4)) (js2-mode (20150908))) "highlight occurrences of the variable under cursor" single]) (js2-closure . [(20170816 1218) ((js2-mode (20150909))) "Google Closure dependency manager" single]) (js-import . [(20170115 853) ((emacs (24 4)) (f (0 19 0)) (projectile (0 14 0)) (dash (2 13 0))) "Import Javascript files from your current project or dependencies" single]) (js-format . [(20170118 1702) ((emacs (24 1)) (js2-mode (20101228))) "Format or transform code style using NodeJS server with different javascript formatter" tar]) (js-doc . [(20160714 2134) nil "Insert JsDoc style comment easily" single]) (js-comint . [(20171129 2056) ((emacs (24 3))) "JavaScript interpreter in window." single]) (js-codemod . [(20171104 454) ((emacs (24 4))) "Run js-codemod on current line or selected region" tar]) (js-auto-format-mode . [(20180123 830) ((emacs (24))) "Minor mode for auto-formatting JavaScript code" single]) (js-auto-beautify . [(20161030 2209) ((web-beautify (0 3 1)) (web-mode (14 0 27))) "auto format you js/jsx file" single]) (jquery-doc . [(20150812 58) nil "jQuery api documentation interface for emacs" tar]) (jq-mode . [(20180407 1048) ((emacs (25 1))) "Edit jq scripts." tar]) (jpop . [(20170410 550) ((emacs (24)) (dash (2 11 0)) (cl-lib (0 5))) "Lightweight project caching and navigation framework" tar]) (jonprl-mode . [(20160818 1759) ((emacs (24 3)) (cl-lib (0 5)) (yasnippet (0 8 0))) "A major mode for editing JonPRL files" tar]) (jknav . [(20121006 1325) nil "Automatically enable j/k keys for line-based navigation" single]) (jist . [(20161229 921) ((emacs (24 4)) (dash (2 12 0)) (seq (1 11)) (let-alist (1 0 4)) (magit (2 1 0)) (request (0 2 0))) "Gist integration" single]) (jira-markup-mode . [(20150601 1409) nil "Emacs Major mode for JIRA-markup-formatted text files" single]) (jinja2-mode . [(20141128 207) nil "A major mode for jinja2" single]) (jg-quicknav . [(20170808 1830) ((s (1 9 0)) (cl-lib (0 5))) "Quickly navigate the file system to find a file." single]) (jetbrains . [(20180228 2102) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17))) "JetBrains IDE bridge" single]) (jenkins-watch . [(20121004 1626) nil "Watch continuous integration build status" single]) (jenkins . [(20170721 236) ((dash (2 12)) (emacs (24 3)) (json (1 4))) "Minimalistic Jenkins client for Emacs" single]) (jemdoc-mode . [(20170704 1327) ((emacs (24 3))) "Major mode for editing jemdoc files" single]) (jekyll-modes . [(20141117 514) ((polymode (0 2))) "Major modes (markdown and HTML) for authoring Jekyll content" single]) (jedi-direx . [(20140310 236) ((jedi (0 1 2)) (direx (0 1 -3))) "Tree style source code viewer for Python buffer" single]) (jedi-core . [(20170121 610) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar]) (jedi . [(20160425 2156) ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) "a Python auto-completion for Emacs" single]) (jdee . [(20180711 1336) ((emacs (24 3)) (flycheck (30)) (memoize (1 0 1)) (dash (2 13 0)) (s (1 12 0))) "Java Development Environment for Emacs" tar]) (jdecomp . [(20170224 1400) ((emacs (24 5))) "Interface to Java decompilers" single]) (jbeans-theme . [(20180309 825) ((emacs (24))) "Jbeans theme for GNU Emacs 24 (deftheme)" single]) (jazz-theme . [(20170411 711) nil "A warm color theme for Emacs 24+." single]) (jaword . [(20170425 2327) ((tinysegmenter (0 1))) "Minor-mode for handling Japanese words better" single]) (javap-mode . [(20120223 1408) nil "Javap major mode" single]) (javadoc-lookup . [(20160213 1631) ((cl-lib (0 3))) "Javadoc Emacs integration with Maven" tar]) (java-snippets . [(20160626 1952) ((yasnippet (0 8 0))) "Yasnippets for Java" tar]) (java-imports . [(20170913 710) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Java imports" single]) (jastadd-ast-mode . [(20161219 126) ((emacs (24))) "Major mode for editing JastAdd AST files" single]) (jasminejs-mode . [(20150526 1705) nil "A minor mode for manipulating jasmine test files" tar]) (jar-manifest-mode . [(20160430 1726) nil "Major mode to edit JAR manifest files" single]) (jape-mode . [(20140903 806) nil "An Emacs editing mode mode for GATE's JAPE files" single]) (japanlaw . [(20160129 20) ((cl-lib (0 5))) "Japan law from law.e-gov.go.jp" single]) (japanese-holidays . [(20160927 2318) ((cl-lib (0 3))) "calendar functions for the Japanese calendar" single]) (jammer . [(20160310 59) nil "Punish yourself for using Emacs inefficiently" single]) (jade-mode . [(20160525 741) nil "Major mode for editing .jade files" single]) (jack-connect . [(20141207 407) nil "Manage jack connections within Emacs" single]) (jabber-otr . [(20150918 444) ((emacs (24)) (jabber (0 8 92))) "Off-The-Record messaging for jabber.el" tar]) (jabber . [(20170423 513) ((fsm (0 2))) "A Jabber client for Emacs." tar]) (j-mode . [(20171224 1056) nil "Major mode for editing J programs" tar]) (iy-go-to-char . [(20141029 846) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single]) (ix . [(20131027 929) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single]) (ivy-youtube . [(20171112 732) ((request (0 2 0)) (ivy (0 8 0)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single]) (ivy-yasnippet . [(20180620 2336) ((emacs (24)) (ivy (0 10 0)) (yasnippet (0 12 2)) (dash (2 14 1))) "Preview yasnippets with ivy" single]) (ivy-xref . [(20180701 2117) ((emacs (25 1)) (ivy (0 10 0))) "Ivy interface for xref results" single]) (ivy-xcdoc . [(20160917 355) ((ivy (0 8 0)) (emacs (24 4))) "Search Xcode documents with ivy interface." single]) (ivy-todo . [(20171208 809) ((ivy (0 8 0)) (emacs (24 3))) "Manage org-mode TODOs with ivy" single]) (ivy-rtags . [(20170522 2154) ((ivy (0 7 0)) (rtags (2 10))) "RTags completion back-end for ivy" single]) (ivy-rich . [(20180704 1845) ((emacs (24 4)) (ivy (0 8 0))) "More friendly display transformer for ivy." single]) (ivy-purpose . [(20160724 303) ((emacs (24)) (ivy (0 8)) (window-purpose (1 5))) "Ivy Interface for Purpose" single]) (ivy-prescient . [(20180716 907) ((emacs (25 1)) (prescient (2 0)) (ivy (0 10 0))) "prescient.el + Ivy" single]) (ivy-posframe . [(20180707 2016) ((emacs (26 0)) (posframe (0 1 0)) (ivy (0 10 0))) "Using posframe to show Ivy" single]) (ivy-phpunit . [(20180219 115) ((ivy (0 10 0)) (phpunit (0 7 0)) (emacs (25))) "Ivy integration for phpunit.el" single]) (ivy-pass . [(20170812 1255) ((emacs (24)) (ivy (0 8 0)) (password-store (1 6 5))) "ivy interface for pass" single]) (ivy-pages . [(20160728 1220) ((emacs (24 1)) (ivy (0 8 0))) "Complete current buffer's pages with Ivy" single]) (ivy-mpdel . [(20180502 1148) ((emacs (25 1)) (ivy (0 10 0)) (libmpdel (0 5 0)) (mpdel (0 4 0))) "Ivy interface to navigate MPD" single]) (ivy-lobsters . [(20171202 1241) ((ivy (0 8 0)) (cl-lib (0 5))) "Browse lobste.rs stories with ivy." single]) (ivy-hydra . [(20180614 1500) ((emacs (24 1)) (ivy (0 9 0)) (hydra (0 13 4))) "Additional key bindings for Ivy" single]) (ivy-historian . [(20170715 2120) ((emacs (24 4)) (historian (20170111)) (ivy (0 8 0)) (flx (0 6 1))) "Persistently store selected minibuffer candidates" single]) (ivy-gitlab . [(20180312 947) ((s (1 9 0)) (dash (2 9 0)) (ivy (0 8 0)) (gitlab (0 8))) "Ivy interface to Gitlab" single]) (ivy-feedwrangler . [(20180618 822) nil "No description available." single]) (ivy-erlang-complete . [(20180715 2144) ((async (1 9)) (counsel (0 8 0)) (ivy (0 8 0)) (erlang (19 2)) (emacs (24 4))) "Erlang context sensitive completion at point using ivy. It also support xref and eldoc." tar]) (ivy-dired-history . [(20170625 2256) ((ivy (0 9 0)) (counsel (0 9 0)) (cl-lib (0 5))) "use ivy to open recent directories" single]) (ivy-bibtex . [(20180612 619) ((swiper (0 7 0)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A bibliography manager based on Ivy" tar]) (ivy . [(20180724 803) ((emacs (24 1))) "Incremental Vertical completYon" tar]) (ivs-edit . [(20170818 741) ((emacs (24 3)) (dash (2 6 0)) (cl-lib (1 0))) "IVS (Ideographic Variation Sequence) editing tool" tar]) (ivariants . [(20170822 1924) ((emacs (24 3)) (ivs-edit (1 0))) "Ideographic variants editor and browser" tar]) (iterator . [(20170207 38) ((emacs (24)) (cl-lib (0 5))) "A library to create and use elisp iterators objects." single]) (iter2 . [(20180510 633) ((emacs (25 1))) "Reimplementation of Elisp generators" single]) (itasca . [(20170601 922) ((emacs (24 3))) "Major modes for Itasca software data files." tar]) (itail . [(20171112 4) nil "An interactive tail mode" single]) (iss-mode . [(20141001 1213) nil "Mode for InnoSetup install scripts" single]) (isortify . [(20180612 622) ((emacs (25)) (pythonic (0 1 0))) "(automatically) format python buffers using isort." single]) (isgd . [(20150414 236) nil "Shorten URLs using the isgd.com shortener service" single]) (isend-mode . [(20171118 745) nil "Interactively send parts of an Emacs buffer to an interpreter" single]) (isearch-symbol-at-point . [(20130728 1521) nil "Use isearch to search for the symbol at point" single]) (isearch-dabbrev . [(20141223 2222) ((cl-lib (0 5))) "Use dabbrev in isearch" single]) (irony-eldoc . [(20170502 1208) ((emacs (24)) (cl-lib (0 5)) (irony (0 1))) "irony-mode support for eldoc-mode" single]) (irony . [(20180703 1040) ((cl-lib (0 5)) (json (1 2))) "C/C++ minor mode powered by libclang" tar]) (iregister . [(20150515 1407) nil "Interactive register commands for Emacs." tar]) (ir-black-theme . [(20130302 2355) nil "Port of ir-black theme" single]) (iqa . [(20170722 834) ((emacs (24 3))) "Init file(and directory) Quick Access." single]) (ipython-shell-send . [(20171212 318) ((emacs (24))) "Send code (including magics) to ipython shell" single]) (ipretty . [(20180605 2222) nil "Interactive Emacs Lisp pretty-printing" single]) (iplayer . [(20161120 1320) nil "Browse and download BBC TV/radio shows" single]) (ipcalc . [(20170926 105) ((cl-lib (0 5))) "IP subnet calculator" single]) (iodine-theme . [(20151031 939) ((emacs (24))) "A light emacs color theme" single]) (ioccur . [(20130821 2248) nil "Incremental occur" single]) (io-mode-inf . [(20140128 1134) nil "Interaction with an Io interpreter." single]) (io-mode . [(20161004 56) nil "Major mode to edit Io language files in Emacs" single]) (inverse-acme-theme . [(20170822 1954) ((autothemer (0 2)) (cl-lib (0 5))) "A theme that looks like an inverse of Acme's color scheme." single]) (interval-tree . [(20130325 707) ((dash (1 1 0))) "Interval tree data structure for 1D range queries" single]) (interval-list . [(20150327 1018) ((dash (2 4 0)) (cl-lib (0 5)) (emacs (24 4))) "Interval list data structure for 1D selections" single]) (intero . [(20180703 18) ((flycheck (0 25)) (company (0 8)) (emacs (24 4)) (haskell-mode (13 0))) "Complete development mode for Haskell" single]) (interleave . [(20171003 2324) nil "Interleaving text books since 2015" single]) (interaction-log . [(20160305 501) ((cl-lib (0))) "exhaustive log of interactions with Emacs" single]) (intellij-theme . [(20171017 715) nil "Inspired by IntelliJ's default theme" single]) (intel-hex-mode . [(20180422 1731) nil "Mode for Intel Hex files." single]) (instapaper . [(20130104 621) nil "add URLs to instapaper from emacs" single]) (insfactor . [(20141116 1602) nil "Client for a Clojure project with insfactor in it" single]) (insert-shebang . [(20180403 514) nil "Insert shebang line automatically." single]) (inlineR . [(20120520 732) nil "insert Tag for inline image of R graphics" single]) (inline-docs . [(20170522 2150) ((emacs (24 3))) "Show inline contextual docs." single]) (inline-crypt . [(20170824 200) nil "Simple inline encryption via openssl" tar]) (inkpot-theme . [(20171217 144) nil "port of vim's inkpot theme" single]) (ink-mode . [(20160814 416) ((emacs (24 3))) "Major mode for writing interactive fiction in Ink" single]) (initsplit . [(20160919 1118) nil "code to split customizations into different files" single]) (init-open-recentf . [(20161206 645) ((emacs (24 4))) "Open recentf immediately after Emacs is started" single]) (init-loader . [(20160528 615) nil "Loader for configuration files" single]) (ini-mode . [(20170424 209) nil "Major mode for Windows-style ini files." single]) (inherit-local . [(20170409 949) ((emacs (24 3))) "Inherited buffer-local variables" single]) (info-colors . [(20180205 350) ((emacs (24)) (cl-lib (0 5))) "Extra colors for Info-mode" single]) (info-buffer . [(20170112 622) nil "Display info topics in separate buffers" single]) (info-beamer . [(20180604 1422) ((emacs (24 4))) "Utilities for working with info-beamer" single]) (inflections . [(20170913 216) ((cl-lib (0 5)) (emacs (24))) "convert english words between singular and plural" single]) (inferior-spim . [(20160826 646) nil "inferior mode for spim." single]) (inf-ruby . [(20180521 648) nil "Run a Ruby process in a buffer" single]) (inf-mongo . [(20180408 638) nil "Run a MongoDB shell process in a buffer" single]) (inf-crystal . [(20180118 1811) ((emacs (24 3)) (crystal-mode (0 1 0))) "Run a Inferior-Crystal process in a buffer" single]) (inf-clojure . [(20180402 1403) ((emacs (24 4)) (clojure-mode (5 6))) "Run an external Clojure process in an Emacs buffer" single]) (indy . [(20150610 1006) nil "A minor mode and EDSL to manage your mode's indentation rules." single]) (indium . [(20180521 1355) ((emacs (25)) (seq (2 16)) (js2-mode (20140114)) (company (0 9 0)) (websocket (1 6))) "JavaScript Awesome Development Environment" tar]) (indicators . [(20161211 326) ((dash (2 13 0)) (cl-lib (0 5 0))) "Display the buffer relative location of line in the fringe." single]) (indent-tools . [(20180124 408) ((s (0)) (hydra (0)) (yafolding (0))) "Indent, navigate (and more) by blocks of indentation: yaml, python etc." tar]) (indent-info . [(20180423 1212) nil "show indentation information in status bar" single]) (indent-guide . [(20170221 327) nil "show vertical lines to guide indentation" single]) (importmagic . [(20180519 2003) ((f (0 11 0)) (epc (0 1 0)) (emacs (24 3))) "Fix Python imports using importmagic." tar ((:commit . "e32ee9f6a5eef937b76eba82fdae8bae85d18088") (:keywords "languages" "convenience") (:url . "https://github.com/anachronic/importmagic.el"))]) (import-popwin . [(20170218 607) ((emacs (24 3)) (popwin (0 6))) "popwin buffer near by import statements with popwin" single ((:commit . "bb05a9e226f8c63fe7b18a3e92010357049ab5ba") (:url . "https://github.com/syohex/emacs-import-popwin"))]) (import-js . [(20180709 1133) ((grizzl (0 1 0)) (emacs (24))) "Import Javascript dependencies" single ((:commit . "fb1f167e33c388b09a2afd32fbda90a67bfb2e40") (:keywords "javascript") (:url . "http://github.com/Galooshi/emacs-import-js/"))]) (impatient-mode . [(20180528 916) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar ((:commit . "96c068d5add95595dc5be42115d100cf99f908ba") (:url . "https://github.com/netguy204/imp.el"))]) (immutant-server . [(20140311 1508) nil "Run your Immutant server in Emacs" single ((:commit . "2a21e65588acb6a976f2998e30b21fdabdba4dbb") (:url . "http://www.github.com/leathekd/immutant-server.el"))]) (immortal-scratch . [(20160517 1418) nil "respawn the scratch buffer when it's killed" single nil]) (imgbb . [(20180609 949) ((emacs (24)) (request (0 3 0))) "Simple image upload client for imgbb.com" single ((:commit . "a524a46263835aa474f908827ebab4e8fa586001") (:keywords "extensions") (:url . "https://github.com/ecraven/imgbb.el"))]) (imenus . [(20180505 1017) ((cl-lib (0 5))) "Imenu for multiple buffers and without subgroups" single ((:commit . "149cfa579ee231014d3341a0e05add69759757a5") (:keywords "tools" "convenience") (:url . "https://github.com/alezost/imenus.el"))]) (imenu-list . [(20180601 702) ((cl-lib (0 5))) "Show imenu entries in a separate buffer" single ((:commit . "04f0632f7b8c81be8747617768c57b66e5d60994") (:url . "https://github.com/bmag/imenu-list"))]) (imenu-anywhere . [(20170805 1155) ((cl-lib (0 5))) "ido/ivy/helm imenu across same mode/project/etc buffers" single ((:commit . "fc7f0fd2f19e5ebee70156a99bf87393123893e3") (:keywords "ido" "imenu" "tags") (:url . "https://github.com/vitoshka/imenu-anywhere"))]) (imapfilter . [(20180318 1327) nil "run the imapfilter executable" single ((:commit . "79bbbe918319bc1e8f42a0bef53dc7c77fe868ea") (:keywords "mail") (:url . "https://github.com/tarsius/imapfilter"))]) (imake . [(20180318 1559) ((emacs (24 3))) "Simple, opinionated make target runner" single ((:commit . "7df5fb9684a0288313ef5f64594078d477105959") (:url . "https://github.com/tarsius/imake"))]) (imakado . [(20141024 223) nil "imakado's usefull macros and functions" single ((:commit . "00a1e7eea2cb9e9066343a23927d6c747707902f") (:keywords "convenience") (:url . "https://github.com/imakado/emacs-imakado"))]) (image-dired+ . [(20150429 2244) ((cl-lib (0 3))) "Image-dired extensions" single ((:commit . "b68094625d963056ad64e0e44af0e2266b2eadc7") (:keywords "extensions" "multimedia") (:url . "https://github.com/mhayashi1120/Emacs-image-diredx"))]) (image-archive . [(20150620 1832) ((emacs (24)) (cl-lib (0 5))) "Image thumbnails in archive file with non-blocking" single ((:commit . "8d29535bd832329ffeeac780aae7aa8919af1175") (:keywords "multimedia") (:url . "https://github.com/mhayashi1120/Emacs-image-archive"))]) (image+ . [(20150707 916) ((cl-lib (0 3))) "Image manipulate extensions for Emacs" single ((:commit . "6834d0c09bb4df9ecc0d7a559bd7827fed48fffc") (:keywords "multimedia" "extensions") (:url . "https://github.com/mhayashi1120/Emacs-imagex"))]) (igv . [(20141210 427) nil "Control Integrative Genomic Viewer within Emacs" single ((:commit . "47ac6ceede252f451348a2c696398c0cb5279555"))]) (ignoramus . [(20160414 709) nil "Ignore backups, build files, et al." single ((:commit . "b37dc7c07edd9d152436f9019c14df158b599be3") (:keywords "convenience" "tools") (:url . "http://github.com/rolandwalker/ignoramus"))]) (iflipb . [(20171113 1244) nil "interactively flip between recently visited buffers" single ((:commit . "a5ad1fbd1173cff5228dab265515c92c0778f86a") (:url . "https://github.com/jrosdahl/iflipb"))]) (ietf-docs . [(20150928 257) nil "Fetch, Cache and Load IETF documents" single ((:commit . "ede30d6d26044069e1731fd20c0ab2324552c0b4") (:keywords "ietf" "rfc") (:url . "https://github.com/choppsv1/ietf-docs"))]) (iedit . [(20180207 219) nil "Edit multiple regions in the same way simultaneously." tar ((:commit . "412490db4387ad9d040bfb5854f25de4c40c2146") (:keywords "occurrence" "region" "simultaneous" "refactoring") (:url . "http://www.emacswiki.org/emacs/Iedit"))]) (ids-edit . [(20170818 802) ((emacs (24 3))) "IDS (Ideographic Description Sequence) editing tool" tar ((:commit . "8562a6cbfb3f2d44bc6f62ab15081a80f8fee502") (:keywords "i18n" "wp") (:url . "http://github.com/kawabata/ids-edit"))]) (idris-mode . [(20180416 2245) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) "Major mode for editing Idris code" tar ((:commit . "2cd2ace9327248e141c35127b8ef9114a1301a1d") (:keywords "languages") (:url . "https://github.com/idris-hackers/idris-mode"))]) (idomenu . [(20141123 1320) nil "imenu tag selection a la ido" single ((:commit . "4b0152d606360c70204fb4c27f68de79ca885386"))]) (ido-yes-or-no . [(20161108 1551) ((ido-completing-read+ (0))) "Use Ido to answer yes-or-no questions" single ((:commit . "c55383b1fce5879e87e7ca6809fc60534508e182") (:keywords "convenience" "completion" "ido") (:url . "https://github.com/DarwinAwardWinner/ido-yes-or-no"))]) (ido-vertical-mode . [(20180618 1401) nil "Makes ido-mode display vertically." single ((:commit . "16c4c1a112796ee0bcf401ea39d3e2643a89feaf") (:keywords "convenience") (:url . "https://github.com/creichert/ido-vertical-mode.el"))]) (ido-springboard . [(20170105 2355) nil "Temporarily change default-directory for one command" single ((:commit . "263a8cd4582c81bfc29d7db37d5267e2488b148c") (:keywords "ido") (:url . "https://github.com/jwiegley/springboard"))]) (ido-sort-mtime . [(20171121 59) nil "Sort Ido's file list by modification time" single ((:commit . "f638ff0c922af862f5211779f2311a27fde428eb") (:keywords "convenience" "files"))]) (ido-skk . [(20151111 150) ((emacs (24 4)) (ddskk (20150912 1820))) "ido interface for skk henkan" single ((:commit . "89a2e62799bff2841ff634517c86084c4ce69246") (:keywords "languages") (:url . "https://github.com/tsukimizake/ido-skk"))]) (ido-select-window . [(20131220 1247) ((emacs (24 1))) "Select a window using ido and buffer names" single ((:commit . "a64707d8d154664d50d12e26417d586e4c3dd78b") (:url . "https://github.com/pjones/ido-select-window"))]) (ido-occur . [(20160820 740) ((dash (2 13 0))) "Yet another `occur' with `ido'." single ((:commit . "522af5d55b3d4cd6885f3b4100913566c202cec4") (:keywords "inner" "buffer" "search") (:url . "https://github.com/danil/ido-occur"))]) (ido-occasional . [(20150214 448) ((emacs (24 1))) "Use ido where you choose." single ((:commit . "d405f1795e1e0c63be411ee2825184738d29c33a") (:keywords "completion") (:url . "https://github.com/abo-abo/ido-occasional"))]) (ido-migemo . [(20150921 1544) ((migemo (1 9 1))) "Migemo plug-in for Ido" single ((:commit . "e71114a92dd69cb46abf3fb71a09ce27506fcf77") (:keywords "files") (:url . "https://github.com/myuhe/ido-migemo.el"))]) (ido-load-library . [(20140611 900) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single ((:commit . "e03b55957c93aa1a7dd190e173e16ec59dbb2ba7") (:keywords "maint" "completion") (:url . "http://github.com/rolandwalker/ido-load-library"))]) (ido-hacks . [(20150331 1209) nil "Put more IDO in your IDO" single ((:commit . "b7e7514a0e011e4d767d1f5755c5eae9d85f83dc") (:keywords "convenience"))]) (ido-grid-mode . [(20160122 339) ((emacs (24 4))) "Display ido-prospects in the minibuffer in a grid." single ((:commit . "7cfca3988a6dc3ad18e28abe114218095ff2366f") (:keywords "convenience") (:url . "https://github.com/larkery/ido-grid-mode.el"))]) (ido-gnus . [(20140216 846) ((gnus (5 13))) "Access gnus groups or servers using ido" single ((:commit . "f5fe3f6aa8086f675ba216abace9e3d5f2e3a089") (:keywords "comm") (:url . "https://github.com/vapniks/ido-gnus"))]) (ido-flex-with-migemo . [(20180323 456) ((flx-ido (0 6 1)) (migemo (1 9 1)) (emacs (24 4))) "use ido with flex and migemo" single ((:commit . "9684ffc47d838e82d611d0955b390d8387cf5741") (:keywords "matching") (:url . "https://github.com/ROCKTAKEY/ido-flex-with-migemo"))]) (ido-exit-target . [(20170717 1151) ((emacs (24 4))) "Commands and keys for selecting other window and frame targets within ido" single ((:commit . "e56fc6928649c87ccf39d56d84ab53ebaced1f73") (:keywords "convenience" "tools" "extensions") (:url . "https://github.com/waymondo/ido-exit-target"))]) (ido-describe-bindings . [(20161023 402) ((dash (2 13 0))) "Yet another `describe-bindings' with `ido'." single ((:commit . "a142ff1c33df23ed9665497d0dcae2943b3c706a") (:keywords "help") (:url . "https://github.com/danil/ido-describe-bindings"))]) (ido-completing-read+ . [(20180627 1944) ((emacs (24 4)) (cl-lib (0 5)) (s (0 1)) (memoize (1 1))) "A completing-read-function using ido" single ((:commit . "03bdf989a9af88d4eeed4003ae74c98baf58ff72") (:keywords "ido" "completion" "convenience") (:url . "https://github.com/DarwinAwardWinner/ido-completing-read-plus"))]) (ido-complete-space-or-hyphen . [(20130228 208) nil "Complete SPACE or HYPHEN when type SPACE in ido" single ((:commit . "3fe1fe1e1a743f8deb8f4025977647afecd58f14") (:keywords "ido" "completion") (:url . "https://github.com/doitian/ido-complete-space-or-hyphen"))]) (ido-clever-match . [(20151011 1026) ((emacs (24 4)) (cl-lib (0 5))) "Alternative matcher for ido." single ((:commit . "f173473e99c8b0756f12e4cc8f67e68fa59eadd3") (:keywords "ido" "flex") (:url . "https://github.com/Bogdanp/ido-clever-match"))]) (ido-at-point . [(20151021 57) ((emacs (24))) "ido-style completion-at-point" single ((:commit . "e5907bbe8a3d148d07698b76bd994dc3076e16ee") (:keywords "convenience" "abbrev") (:url . "https://github.com/katspaugh/ido-at-point"))]) (idle-require . [(20090715 1503) nil "load elisp libraries while Emacs is idle" single ((:commit . "33592bb098223b4432d7a35a1d65ab83f47c1ec1") (:keywords "internal") (:url . "http://nschum.de/src/emacs/idle-require/"))]) (idle-highlight-mode . [(20120920 948) nil "highlight the word the point is on" single ((:commit . "c466f2a9e291f9da1167dc879577b2e1a7880482") (:keywords "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight"))]) (identica-mode . [(20130204 1453) nil "Major mode API client for status.net open microblogging" tar ((:commit . "cf9183ee11ac922e85c7c908f04e2d00b03111b3") (:keywords "identica" "web") (:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/"))]) (idea-darkula-theme . [(20160416 1603) ((emacs (24 1))) "Color theme based on IntelliJ IDEA Darkula color theme" single ((:commit . "52602d9b91883e1f297d000951aeed48bf60176e") (:keywords "themes") (:url . "http://github.com/fourier/idea-darkula-theme"))]) (id-manager . [(20170320 546) nil "id-password management" single ((:commit . "14ebc35db298aac4dedc8aa188bc46bacab81f3b") (:keywords "password" "convenience"))]) (ibuffer-vc . [(20171106 2341) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single ((:commit . "83d60aefd21e2aa20c7217d224f38a40bb75e63b") (:keywords "themes") (:url . "http://github.com/purcell/ibuffer-vc"))]) (ibuffer-tramp . [(20151118 939) nil "Group ibuffer's list by TRAMP connection" single ((:commit . "bcad0bda3a67f55d1be936bf8fa9ef735fe1e3f3") (:keywords "convenience") (:url . "http://github.com/svend/ibuffer-tramp"))]) (ibuffer-sidebar . [(20180218 1731) ((emacs (25 1))) "Sidebar for `ibuffer'" single ((:commit . "7ddf1b5a158b33e9a7d3fe5dad7ea626a464d2bc") (:keywords "ibuffer" "files" "tools") (:url . "https://github.com/jojojames/ibuffer-sidebar"))]) (ibuffer-rcirc . [(20150215 1318) ((cl-lib (0 2))) "Ibuffer integration for rcirc" single ((:commit . "8a4409b1c679d65c819dee4085faf929840e79f8") (:keywords "buffer" "convenience" "comm") (:url . "https://github.com/fgallina/ibuffer-rcirc"))]) (ibuffer-projectile . [(20180324 2025) ((projectile (0 11 0))) "Group ibuffer's list by projectile root" single ((:commit . "1e89bfa7cae0629d29f24af3d81774b88b3cede0") (:keywords "themes") (:url . "http://github.com/purcell/ibuffer-projectile"))]) (ibuffer-git . [(20110508 31) nil "show git status in ibuffer column" single ((:commit . "d326319c05ddb8280885b31f9094040c1b365876") (:keywords "convenience"))]) (iasm-mode . [(20171023 722) nil "interactive assembly major mode." single ((:commit . "abbec7f308f9ce97beeb57e459fff35f559b4c18") (:keywords ":" "tools") (:url . "https://github.com/RAttab/iasm-mode"))]) (ialign . [(20180705 453) ((emacs (24 4))) "visual align-regexp" single ((:commit . "e92664e673647826161a19e9cfc327fa8c69ba6e") (:keywords "tools" "editing" "align" "interactive") (:url . "https://github.com/mkcms/interactive-align"))]) (i3wm . [(20170822 738) nil "i3wm integration library" single ((:commit . "71391dc61063fee77ad174f3b2ca25c60b41009e") (:keywords "convenience" "extensions") (:url . "https://git.flintfam.org/swf-projects/emacs-i3"))]) (i2b2-mode . [(20140709 1804) nil "Highlights corresponding PHI data in the text portion of an i2b2 XML Document." single ((:commit . "db10efcfc8bed369a516bbf7526ede41f98cb95a") (:keywords "xml" "phi" "i2b2" "deidi2b2"))]) (hydra . [(20180703 802) ((cl-lib (0 5))) "Make bindings that stick around." tar ((:commit . "87cc74b2644daa2e9e660bc8a447c84a0ddeeab6") (:keywords "bindings") (:url . "https://github.com/abo-abo/hydra"))]) (hyde . [(20160507 2008) nil "Major mode to help create and manage Jekyll blogs" tar ((:commit . "a8cd6ed00ecd8d7de0ded2f4867015b412b15b76"))]) (hydandata-light-theme . [(20160815 2118) nil "A light color theme that is easy on your eyes" single ((:commit . "0fbc91678ef65e1f65d7ec6792ff0b2f104d16a9") (:keywords "color-theme" "theme"))]) (hyai . [(20170301 647) ((cl-lib (0 5)) (emacs (24))) "Haskell Yet Another Indentation" single ((:commit . "e1cd115c19225bbe0e1183d9a8c289eadaeb37b6") (:url . "https://github.com/iquiw/hyai"))]) (hy-mode . [(20180702 1240) ((dash (2 13 0)) (dash-functional (1 2 0)) (s (1 11 0)) (emacs (24))) "Major mode for Hylang" single ((:commit . "71a12a9208c4b87859bcbb6978e7915dd518e8dd") (:keywords "languages" "lisp" "python") (:url . "http://github.com/hylang/hy-mode"))]) (hungry-delete . [(20170411 1802) nil "hungry delete minor mode" single ((:commit . "0434458d3f6b2b585f332271feaa054bf4ec96d7") (:url . "http://github.com/nflath/hungry-delete"))]) (hungarian-holidays . [(20161020 438) nil "Adds a list of Hungarian public holidays to Emacs calendar" single ((:commit . "653108769279499d84a79267c90e640d98823872") (:keywords "calendar"))]) (hugsql-ghosts . [(20180425 429) ((s (1 9 0)) (dash (2 10 0)) (cider (0 14 0))) "Display hugsql defqueries in clojure code as an overlay." single ((:commit . "f3ebc60c66204ad39058cb84eb4bd5facce091df") (:url . "https://github.com/rkaercher/hugsql-ghosts"))]) (httprepl . [(20141101 1034) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single ((:commit . "cfa3693267a8ed1c96a86a126823f37dbfe077d8") (:keywords "http" "repl") (:url . "https://github.com/gregsexton/httprepl.el"))]) (httpcode . [(20121001 2045) nil "explains the meaning of an HTTP status code" single ((:commit . "a45e735082b09477cd704a99294d336cdbeb12ba") (:url . "http://github.com/rspivak/httpcode.el"))]) (http-twiddle . [(20160801 1211) nil "send & twiddle & resend HTTP requests" single ((:commit . "4d0c73b7dcbde8b483d4f3a75c49c74d2fe3ca45") (:keywords "http" "rest" "soap") (:url . "https://github.com/hassy/http-twiddle/blob/master/http-twiddle.el"))]) (http-post-simple . [(20170715 240) nil "HTTP POST requests using the url library" single ((:commit . "f53697fca278c741051aeb668b00466b5e0fd3fe") (:keywords "comm" "data" "processes" "hypermedia"))]) (http . [(20170906 1111) ((emacs (24 4)) (request (0 2 0)) (edit-indirect (0 1 4))) "Yet another HTTP client" single ((:commit . "193a7bf843dd6b6805c7b18dab31f50c8325d710") (:keywords "convenience") (:url . "https://github.com/emacs-pe/http.el"))]) (htmlize . [(20180412 1244) nil "Convert buffer text and decorations to HTML." single ((:commit . "315a8f23cfd3e87642ff9e30ae3300c7a84244d5") (:keywords "hypermedia" "extensions"))]) (html2org . [(20170417 2201) ((emacs (24 4))) "Convert html to org format text" single ((:commit . "6904aed40259ad8afccff079ebd8a07bff319ebc") (:keywords "convenience" "html" "org") (:url . "http://github.com/lujun9972/html2org.el"))]) (html-to-markdown . [(20151105 40) ((cl-lib (0 5))) "HTML to Markdown converter written in Emacs-lisp." single ((:commit . "60c5498c801be186478cf7c05be05b4430c4a144") (:keywords "tools" "wp" "languages") (:url . "http://github.com/Bruce-Connor/html-to-markdown"))]) (html-to-hiccup . [(20161028 701) ((emacs (25 1)) (dash (2 13 0)) (s (1 10 0))) "Convert HTML to Hiccup syntax" single ((:commit . "99217a5058626d253ed8ada51a7642071fe54ba5") (:keywords "html" "hiccup" "clojure") (:url . "https://github.com/plexus/html-to-hiccup"))]) (html-script-src . [(20120403 1115) nil "Insert <script src=\"..\"> for popular JavaScript libraries" single ((:commit . "66460f8ab1b24656e6f3ce5bd50cff6a81be8422") (:keywords "tools" "convenience") (:url . "http://github.com/rejeep/html-script-src"))]) (html-check-frag . [(20160130 2135) ((emacs (24 3))) "Check html-fragments" single ((:commit . "feb89765eafd69dfcf07afeebded8985dc456e7c") (:keywords "html"))]) (ht . [(20180129 1434) ((dash (2 12 0))) "The missing hash table library for Emacs" single ((:commit . "5a665d00dc8fda77bad2a43277d8809c23e46ab8") (:keywords "hash table" "hash map" "hash"))]) (howm . [(20180225 205) ((cl-lib (0 5))) "Wiki-like note-taking tool" tar ((:commit . "b932fa603f074049637907d35594f73c3fba45d0") (:url . "https://howm.osdn.jp"))]) (howdoi . [(20150203 1643) nil "Instant coding answers via Emacs." tar ((:commit . "5fbf7069ee160c597a328e5ce5fb32920e1ca88f"))]) (how-many-lines-in-project . [(20140806 2142) nil "Calculate how many lines are there in your project." single ((:commit . "8a37ef885d004fe2ce231bfe05ed4867c6192d9b") (:keywords "project" "convenience"))]) (hound . [(20170627 1259) ((request (0 2 0)) (cl-lib (0 5))) "Display hound search results in a compilation window" single ((:commit . "0c5a250ef82870dca737a429b6e9b9db93874ed3"))]) (horoscope . [(20180408 2341) ((emacs (24))) "generate horoscopes." single ((:commit . "f4c683e991adce0a8f9023f15050f306f9b9a9ed") (:keywords "extensions" "games") (:url . "https://github.com/mschuldt/horoscope.el"))]) (hookify . [(20141216 1409) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single ((:commit . "21baae7393b07257de5796402fde0ca72fb00d77") (:keywords "hook" "convenience") (:url . "https://github.com/Silex/hookify"))]) (honcho . [(20180706 1724) ((emacs (25 1)) (sudo-edit (0 1))) "Run and manage long-running services" single ((:commit . "f6a89a27e255b3ecb1f0b13058933558b1f0c6fb") (:keywords "convenience") (:url . "https://github.com/emacs-pe/honcho.el"))]) (homebrew-mode . [(20160615 620) ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) "minor mode for editing Homebrew formulae" single ((:commit . "d422307aee2f897d1a92e3b959c3214bc54cbe38") (:keywords "homebrew" "brew" "ruby") (:url . "https://github.com/dunn/homebrew-mode"))]) (holiday-pascha-etc . [(20160821 1758) nil "Eastern Christian analog to holiday-easter-etc" single ((:commit . "eb198656f63cb8679fb0e3a8248782df071a0f3c") (:url . "http://github.com/hexmode/holiday-pascha-etc"))]) (hoa-pp-mode . [(20151027 36) ((emacs (24 1)) (names (20150723 0))) "Major mode for Hoa PP grammars" single ((:commit . "925b79930a3f4377b0fb2a36b3c6d5566d4b9a8e") (:keywords "php" "hoa") (:url . "https://github.com/hoaproject/Contributions-Emacs-Pp"))]) (hoa-mode . [(20151203 850) nil "Major mode for the Hanoi Omega Automata format" single ((:commit . "3c608e15b655d2375c5f81323ac561c7848dc029") (:keywords "major-mode" "automata" "convenience") (:url . "https://gitlab.lrde.epita.fr/spot/emacs-modes"))]) (hmac . [(20180429 1310) ((cl-lib (0 5)) (emacs (25))) "hash-based message authentication code" single ((:commit . "30132cd3fee7d3d91a9f04709d49ca0dcb96d565") (:url . "https://github.com/grimnebulin/emacs-hmac"))]) (hlinum . [(20180421 2112) ((cl-lib (0 2))) "Extension for linum.el to highlight current line number" single ((:commit . "f17360fe93de6df99a05b4b64b0a1ca4ee45abb6") (:keywords "convenience" "extensions") (:url . "https://github.com/tom-tan/hlinum-mode/"))]) (hlint-refactor . [(20170817 2148) nil "Apply HLint suggestions" single ((:commit . "92c69aa01c65968e86c15db087bb1ea785e4736c") (:keywords "haskell" "refactor") (:url . "https://github.com/mpickering/hlint-refactor-mode"))]) (hledger-mode . [(20171201 1156) ((emacs (24 4)) (popup (0 5 3)) (async (1 9)) (htmlize (1 47))) "A mode for writing journal entries for hledger." tar ((:commit . "594ce27f898ba027cb7f326179ff7875072b03e0") (:keywords "data") (:url . "https://github.com/narendraj9/hledger-mode.git"))]) (hl-todo . [(20180709 2155) nil "highlight TODO and similar keywords" single ((:commit . "3401f322d954e635372995bf5cc77dae171a78ba") (:keywords "convenience") (:url . "https://github.com/tarsius/hl-todo"))]) (hl-sentence . [(20171018 819) nil "highlight a sentence based on customizable face" single ((:commit . "86ae38d3103bd20da5485cbdd59dfbd396c45ee4") (:keywords "highlighting") (:url . "http://github.com/milkypostman/hl-sentence"))]) (hl-indent . [(20170429 1404) ((emacs (24)) (cl-lib (0 5))) "Highlight irregular indentation." single ((:commit . "bdb2e0177a7c8b29af26998e688b856adc6ded93") (:keywords "convenience" "faces") (:url . "https://github.com/ikirill/hl-indent"))]) (hl-anything . [(20160422 1008) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." tar ((:commit . "8696bc55a8cba408f0fc83a907a9ec529d79e558"))]) (hiwin . [(20150825 127) nil "Visible active window mode." single ((:commit . "6ee8ed051405653bd9b7332d7e9fbb591d954051") (:keywords "faces" "editing" "emulating"))]) (hive . [(20131217 712) ((sql (3 0))) "Hive SQL mode extension" single ((:commit . "11b5172e081ad8079fc78758bef6f306f82ae32b") (:keywords "sql" "hive"))]) (historyf . [(20151123 1759) nil "file history library like browser" single ((:commit . "196c058ceb092fdd56b0e4ce85b7e714d6f72224") (:url . "https://github.com/k1LoW/emacs-historyf"))]) (history . [(20160821 902) ((emacs (24 3))) "History utility for source code navigation" tar ((:commit . "5317663fb45bbd5e96d258cb0807dcc266ce67ff") (:url . "https://github.com/boyw165/history"))]) (historian . [(20180619 1223) ((emacs (24 4))) "Persistently store selected minibuffer candidates" single ((:commit . "6be869f585b854eb849303c452ab4f91dab04fa9") (:keywords "convenience") (:url . "https://github.com/PythonNut/historian.el"))]) (hippie-namespace . [(20140508 1341) nil "Special treatment for namespace prefixes in hippie-expand" single ((:commit . "d0d0f15c67ab8bef5e9d1e29a89ecd3613a60b49") (:keywords "convenience" "lisp" "tools" "completion") (:url . "http://github.com/rolandwalker/hippie-namespace"))]) (hippie-expand-slime . [(20170722 1846) nil "Hook slime's completion into hippie-expand" single ((:commit . "39bbae94896a62854d31754debdfae71d35fec62") (:url . "https://github.com/purcell/hippie-expand-slime"))]) (hippie-exp-ext . [(20160502 1626) nil "Extension of hippie-expand" single ((:commit . "4eda13f90da51ab217d024701f4c30f91ffcb90e") (:keywords "abbrev" "convenience" "completions" "hippie-expand") (:url . "http://www.emacswiki.org/emacs/download/hippie-exp-ext.el"))]) (hindent . [(20180518 202) ((cl-lib (0 5))) "Indent haskell code using the \"hindent\" program" single ((:commit . "5c4984c49cb9a610bcf74c391bafdcd9e8354029") (:url . "https://github.com/chrisdone/hindent"))]) (himp . [(20170814 1215) ((emacs (24 3)) (vimish-fold (0 1 0))) "Automatically hide imports/documentation" single ((:commit . "140234b7f7cde03cf858c5011a2ab63e3bc802ec") (:keywords "convenience" "tools") (:url . "http://github.com/mkcms/himp/"))]) (highlight2clipboard . [(20151020 1140) ((htmlize (1 47))) "Copy text to clipboard with highlighting." tar ((:commit . "6ce58a060d9c5843ccb8c79ec2bba7858c68ac15") (:keywords "tools"))]) (highlight-unique-symbol . [(20130611 2242) ((deferred (0 3 2))) "highlight symbols which not appear in the repository" single ((:commit . "4141bf86a94e30d94d9af9c29d40b16886226e1c") (:url . "https://github.com/hitode909/emacs-highlight-unique-symbol"))]) (highlight-thing . [(20170919 704) nil "Minimalistic minor mode to highlight current thing under point." single ((:commit . "4eadd178175772fb04ae50e1199d797a6375ad4d") (:keywords "highlight" "thing" "symbol") (:url . "https://github.com/fgeller/highlight-thing.el"))]) (highlight-symbol . [(20160102 1209) nil "automatic and manual symbol highlighting" single ((:commit . "7a789c779648c55b16e43278e51be5898c121b3a") (:keywords "faces" "matching") (:url . "http://nschum.de/src/emacs/highlight-symbol/"))]) (highlight-stages . [(20161212 657) nil "highlight staged (quasi-quoted) expressions" single ((:commit . "29cbc5b78261916da042ddb107420083da49b271") (:url . "http://hins11.yu-yake.com/"))]) (highlight-refontification . [(20170211 1224) nil "Visualize font-lock refontification." single ((:commit . "32632897d88c4611fadb08517ca00ef5cbc989b6") (:keywords "faces" "tools") (:url . "https://github.com/Lindydancer/highlight-refontification"))]) (highlight-quoted . [(20140916 1122) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single ((:commit . "24103478158cd19fbcfb4339a3f1fa1f054f1469") (:url . "https://github.com/Fanael/highlight-quoted"))]) (highlight-parentheses . [(20180704 402) nil "highlight surrounding parentheses" single ((:commit . "f0bd58c8dadd2db703b7bfd09e911b5fda05b3df") (:keywords "faces" "matching") (:url . "https://github.com/tsdh/highlight-parentheses.el"))]) (highlight-operators . [(20170213 1420) nil "a face for operators in programming modes" single nil]) (highlight-numbers . [(20170905 342) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single ((:commit . "f952ecb7448c125d4ef82ee6ad136b25e640d74a") (:url . "https://github.com/Fanael/highlight-numbers"))]) (highlight-leading-spaces . [(20151216 422) ((emacs (24 4))) "Highlight leading spaces" single ((:commit . "840db19d863dd97993fd9f893f5be501627b6354") (:url . "https://github.com/mrBliss/highlight-leading-spaces"))]) (highlight-indentation . [(20171218 137) nil "Minor modes for highlighting indentation" single ((:commit . "35e2c1d4f8f368685893128f77f90454cb9c2708") (:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs"))]) (highlight-indent-guides . [(20180529 1039) ((emacs (24))) "Minor mode to highlight indentation" single ((:commit . "895181ec53a07dfef2b7183d8477454ca2606d0e") (:url . "https://github.com/DarthFennec/highlight-indent-guides"))]) (highlight-function-calls . [(20170907 2200) ((emacs (24 4))) "Highlight function/macro calls" single ((:commit . "f7a1eaf95fc64cc0db4d0567f9ff79ec4ae04787") (:keywords "faces" "highlighting") (:url . "http://github.com/alphapapa/highlight-function-calls"))]) (highlight-escape-sequences . [(20171117 437) nil "Highlight escape sequences" single ((:commit . "08d846a7aa748209d65fecead2b6a766c3e5cb41") (:keywords "convenience") (:url . "https://github.com/dgutov/highlight-escape-sequences"))]) (highlight-defined . [(20141225 730) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single ((:commit . "243478cc204ab42d29805ed610961cbb260c1dfd") (:url . "https://github.com/Fanael/highlight-defined"))]) (highlight-context-line . [(20170319 1442) nil "Improve orientation when scrolling" single ((:commit . "716e10a0c7b703b5f1d9c6ca1481524a4d06b7b8") (:keywords "faces" "services" "user") (:url . "https://github.com/ska2342/highlight-context-line/"))]) (highlight-blocks . [(20151201 815) ((emacs (24))) "Highlight the blocks point is in" single ((:commit . "9c4240a5d16008db430d1a81c76dad474d3deb0c") (:url . "https://github.com/Fanael/highlight-blocks"))]) (highlight . [(20180604 2335) nil "Highlighting commands." single ((:commit . "6f92253690dde26d9bfd21546fdf68ef2fdd486b") (:keywords "faces" "help" "local") (:url . "https://www.emacswiki.org/emacs/download/highlight.el"))]) (hierarchy . [(20171221 351) ((emacs (25 1))) "Library to create and display hierarchy structures" single ((:commit . "06f21d3fc16c44c1fa45dc9c91d10100b4db9355") (:url . "https://github.com/DamienCassou/hierarchy"))]) (hideshow-org . [(20120223 1450) nil "Provides org-mode like hide and show for hideshow.el" single ((:commit . "16419e52e6cdd2f46f755144c0ab11ce00d1a626") (:keywords "c" "c++" "java" "lisp" "tools" "editing" "comments" "blocks" "hiding" "outlines" "org-mode"))]) (hide-mode-line . [(20180302 1110) ((emacs (24 4))) "minor mode that hides/masks your modeline" single ((:commit . "86b9057391edad75467261c2e579603567e608f9") (:keywords "frames" "mode-line") (:url . "https://github.com/hlissner/emacs-hide-mode-line"))]) (hide-lines . [(20151127 1040) nil "Commands for hiding lines based on a regexp" single ((:commit . "331122bf19361130351cfe55968c2a7820329eb3") (:keywords "convenience") (:url . "https://github.com/vapniks/hide-lines"))]) (hi2 . [(20141005 1231) nil "indentation module for Haskell Mode" single ((:commit . "c9d199727b5cdcb9e36a972b38131ce4611fd6c8") (:keywords "indentation" "haskell") (:url . "https://github.com/errge/hi2"))]) (hgrc-mode . [(20150409 1343) nil "major mode for editing hgrc files" single ((:commit . "314e8320b82cc1ce74b1bd372f296252e7a23090") (:keywords "convenience" "vc" "hg") (:url . "http://github.com/omajid/hgrc-mode"))]) (hgignore-mode . [(20160430 1707) nil "a major mode for editing hgignore files" single ((:commit . "7aa9f3b8a9c610dbd80b952061b40194e1d9c5bd") (:keywords "convenience" "vc" "hg") (:url . "http://github.com/omajid/hgignore-mode"))]) (hfst-mode . [(20160708 502) nil "major mode for editing HFST files" single ((:commit . "ac1bb9dd92545d3e7fdc05c83996c227cc15c6b8") (:keywords "languages") (:url . "http://wiki.apertium.org/wiki/Emacs"))]) (hexo . [(20180223 1944) ((emacs (24 3))) "Major mode & tools for Hexo" single ((:commit . "ff21ab2d95e13666f36a243989ffea2027842191") (:keywords "tools" "hexo") (:url . "https://github.com/kuanyui/hexo.el"))]) (heroku-theme . [(20150522 1919) nil "Heroku color theme" single ((:commit . "8083643fe92ec3a1c3eb82f1b8dc2236c9c9691d") (:url . "https://github.com/jonathanchu/color-theme-heroku"))]) (heroku . [(20120629 1113) nil "Interface to Heroku apps." single ((:commit . "92af1c073b593c4def99c8777c869992aa4d0b3a") (:keywords "convenience" "api" "database") (:url . "https://github.com/technomancy/heroku.el"))]) (hemisu-theme . [(20130508 1144) nil "Hemisu for Emacs." tar ((:commit . "5c206561aa2c844ecdf3e3b672c3235e559ddd7f") (:url . "http://github/anrzejsliwa/django-theme"))]) (hemera-theme . [(20170910 603) ((emacs (24))) "Light theme" single ((:commit . "354ae3b788c11ac08e6e2fe7c86adc621e2b16fd") (:keywords "themes" "light-theme") (:url . "https://github.com/GuidoSchmidt/emacs-hemera-theme"))]) (helpful . [(20180724 1149) ((emacs (25 1)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 11 0)) (f (0 20 0)) (elisp-refs (1 2)) (shut-up (0 3))) "a better *help* buffer" single ((:commit . "1b4497ffe1e0f3d17b6370c6b1f29a77746e8497") (:keywords "help" "lisp") (:url . "https://github.com/Wilfred/helpful"))]) (helm-zhihu-daily . [(20160625 445) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" single ((:commit . "be27dcc6be1eb97663b65581a9a5c0fc81cfaba7") (:url . "https://github.com/xuchunyang/helm-zhihu-daily"))]) (helm-z . [(20171203 1925) ((helm (1 0))) "Show z directory list with helm.el support." single ((:commit . "37212220bebea8b9c238cb1bbacd8332b7f26c03") (:url . "https://github.com/yynozk/helm-z"))]) (helm-youtube . [(20161113 1848) ((request (0 2 0)) (helm (2 3 1)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single ((:commit . "202c27fc3b54927611e9d9c764465e1b42ef7e41") (:keywords "youtube" "multimedia") (:url . "https://github.com/maximus12793/helm-youtube"))]) (helm-xref . [(20180528 816) ((emacs (25 1)) (helm (1 9 4))) "Helm interface for xref results" single ((:commit . "6f7e8eeec5cc4db64a76ba242c0f2f61e7ee1e46") (:url . "https://github.com/brotzeitmacher/helm-xref"))]) (helm-xcdoc . [(20160116 218) ((helm (1 5)) (emacs (24 4))) "Search Xcode Document by docsetutil and eww with helm interface" single ((:commit . "a85612149a6d8e18ab309b3db2d222ce39c42049") (:url . "https://github.com/fujimisakari/emacs-helm-xcdoc"))]) (helm-wordnet . [(20160128 707) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to local wordnet dictionary" single ((:commit . "a36dbc6fcb570b812870bc1e190f203e0a0042fc") (:keywords "dictionary" "wordnet" "emacs" "elisp" "helm") (:url . "https://github.com/raghavgautam/helm-wordnet"))]) (helm-w3m . [(20171102 216) ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) "W3m bookmark - helm interface." single ((:commit . "8345b7e60702911f54eb6571e429c0d31878957d"))]) (helm-w32-launcher . [(20141223 1214) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) "Start Menu entry launcher using Helm" tar ((:commit . "3e59ad62b89dd21d334af0203d445a83eb25dc5b") (:url . "https://github.com/Fanael/helm-w32-launcher"))]) (helm-unicode . [(20180608 707) ((helm (1 9 8)) (emacs (24 4))) "Helm command for unicode characters." single ((:commit . "fbeb0c5e741a6f462520884b744d43a9acbe1d34"))]) (helm-tramp . [(20180610 717) ((emacs (24 3)) (helm (2 0))) "Tramp helm interface for ssh, docker, vagrant" single ((:commit . "07d2f02166038c14052009f6fb9c2a163118e2cc") (:url . "https://github.com/masasam/emacs-helm-tramp"))]) (helm-themes . [(20160917 2245) ((helm-core (2 0)) (emacs (24 4))) "Color theme selection with helm interface" single ((:commit . "1160af42590b0d845a55e65e1e782d9e4027fd6e") (:url . "https://github.com/syohex/emacs-helm-themes"))]) (helm-tail . [(20180624 203) ((emacs (25 1)) (helm (2 7 0))) "Read recent output from various sources" single ((:commit . "cdbbd9bfb121534a4c089df84325cf776ba2c578") (:keywords "maint" "tools") (:url . "https://github.com/akirak/helm-tail"))]) (helm-systemd . [(20180130 2034) ((emacs (24 4)) (helm (1 9 2)) (with-editor (2 5 0))) "helm's systemd interface" single ((:commit . "96f5cd3ee3412539c2f8d145201f47c4f8e53b4f") (:keywords "convenience"))]) (helm-system-packages . [(20180628 1131) ((emacs (24 4)) (helm (2 8 6)) (seq (1 8))) "Helm UI wrapper for system package managers." tar ((:commit . "d510562f4ea21245496199dffb731d00152f8a2b") (:keywords "helm" "packages") (:url . "https://github.com/emacs-helm/helm-system-packages"))]) (helm-swoop . [(20180215 354) ((helm (1 0)) (emacs (24 3))) "Efficiently hopping squeezed lines powered by helm interface" single ((:commit . "c66336b8245ddc51c4206f19c119f1081920985c") (:keywords "helm" "swoop" "inner" "buffer" "search") (:url . "https://github.com/ShingoFukuyama/helm-swoop"))]) (helm-sql-connect . [(20170319 551) ((helm (0 0 0))) "Choose a database to connect to via Helm." single ((:commit . "5aead55b6f8636140945714d8c332b287ab9ef10") (:keywords "tools" "convenience" "comm") (:url . "https://github.com/eric-hansen/helm-sql-connect"))]) (helm-spotify-plus . [(20180107 338) ((emacs (24 4)) (helm (2 0 0)) (multi (2 0 1))) "Control Spotify search and select music with Helm." single ((:commit . "895f241f1259891d5c89cd42023f119f9fa121d6"))]) (helm-spotify . [(20160905 1447) ((helm (0 0 0)) (multi (2 0 0))) "Control Spotify with Helm." single ((:commit . "f7a62d1ff88e3127de9be7cd3e818b0a92268ab3") (:keywords "helm" "spotify") (:url . "https://github.com/krisajenkins/helm-spotify"))]) (helm-spaces . [(20161001 709) ((helm-core (2 2)) (spaces (0 1 0))) "helm sources for spaces" single ((:commit . "877e2b5178926308d6a7c2a37477bb12c33a96d4") (:keywords "helm" "frames" "convenience") (:url . "https://github.com/yasuyk/helm-spaces"))]) (helm-smex . [(20171004 1308) ((emacs (24)) (smex (3 0)) (helm (1 7 7))) "Helm interface for smex" single ((:commit . "2269375dfa452b88b5170d1a5d5849ebb2c1e413") (:keywords "convenience"))]) (helm-sheet . [(20130630 539) ((helm (1 0))) "helm sources for sheet" single ((:commit . "d360b68d0ddb09aa1854e7b2f3cb39caeee26463") (:keywords "helm" "sheet") (:url . "https://github.com/yasuyk/helm-sheet"))]) (helm-selected . [(20171222 1810) ((emacs (24 4)) (helm (2 8 6)) (selected (1 1))) "helm extension for selected.el" single ((:commit . "6743ede584571319e4c29204197e9ff6b7ee97cf") (:keywords "extensions" "convenience") (:url . "https://github.com/takaxp/helm-selected"))]) (helm-sage . [(20160514 45) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 1 0))) "A helm extension for sage-shell-mode." single ((:commit . "f14e9281d8f2162df7d8f9c2ad9ad1248a24803b") (:keywords "sage" "math" "helm") (:url . "https://github.com/stakemori/helm-sage"))]) (helm-safari . [(20160403 2024) ((helm (1 9 1)) (emacs (24))) "Browse your Safari bookmarks and history" single ((:commit . "664c7f4488829228eed7e90cd53002e14bec555b") (:keywords "tools") (:url . "https://github.com/xuchunyang/helm-safari"))]) (helm-rubygems-org . [(20140826 456) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single ((:commit . "6aaed984f698cbdf9f9aceb0221404563e28764d") (:keywords "ruby" "rubygems" "gemfile" "helm") (:url . "https://github.com/neomantic/helm-rubygems-org"))]) (helm-rubygems-local . [(20130711 1811) ((helm (1 5 3))) "Installed local rubygems find-file for helm" single ((:commit . "289cb33d41c703af9791d6da46b55f070013c2e3") (:url . "https://github.com/f-kubotar/helm-rubygems-local"))]) (helm-rtags . [(20170812 2111) ((helm (2 0)) (rtags (2 10))) "A front-end for rtags" single ((:commit . "9e2bbc5d562773506255143c22a52f4bc40f19e6") (:url . "http://rtags.net"))]) (helm-ros . [(20160812 1052) ((helm (1 9 9)) (xterm-color (1 0)) (cl-lib (0 5))) "Interfaces ROS with helm" single ((:commit . "92b0b215f6a017f0f57f1af15466cc0b2a5a0135") (:keywords "helm" "ros") (:url . "https://www.github.com/davidlandry93/helm-ros"))]) (helm-robe . [(20151208 1955) ((helm (1 7 7))) "completing read function for robe" single ((:commit . "6e69543b4ee76c5f8f3f2510c76e6d9aed17a370") (:url . "https://github.com/syohex/emacs-helm-robe"))]) (helm-rhythmbox . [(20160524 458) ((helm (1 5 0)) (cl-lib (0 5))) "control Rhythmbox's play queue via Helm" single ((:commit . "c92e1ded34ddd4e62e7e9a558259c232e05193fa") (:url . "https://github.com/mrBliss/helm-rhythmbox"))]) (helm-rg . [(20180629 220) ((emacs (25)) (cl-lib (0 5)) (dash (2 13 0)) (helm (2 8 8))) "a helm interface to ripgrep" single ((:commit . "d356a2abb6359d709487ed49414e151627287577") (:keywords "find" "file" "files" "helm" "fast" "rg" "ripgrep" "grep" "search" "match") (:url . "https://github.com/cosmicexplorer/helm-rg"))]) (helm-recoll . [(20160731 221) ((helm (1 9 9))) "helm interface for the recoll desktop search tool." single ((:commit . "cc4c4fa9c8f4f99383647baa8512b60523dc8b36") (:keywords "convenience") (:url . "https://github.com/emacs-helm/helm-recoll"))]) (helm-rdefs . [(20161129 2136) ((emacs (24)) (helm (1 6 4))) "rdefs with helm interface" single ((:commit . "cd3a6b3af3015ee58ef30cb7c81c79ebe5fc867b") (:keywords "matching" "tools") (:url . "https://github.com/saidie/helm-rdefs"))]) (helm-rb . [(20131123 839) ((helm (1 0)) (helm-ag-r (20131123))) "Search Ruby's method by ag and display helm" tar ((:commit . "4949d646420a9849af234dacdd8eb34a77c662fd") (:keywords "searching" "ruby") (:url . "https://github.com/yuutayamada/helm-rb"))]) (helm-rails . [(20130424 819) ((helm (1 5 1)) (inflections (1 1))) "Helm extension for Rails projects." single ((:commit . "506d9948d45dfbc575c9c4c0d102c1ad2f511e82") (:keywords "helm" "rails" "git") (:url . "https://github.com/asok/helm-rails"))]) (helm-rage . [(20180118 732) ((helm (1 9 8)) (emacs (24 4)) (dash (2 13 0)) (s (1 11 0))) "Helm command for rage characters." tar ((:commit . "5d0aefb53d859186181d4bdcfeff7d315339c7b8") (:keywords "helm" "rage" "meme") (:url . "https://github.com/bomgar/helm-rage"))]) (helm-qiita . [(20180301 635) ((helm (2 8 2))) "Qiita with helm interface" single ((:commit . "3ccb85640bf54491ed3c3c8110d454ae181650dc") (:url . "https://github.com/masutaka/emacs-helm-qiita"))]) (helm-pydoc . [(20160917 2242) ((helm-core (2 0)) (emacs (24 4))) "pydoc with helm interface" tar ((:commit . "85480a29b56dacde425655bc8f5a597c785afdf5") (:url . "https://github.com/syohex/emacs-helm-pydoc"))]) (helm-purpose . [(20170114 836) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4))) "Helm Interface for Purpose" single ((:commit . "9ff4c21c1e9ebc7afb851b738f815df7343bb287") (:url . "https://github.com/bmag/helm-purpose"))]) (helm-pt . [(20160214 1542) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar ((:commit . "8acc52911dad1ed0c3975f134a468762afe0b76b") (:keywords "helm" "platinum searcher"))]) (helm-prosjekt . [(20140128 2317) ((prosjekt (0 3)) (helm (1 5 9))) "Helm integration for prosjekt." single ((:commit . "a864a8be5842223043702395f311e3350c28e9db") (:url . "https://github.com/abingham/prosjekt"))]) (helm-projectile . [(20180722 1426) ((helm (1 9 9)) (projectile (0 14 0)) (cl-lib (0 3))) "Helm integration for Projectile" single ((:commit . "74349fc9132502af2b2e6ca9a51185ae4c9391b4") (:keywords "project" "convenience") (:url . "https://github.com/bbatsov/helm-projectile"))]) (helm-project-persist . [(20151210 743) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single ((:commit . "357950fbac18090985a750e40d5d8b10ee9dcd53") (:keywords "project-persist" "project" "helm"))]) (helm-proc . [(20161005 2005) ((helm (1 6 0))) "Helm interface for managing system processes" tar ((:commit . "576d31c2d74ba3897d56e2acd2b0993f52c2547c"))]) (helm-posframe . [(20180610 1048) ((emacs (26 0)) (posframe (0 1 0)) (helm (0 1))) "Using posframe to show helm window" single ((:commit . "d28f96ea92ee9393658901bb552723db10f40dc3") (:keywords "abbrev" "convenience" "matching" "helm") (:url . "https://github.com/tumashu/helm-posframe"))]) (helm-phpunit . [(20160513 153) ((helm (1 9 5)) (phpunit (0 7 0))) "Helm integration for phpunit.el" single ((:commit . "739f26204ad2ba76c25f45e8eab1e5216f7c3518") (:keywords "phpunit" "helm" "php") (:url . "https://github.com/eric-hansen/phpunit-helm"))]) (helm-perspeen . [(20170228 545) ((perspeen (0 1 0)) (helm (2 5 0))) "Helm interface for perspeen." single ((:commit . "7fe2922d85608bfa9e18269fc44181428b8849ff") (:keywords "projects" "lisp") (:url . "https://github.com/jimo1001/helm-perspeen"))]) (helm-perldoc . [(20160917 2256) ((helm-core (2 0)) (deferred (0 3 1)) (emacs (24 4))) "perldoc with helm interface" tar ((:commit . "1979f9f67814c11ec9498502237c89a5e1153100") (:url . "https://github.com/syohex/emacs-helm-perldoc"))]) (helm-pass . [(20180607 1648) ((emacs (25)) (helm (0)) (password-store (0)) (auth-source-pass (4 0 0))) "helm interface of pass, the standard Unix password manager" single ((:commit . "fdff8f8f2e2b8a61caed7b6c171624700dbe1346") (:url . "https://github.com/jabranham/helm-pass"))]) (helm-pages . [(20161120 1826) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single ((:commit . "51dcb9374d1df9feaae85e60cfb39b970554ecba") (:keywords "convenience" "helm" "outlines"))]) (helm-orgcard . [(20151001 824) ((helm-core (1 7 7))) "browse the orgcard by helm" single ((:commit . "9655ac340d1ccc5f3d1c0f7c49be8dd3556d4d0d") (:keywords "convenience" "helm" "org") (:url . "https://github.com/emacs-jp/helm-orgcard"))]) (helm-org-rifle . [(20180712 1545) ((emacs (24 4)) (dash (2 12)) (f (0 18 1)) (helm (1 9 4)) (s (1 10 0))) "Rifle through your Org files" single ((:commit . "b712ced914da3ae733ee7c355261071d4eed4876") (:keywords "hypermedia" "outlines") (:url . "http://github.com/alphapapa/helm-org-rifle"))]) (helm-open-github . [(20170219 1759) ((emacs (24 4)) (helm-core (1 7 7)) (gh (0 8 2))) "Utilities of Opening Github Page" single ((:commit . "2f03d97552a1233db7694116d5f80ecde7612756") (:url . "https://github.com/syohex/emacs-helm-open-github"))]) (helm-notmuch . [(20180521 407) ((helm (1 9 3)) (notmuch (0 21))) "Search emails with Notmuch and Helm" single ((:commit . "3176305a700c571e3bd6cdb37598708ad283ea73") (:keywords "mail") (:url . "https://github.com/xuchunyang/helm-notmuch"))]) (helm-nixos-options . [(20151013 1609) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single ((:commit . "7007363e773a419203a69798fb0e0731b2eb0f73") (:keywords "unix") (:url . "http://www.github.com/travisbhartwell/nix-emacs/"))]) (helm-navi . [(20170402 752) ((emacs (24 4)) (helm (1 9 4)) (navi-mode (2 0)) (s (1 10 0))) "Helm for navi-mode" single ((:commit . "2256591174ff79f889450fdc10822316819d6476") (:keywords "navigation" "outlines") (:url . "http://github.com/emacs-helm/helm-navi"))]) (helm-mu . [(20180513 221) ((helm (1 5 5))) "Helm sources for searching emails and contacts" single ((:commit . "77e6fea24e01481418738421dbcfe28ef1bd63cf") (:url . "https://github.com/emacs-helm/helm-mu"))]) (helm-mt . [(20160917 2152) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management" single ((:commit . "d2bff4100118483bc398c56d0ff095294209265b") (:keywords "helm" "multi-term") (:url . "https://github.com/dfdeshom/helm-mt"))]) (helm-mode-manager . [(20151124 138) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single ((:commit . "5d9c3ca4f8205d07ff4e03c4c3e88f596751c1fc") (:url . "https://github.com/istib/helm-mode-manager"))]) (helm-migemo . [(20151009 2056) ((emacs (24 4)) (helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single ((:commit . "66c6a19d07c6a385daefd2090d0709d26b608b4e") (:keywords "matching" "convenience" "tools" "i18n") (:url . "https://github.com/emacs-jp/helm-migemo"))]) (helm-make . [(20180602 653) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single ((:commit . "e72cdacecb46421dfbde9febdc352a5f06425176") (:keywords "makefile") (:url . "https://github.com/abo-abo/helm-make"))]) (helm-ls-svn . [(20150717 39) ((emacs (24 1)) (helm (1 7 0)) (cl-lib (0 5))) "helm extension to list svn files" single ((:commit . "4d4dc1a272f27fba5fdd7cc47e5d309b53c63ae3") (:keywords "helm" "svn") (:url . "https://svn.macports.org/repository/macports/users/chunyang/helm-ls-svn.el/helm-ls-svn.el"))]) (helm-ls-hg . [(20150908 2243) ((helm (1 7 8))) "List hg files in hg project." single ((:commit . "61b91a22fcfb62d0fc56e361ec01ce96973c7165"))]) (helm-ls-git . [(20180711 223) ((helm (1 7 8))) "list git files." single ((:commit . "e38cee59c42fbf16b6de239a537d27af58473394"))]) (helm-lobsters . [(20150213 746) ((helm (1 0)) (cl-lib (0 5))) "helm front-end for lobste.rs" single ((:commit . "53c5b42baf72776dcba891fc3d7cd7d47721e9b0") (:url . "https://github.com/julienXX/helm-lobste.rs"))]) (helm-lines . [(20180601 1333) ((emacs (24 4)) (helm (1 9 8))) "A helm interface for completing by lines" single ((:commit . "3bfe15a60c6405682085ab289de3eb364624c4e9") (:keywords "files" "helm" "ag" "pt" "vc" "git" "lines" "complete" "tools" "languages") (:url . "https://github.com/torgeir/helm-lines.el/"))]) (helm-lib-babel . [(20180510 624) ((cl-lib (0 5)) (helm (1 9 2)) (emacs (24 4))) "helm insertion of babel function references" single ((:commit . "41bc0cdea8a604c6c8dc83ed5066644d33688fad") (:keywords "convenience") (:url . "https://github.com/dfeich/helm-lib-babel.el"))]) (helm-lean . [(20171102 754) ((emacs (24 3)) (dash (2 12 0)) (helm (2 8 0)) (lean-mode (3 3 0))) "Helm interfaces for lean-mode" single ((:commit . "529b8fa535cfa090a6b62566794161556ffade80") (:keywords "languages") (:url . "https://github.com/leanprover/lean-mode"))]) (helm-lastpass . [(20180722 106) ((emacs (25 1)) (helm (2 0)) (csv (2 1))) "Helm interface of LastPass" single ((:commit . "82e1ffb6ae77d9d9e29c398eb013cd20ce963f77") (:url . "https://github.com/xuchunyang/helm-lastpass"))]) (helm-kythe . [(20170709 26) ((emacs (25)) (dash (2 12 0)) (helm (2 0))) "Google Kythe helm interface" single ((:commit . "eabbef4948f8ec7c7b2fac498e9145dfdb10ca82") (:url . "https://github.com/MaskRay/emacs-helm-kythe"))]) (helm-jstack . [(20150602 2122) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to Jps & Jstack for Java/JVM processes" single ((:commit . "2064f7215dcf4ccbd6a7b8784223251507746da4") (:keywords "java" "jps" "jstack" "jvm" "emacs" "elisp" "helm"))]) (helm-js-codemod . [(20171106 244) ((emacs (24 4)) (helm-core (1 9 8)) (js-codemod (1 0 0))) "A helm interface for running js-codemods" single ((:commit . "18503d94e64418e8ea5c5854f197ae9f3009cdbf") (:keywords "helm" "js" "codemod" "region"))]) (helm-j-cheatsheet . [(20170217 29) ((helm (1 5 3))) "Quick J reference for Emacs" single ((:commit . "6c47e7162b9ba2de4b41221d01180146973d860b") (:url . "https://github.com/abo-abo/helm-j-cheatsheet"))]) (helm-itunes . [(20151012 2348) ((helm (1 6 1))) "Play local iTunes and Spotify tracks" single ((:commit . "966de755a5aadbe02311a6cef77bd4790e84c263") (:url . "https://github.com/daschwa/helm-itunes"))]) (helm-ispell . [(20151231 53) ((helm-core (1 7 7))) "ispell-complete-word with helm interface" single ((:commit . "cb735695ab3a0e66c123c2f3f3e8911fb1c2d5fc") (:url . "https://github.com/syohex/emacs-helm-ispell"))]) (helm-img-tiqav . [(20151224 1522) ((helm-img (0 0 1))) "An helm-source for joking." single ((:commit . "33a7e9508bc8f37d53320b56c92b53d321a57bb0") (:keywords "convenience") (:url . "https://github.com/l3msh0/helm-img"))]) (helm-img . [(20151224 1521) ((helm (1 7 7)) (cl-lib (0 5))) "Utilities for making image sources for helm." tar ((:commit . "aa3f8a5dce8d0413bf07584f07153a39015c2bfc") (:keywords "convenience") (:url . "https://github.com/l3msh0/helm-img"))]) (helm-idris . [(20141202 957) ((helm (0 0 0)) (idris-mode (0 9 14))) "A Helm datasource for Idris documentation, queried from the compiler" single ((:commit . "a2f45d6817974f318b55ad9b7fd19d5df132d47e") (:keywords "languages" "helm"))]) (helm-hunks . [(20171217 1133) ((emacs (24 4)) (helm (1 9 8))) "A helm interface for git hunks - browsing, staging, unstaging and killing" single ((:commit . "6392bf716f618eac23ce81140aceb0dfacb9c6d0") (:keywords "helm" "git" "hunks" "vc"))]) (helm-hoogle . [(20161026 2234) ((helm (1 6 2)) (emacs (24 4))) "Use helm to navigate query results from Hoogle" single ((:commit . "73969a9d46d2121a849a01a9f7ed3636d01f7bbc") (:keywords "haskell" "programming" "hoogle") (:url . "https://github.com/jwiegley/haskell-config"))]) (helm-helm-commands . [(20130902 1048) ((helm (1 5 4))) "List all helm commands with helm" single ((:commit . "3a05aa19c976501343ad9ae630a36810921a85f6") (:keywords "convenience") (:url . "https://github.com/vapniks/helm-helm-commands"))]) (helm-hayoo . [(20151013 2351) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single ((:commit . "dd4c0c8c87521026edf1b808c4de01fa19b7c693") (:keywords "helm"))]) (helm-hatena-bookmark . [(20170821 646) ((helm (2 8 2))) "Hatena::Bookmark with helm interface" single ((:commit . "ee0d2554f573779210b0e2595e539b3e28461f1d") (:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark"))]) (helm-gtags . [(20170115 2129) ((emacs (24 4)) (helm (2 0))) "GNU GLOBAL helm interface" single ((:commit . "108e93d0d099ebb7b98847388f368311cf177033") (:url . "https://github.com/syohex/emacs-helm-gtags"))]) (helm-growthforecast . [(20140119 1944) ((helm (1 5 9))) "helm extensions for growthforecast." single ((:commit . "0f94ac090d6c354058ad89a86e5c18385c136d9b") (:url . "https://github.com/daic-h/helm-growthforecast"))]) (helm-grepint . [(20161001 713) ((helm (1 0)) (emacs (24))) "Generic helm interface to grep" single ((:commit . "a62ca27515ff6a366b89b420500eb16d380cc653") (:keywords "grep" "grepping" "searching" "helm") (:url . "https://github.com/kopoli/helm-grepint"))]) (helm-google . [(20180605 2220) ((helm (0))) "Emacs Helm Interface for quick Google searches" single ((:commit . "48e91a73d5f48c39d7a219022a24440cff548e1a") (:keywords "helm" "google" "search" "browse" "searx") (:url . "https://framagit.org/steckerhalter/helm-google"))]) (helm-go-package . [(20161102 1853) ((emacs (24 4)) (helm-core (2 2 1)) (go-mode (1 4 0)) (deferred (0 4 0))) "helm sources for Go programming language's package" single ((:commit . "e42c563936c205ceedb930a687c11b4bb56447bc") (:url . "https://github.com/yasuyk/helm-go-package"))]) (helm-gitlab . [(20180312 947) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0 8 0))) "Helm interface to Gitlab" single ((:commit . "68318aca3206d50701039c9aae39734ca29a49f9") (:keywords "gitlab" "helm") (:url . "https://github.com/nlamirault/emacs-gitlab"))]) (helm-gitignore . [(20170210 1608) ((gitignore-mode (1 1 0)) (helm (1 7 0)) (request (0 1 0)) (cl-lib (0 5))) "Generate .gitignore files with gitignore.io." single ((:commit . "2a2e7da7855a6db0ab3bb6a6a087863d7abd4391") (:keywords "helm" "gitignore" "gitignore.io") (:url . "https://github.com/jupl/helm-gitignore"))]) (helm-github-stars . [(20180717 1811) ((helm (1 6 8)) (emacs (24 4))) "Helm integration for your starred repositories on github" single ((:commit . "809cf88e2984b121348b1046e1d3890f1fd580b4") (:keywords "helm" "github" "stars") (:url . "https://github.com/Sliim/helm-github-stars"))]) (helm-git-grep . [(20170614 711) ((helm-core (2 2 0))) "helm for git grep, an incremental git-grep(1)" single ((:commit . "744cea07dba6e6a5effbdba83f1b786c78fd86d3") (:url . "https://github.com/yasuyk/helm-git-grep"))]) (helm-git-files . [(20141212 517) ((helm (1 5 9))) "helm for git files" single ((:commit . "43193960774069369ac6964bbf7c026900206fa8") (:keywords "helm" "git"))]) (helm-git . [(20120630 1403) nil "Helm extension for Git." single ((:commit . "cb96a52b5aecadd3c27aba7749d14e43ab128d55") (:keywords "helm" "git") (:url . "https://github.com/maio/helm-git"))]) (helm-ghs . [(20170714 2241) ((emacs (24)) (helm (2 2 0))) "ghs with helm interface" single ((:commit . "17a70bf16255d90d67c8350e88200ec8bfd47563") (:url . "https://github.com/iory/emacs-helm-ghs"))]) (helm-ghq . [(20161015 117) ((helm (2 2 0))) "ghq with helm interface" single ((:commit . "49481685adbb25b3f766aabfdb7472becc673a94") (:url . "https://github.com/masutaka/emacs-helm-ghq"))]) (helm-ghc . [(20141105 659) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single ((:commit . "e5ee7b8d3b745d162553aecfbd41381c4de85f35") (:keywords "languages" "helm"))]) (helm-fuzzy-find . [(20171105 2000) ((emacs (24 1)) (helm (1 7 0))) "Find file using Fuzzy Search" single ((:commit . "de2abbf7ca13609587325bacd4a1ed4376b5c927") (:keywords "helm" "fuzzy" "find" "file") (:url . "https://github.com/xuchunyang/helm-fuzzy-find"))]) (helm-fuzzier . [(20160605 1445) ((emacs (24 3)) (helm (1 7 0))) "Better fuzzy matching for Helm" single ((:commit . "8798dcf3583b863df5b9dea7fe3b0179ba1c35bc") (:keywords "convenience" "helm" "fuzzy") (:url . "http://github.com/EphramPerdition/helm-fuzzier"))]) (helm-frame . [(20170515 1250) ((emacs (24 4))) "open helm buffers in a dedicated frame" single ((:commit . "389e6461a423d649b7062ba99a2234bef7770059") (:keywords "lisp" "helm" "popup" "frame"))]) (helm-flyspell . [(20170210 1101) ((helm (1 6 5))) "Helm extension for correcting words with flyspell" single ((:commit . "8d4d947c687cb650cb149aa2271ad5201ea92594") (:keywords "convenience") (:url . "https://github.com/pronobis/helm-flyspell"))]) (helm-flymake . [(20160609 1702) ((helm (1 0))) "helm interface for flymake" single ((:commit . "72cf18a1a1f843db9bb5d58301739ea9ccb1655b") (:url . "https://github.com/tam17aki"))]) (helm-flycheck . [(20160710 129) ((dash (2 12 1)) (flycheck (28)) (helm-core (1 9 8))) "Show flycheck errors with helm" single ((:commit . "3cf7d3bb194acacc6395f88360588013d92675d6") (:keywords "helm" "flycheck") (:url . "https://github.com/yasuyk/helm-flycheck"))]) (helm-flx . [(20180102 2116) ((emacs (24 4)) (helm (1 7 9)) (flx (0 5))) "Sort helm candidates by flx score" single ((:commit . "6640fac5cb16bee73c95b8ed1248a4e5e113690e") (:keywords "convenience" "helm" "fuzzy" "flx") (:url . "https://github.com/PythonNut/helm-flx"))]) (helm-firefox . [(20161202 517) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single ((:commit . "0ad34b7b5abc485a86cae6920c14de861cbeb085") (:url . "https://github.com/emacs-helm/helm-firefox"))]) (helm-filesets . [(20140929 1135) ((helm (1 6 3)) (filesets+ (0))) "A helm source for emacs filesets" single ((:commit . "b352910af4c3099267a8aa0169c7f743b35bb1fa") (:keywords "filesets") (:url . "https://github.com/gcla/helm-filesets"))]) (helm-exwm . [(20180703 919) ((emacs (25 2)) (helm (2 8 5)) (exwm (0 15))) "Helm for EXWM buffers" single ((:commit . "56266f261ba3b3d2753b374b50da20eb768c06f5") (:keywords "helm" "exwm") (:url . "https://github.com/emacs-helm/helm-exwm"))]) (helm-ext . [(20180525 2050) ((emacs (24 4)) (helm (2 5 3))) "A few extensions to Helm" tar ((:commit . "90b788aced21ec467a234b6b77b5a6ebae6de75f") (:keywords "extensions"))]) (helm-eww . [(20180511 618) ((emacs (24 4)) (helm (2 8 6)) (seq (1 8))) "Helm UI wrapper for EWW." single ((:commit . "1a09f11b2376dec8237df40140f056be8a256ef0") (:keywords "helm" "packages") (:url . "https://github.com/emacs-helm/helm-eww"))]) (helm-etags-plus . [(20170113 614) ((helm (1 7 8))) "Another Etags helm.el interface" single ((:commit . "704f0991ee4a2298b01c33aafc224eef322e15e3") (:keywords "helm" "etags") (:url . "https://github.com/jixiuf/helm-etags-plus"))]) (helm-emms . [(20180405 2228) ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) "Emms for Helm." single ((:commit . "d3f9bdef8ff0d093eaf6e26af50ea905ab53fdec") (:url . "https://github.com/emacs-helm/helm-emms"))]) (helm-emmet . [(20160713 531) ((helm (1 0)) (emmet-mode (1 0 2))) "helm sources for emmet-mode's snippets" single ((:commit . "f0364e736b10cf44232053a78de04133a88185ae") (:keywords "convenience" "helm" "emmet") (:url . "https://github.com/yasuyk/helm-emmet"))]) (helm-elscreen . [(20170709 214) ((helm (2 8 0)) (elscreen (0)) (cl-lib (0 5)) (emacs (24 1))) "Elscreen with helm interface" single ((:commit . "b8212866939dc4a1e1dc23ad572407b688e130e3") (:keywords "files" "convenience") (:url . "https://github.com/emacs-helm/helm-elscreen"))]) (helm-dirset . [(20151208 1612) ((f (0 16 2)) (helm (1 6 1)) (s (1 9 0)) (cl-lib (0 5))) "helm sources for multi directories" single ((:commit . "eb30810cd26e1ee73d84a863e6b2667700e9aead") (:keywords "files" "directories") (:url . "http://101000lab.org"))]) (helm-dired-recent-dirs . [(20131228 614) ((helm (1 0))) "Show recent dirs with helm.el support." single ((:commit . "3bcd125b44f5a707588ae3868777d91192351523") (:keywords "helm" "dired" "zsh"))]) (helm-dired-history . [(20170524 346) ((helm (1 9 8)) (cl-lib (0 5))) "Show dired history with helm.el support." single ((:commit . "281523f9fc46cf00fafd670ba5cd16552a607212") (:keywords "helm" "dired history") (:url . "https://github.com/jixiuf/helm-dired-history"))]) (helm-directory . [(20170705 2102) ((emacs (24 4)) (helm (2 0))) "selecting directory before select the file" single ((:commit . "29f05c87046f9a04329f817e9d7489a290a2592a") (:url . "https://github.com/masasam/emacs-helm-directory"))]) (helm-dictionary . [(20160817 1333) ((helm (1 5 5))) "Helm source for looking up dictionaries" single ((:commit . "805ce850d4cbe811227d9c9b16cc51f652198f3f") (:url . "https://github.com/emacs-helm/helm-dictionary"))]) (helm-describe-modes . [(20160211 2118) ((helm (1 9)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface to major and minor modes." single ((:commit . "11fb36af119b784539d31c6160002de1957408aa") (:keywords "docs" "convenience") (:url . "https://github.com/emacs-helm/helm-describe-modes"))]) (helm-descbinds . [(20180429 756) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" single ((:commit . "033be73f21778633813264ce1634a6e1ad873d8e") (:keywords "helm" "help") (:url . "https://github.com/emacs-helm/helm-descbinds"))]) (helm-dash . [(20180503 218) ((helm (1 9 2)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single ((:commit . "0ac2db529577fa63f2ed32310062873c585b91de") (:keywords "docs") (:url . "http://github.com/areina/helm-dash"))]) (helm-ctest . [(20180125 2058) ((s (1 9 0)) (dash (2 11 0)) (helm-core (1 7 4))) "Run ctest from within emacs" single ((:commit . "034927a922f40d9f5978786feed9bc9fe1f7655f") (:keywords "helm" "ctest"))]) (helm-css-scss . [(20140626 1725) ((helm (1 0)) (emacs (24))) "CSS/SCSS/LESS Selectors with helm interface" single ((:commit . "ab8348aa98e0daa2f1b771e35bdb06bfacbe5016") (:keywords "scss" "css" "less" "selector" "helm") (:url . "https://github.com/ShingoFukuyama/helm-css-scss"))]) (helm-cscope . [(20170326 22) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single ((:commit . "3cc7259ab4989f9f7ca039e703cdac14b907530a") (:keywords "cscope" "helm") (:url . "https://github.com/alpha22jp/helm-cscope.el"))]) (helm-core . [(20180712 137) ((emacs (24 4)) (async (1 9 3))) "Development files for Helm" tar ((:commit . "05d32f363d65b910011621eca1232b357df06c3a") (:url . "https://emacs-helm.github.io/helm/"))]) (helm-company . [(20180213 1405) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single ((:commit . "acc9c7901e094c1591327a0db1ec7a439f67a84d") (:url . "https://github.com/Sodel-the-Vociferous/helm-company"))]) (helm-commandlinefu . [(20150610 2245) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single ((:commit . "9ee7e018c5db23ae9c8d1c8fa969876f15b7280d") (:keywords "commandlinefu.com") (:url . "https://github.com/xuchunyang/helm-commandlinefu"))]) (helm-codesearch . [(20180203 2033) ((s (1 10 0)) (dash (2 12 0)) (helm (1 7 7)) (cl-lib (0 5))) "helm interface for codesearch" single ((:commit . "87a68168b7c1490769305db0df60035e47799a75") (:keywords "tools"))]) (helm-cmd-t . [(20170125 659) nil "cmd-t style completion" tar ((:commit . "7fa3d4a9f7271512e54c5de999079b27c9eec6bf") (:keywords "helm" "project-management" "completion" "convenience" "cmd-t" "textmate") (:url . "https://github.com/lewang/helm-cmd-t"))]) (helm-clojuredocs . [(20160405 23) ((edn (1 1 2)) (helm (1 5 7))) "search for help in clojuredocs.org" single ((:commit . "5a7f0f2cb401be0b09e73262a1c18265ab9a3cea") (:keywords "helm" "clojure") (:url . "https://github.com/mbuczko/helm-clojuredocs"))]) (helm-circe . [(20160206 2252) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single ((:commit . "9091651d9fdd8d49d8ff6f9dcf3a2ae416c9f15a") (:keywords "helm" "circe") (:url . "https://github.com/lesharris/helm-circe"))]) (helm-cider-history . [(20150719 1420) ((helm (1 4 0)) (cider (0 9 0))) "Helm interface for cider history" single ((:commit . "c391fcb2e162a02001605a0b9449783575a831fd") (:keywords "convenience") (:url . "https://github.com/Kungi/helm-cider-history"))]) (helm-cider . [(20180306 2058) ((emacs (24 4)) (cider (0 16)) (helm-core (2 8))) "Helm interface to CIDER" tar ((:commit . "9363cc537f06233345aa3af5cd46aa5681ad607b") (:keywords "cider" "clojure" "helm" "languages") (:url . "https://github.com/clojure-emacs/helm-cider"))]) (helm-chronos . [(20150528 1336) ((chronos (1 2)) (helm (1 7 1))) "helm interface for chronos timers" tar ((:commit . "a14fc3d65dd96ce6616234b3f7b8b08b4c1817ef") (:keywords "calendar") (:url . "http://github.com/dxknight/helm-chronos"))]) (helm-chrome . [(20160718 2220) ((helm (1 5)) (cl-lib (0 3)) (emacs (24))) "Helm interface for Chrome bookmarks" single ((:commit . "fd630ace4b4b4f33355a973743bbfe0c90ce4830") (:keywords "tools") (:url . "https://github.com/kawabata/helm-chrome"))]) (helm-charinfo . [(20170810 531) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "A helm source for character information" single ((:commit . "91798a49dc115342a7e01e48b264e9a0bf5ea414") (:keywords "convenience") (:url . "https://github.com/cwittern/helm-charinfo"))]) (helm-c-yasnippet . [(20170128 742) ((helm (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single ((:commit . "65ca732b510bfc31636708aebcfe4d2d845b59b0") (:keywords "convenience" "emulation"))]) (helm-c-moccur . [(20151230 124) ((helm (20120811)) (color-moccur (2 71))) "helm source for color-moccur.el" single ((:commit . "b0a906f85fa352db091f88b91a9c510de607dfe9") (:keywords "convenience" "emulation"))]) (helm-bundle-show . [(20151221 430) ((helm (1 8 0))) "bundle show with helm interface" single ((:commit . "850fecb36f609f1dfd5d20ca0170c9a6b7f90ab9") (:url . "https://github.com/masutaka/emacs-helm-bundle-show"))]) (helm-books . [(20170324 2331) ((helm (1 7 7))) "Helm interface for searching books" single ((:commit . "625aadec1541a5ca36951e4ce1301f4b6fe2bf3f") (:url . "https://github.com/grugrut/helm-books"))]) (helm-bm . [(20160321 631) ((bm (1 0)) (cl-lib (0 5)) (helm (1 9 3)) (s (1 11 0))) "helm sources for bm.el" single ((:commit . "d66341f5646c23178d4d8bffb6cfebe3fb73f1d7") (:keywords "helm" "bookmark") (:url . "https://github.com/yasuyk/helm-bm"))]) (helm-bind-key . [(20141108 2115) ((bind-key (1 0)) (helm (1 6 4))) "helm-source for for bind-key." single ((:commit . "9da6ad8b7530e72fb4ac67be8c6a482898dddc25") (:keywords "convenience" "emulation"))]) (helm-bibtexkey . [(20140214 704) ((helm (1 5 8))) "Bibtexkey source for helm" tar ((:commit . "aa1637ea5c8c5f1817e480fc2a3750cafab3d99f") (:keywords "bib" "tex") (:url . "https://github.com/kenbeese/helm-bibtexkey"))]) (helm-bibtex . [(20180612 619) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A bibliography manager based on Helm" tar ((:commit . "3c0c77c7d20444865d069225525855407220572f"))]) (helm-bbdb . [(20180505 808) ((helm (1 5)) (bbdb (3 1 2))) "Helm interface for bbdb" single ((:commit . "db286b0ee0ea18142f7d005e465832bb755bb0cb") (:url . "https://github.com/emacs-helm/helm-bbdb"))]) (helm-backup . [(20171204 2357) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" single ((:commit . "a2c0fa16113e628500d6822c6605280b94e24038") (:keywords "backup" "convenience" "files" "tools" "vc") (:url . "http://github.com/antham/helm-backup"))]) (helm-aws . [(20180514 332) ((helm (1 5 3)) (cl-lib (0 5)) (s (1 9 0))) "Manage AWS EC2 server instances directly from Emacs" single ((:commit . "b36c744b3f00f458635a91d1f5158fccbb5baef6") (:url . "https://github.com/istib/helm-aws"))]) (helm-ag-r . [(20131123 731) ((helm (1 0))) "Search something by ag and display by helm" single ((:commit . "67de4ebafe9b088db950eefa5ef590a6d78b4ac8") (:keywords "searching") (:url . "https://github.com/yuutayamada/helm-ag-r"))]) (helm-ag . [(20170209 745) ((emacs (24 4)) (helm (2 0))) "the silver searcher with helm interface" single ((:commit . "2fc02c4ead29bf0db06fd70740cc7c364cb650ac") (:url . "https://github.com/syohex/emacs-helm-ag"))]) (helm-addressbook . [(20170903 28) ((helm (2 8 2)) (addressbook-bookmark (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm for addressbook bookmarks." single ((:commit . "62497f72d46afd3a9f9f94b27d062a82fb232de4") (:url . "https://github.com/emacs-helm/helm-addressbook"))]) (helm-ad . [(20151209 215) ((dash (2 8 0)) (helm (1 6 2))) "helm source for Active Directory" single ((:commit . "8ac044705d8620ee354a9cfa8cc1b865e83c0d55") (:keywords "comm"))]) (helm-ack . [(20141030 526) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:commit . "889bc225318d14c6e3be80e73b1d9d6fb30e48c3") (:url . "https://github.com/syohex/emacs-helm-ack"))]) (helm-R . [(20120819 1714) ((helm (20120517)) (ess (20120509))) "helm-sources and some utilities for GNU R." single ((:commit . "b0eb9d5f6a483a9dbe6eb6cf1f2024d4f5938bc2") (:keywords "convenience") (:url . "https://github.com/myuhe/helm-R.el"))]) (helm . [(20180724 615) ((emacs (24 4)) (async (1 9 3)) (popup (0 5 3)) (helm-core (2 9 8))) "Helm is an Emacs incremental and narrowing framework" tar ((:commit . "05d32f363d65b910011621eca1232b357df06c3a") (:url . "https://emacs-helm.github.io/helm/"))]) (heaven-and-hell . [(20180421 221) ((emacs (24 4))) "easy toggle light/dark themes" single ((:commit . "0e4191065a1c18b50734a437f3cafb629b89edc0") (:keywords "faces") (:url . "https://github.com/valignatev/heaven-and-hell"))]) (headlong . [(20150417 826) nil "reckless completion" single ((:commit . "f6830f87f236eee88263cb6976125f72422abe72") (:keywords "completion") (:url . "https://github.com/abo-abo/headlong"))]) (hcl-mode . [(20170107 27) ((emacs (24 3))) "Major mode for Hashicorp" single ((:commit . "0f2c5ec7e7bcf77c8548e8cac8721ea935ca1b5e") (:url . "https://github.com/syohex/emacs-hcl-mode"))]) (hc-zenburn-theme . [(20150928 933) nil "An higher contrast version of the Zenburn theme." single ((:commit . "fd0024a5191cdce204d91c8f1db99ba31640f6e9") (:url . "https:github.com/edran/hc-zenburn-emacs"))]) (hayoo . [(20140831 521) ((emacs (24)) (json (1 3))) "Query hayoo and show results in a tabulated buffer." single ((:commit . "3ca2fb0c4d5f337d0410c21b2702dd147014e984") (:keywords "hayoo" "haskell") (:url . "https://github.com/benma/hayoo.el/"))]) (haxor-mode . [(20160618 429) ((emacs (24 0))) "Major mode for editing Haxor Assembly Files" single ((:commit . "6fa25a8e6b6a59481bc0354c2fe1e0ed53cbdc91") (:keywords "haxor") (:url . "https://github.com/krzysztof-magosa/haxor-mode"))]) (haxe-mode . [(20131004 142) nil "An Emacs major mode for Haxe" single ((:url . "http://people.debian.org/~jps/misc/haxe-mode.el"))]) (haxe-imports . [(20170330 1604) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 1))) "Code for dealing with Haxe imports" single ((:commit . "f104a641f3dfe698359d9aca1f28d9383cf43e04") (:keywords "haxe") (:url . "http://www.github.com/accidentalrebel/emacs-haxe-imports"))]) (haste . [(20141030 1334) ((json (1 2))) "Emacs client for hastebin (http://hastebin.com/about.md)" single ((:commit . "22d05aacc3296ab50a7361222ab139fb4d447c25") (:url . "http://github.com/rlister/emacs-haste-client"))]) (hasky-stack . [(20180331 208) ((emacs (24 4)) (f (0 18 0)) (magit-popup (2 10))) "Interface to the Stack Haskell development tool" single ((:commit . "3e17ce07dd6b0207474e4ff14ad7b8c467382947") (:keywords "tools" "haskell") (:url . "https://github.com/hasky-mode/hasky-stack"))]) (hasky-extensions . [(20180107 2112) ((emacs (24 4)) (avy-menu (0 2))) "Toggle Haskell language extensions" single ((:commit . "6909022bccb7e5c26d1c4e5fa20cbc6b65c62d69") (:keywords "programming") (:url . "https://github.com/hasky-mode/hasky-extensions"))]) (haskell-tab-indent . [(20170701 258) nil "tab-based indentation for haskell-mode" single ((:commit . "b4cb851aef96c42ec7b3cc37b6fdd867fe5a0853") (:keywords "indentation" "haskell") (:url . "https://spwhitton.name/tech/code/haskell-tab-indent/"))]) (haskell-snippets . [(20160918 1722) ((cl-lib (0 5)) (yasnippet (0 8 0))) "Yasnippets for Haskell" tar ((:commit . "07b0f460b946fd1be26c29652cb0468b47782f3a") (:keywords "snippets" "haskell") (:url . "https://github.com/haskell/haskell-snippets"))]) (haskell-mode . [(20180601 143) ((emacs (24 3))) "A Haskell editing mode" tar ((:commit . "dd0ea640fa449d021399a17db65e4d50d3f0f2a9") (:keywords "haskell" "cabal" "ghc" "repl") (:url . "https://github.com/haskell/haskell-mode"))]) (haskell-emacs-text . [(20150713 716) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:keywords "haskell" "emacs" "ffi") (:url . "https://github.com/knupfer/haskell-emacs/modules/text"))]) (haskell-emacs-base . [(20150714 859) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:keywords "haskell" "emacs" "ffi") (:url . "https://github.com/knupfer/haskell-emacs/modules/base"))]) (haskell-emacs . [(20160904 1326) nil "Write emacs extensions in haskell" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:keywords "haskell" "emacs" "ffi") (:url . "https://github.com/knupfer/haskell-emacs"))]) (harvest . [(20170822 1046) ((swiper (0 7 0)) (hydra (0 13 0)) (s (1 11 0))) "Harvest integration" single ((:commit . "7acbc0564b250521b67131ee2a0a92720239454f") (:keywords "harvest") (:url . "https://github.com/kostajh/harvest.el"))]) (hardhat . [(20160414 713) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single ((:commit . "9038a49ab55cd4c502cf7f07ed0d1b9b6bc3626e") (:keywords "convenience") (:url . "http://github.com/rolandwalker/hardhat"))]) (hardcore-mode . [(20151113 2301) nil "Disable arrow keys + optionally backspace and return" single ((:commit . "b1dda19692b4a7a58a689e81784a9b35be39e70d"))]) (handoff . [(20150916 2300) nil "Get your hand off that mouse, damn it!" single ((:commit . "75dc7a7e352f38679f65d0ca80ad158798e168bd") (:url . "http://github.com/rejeep/handoff.el"))]) (handlebars-sgml-mode . [(20130623 1633) nil "Add Handlebars contextual indenting support to sgml-mode" single ((:commit . "c76df93a9a8c1b1b3efdcc4add32bf93304192a4") (:url . "http://github.com/jacott/handlebars-sgml-mode"))]) (handlebars-mode . [(20150211 949) nil "A major mode for editing Handlebars files." single ((:commit . "81f6b73fea8f397807781a1b51568397af21a6ef"))]) (hamlet-mode . [(20131207 2324) ((cl-lib (0 3)) (dash (2 3 0)) (s (1 7 0))) "Hamlet editing mode" single ((:commit . "7362b955e556a3d007fa06945a27e5b99349527d") (:keywords "wp" "languages" "comm") (:url . "https://github.com/lightquake/hamlet-mode"))]) (haml-mode . [(20170923 2153) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing Haml files" single ((:commit . "1cbb2de8f0fc25f35448c5cad04642f28078f3bb") (:keywords "markup" "languages" "html") (:url . "https://github.com/nex3/haml-mode"))]) (hamburger-menu . [(20160825 1331) ((emacs (24 5))) "Mode line hamburger menu" single ((:commit . "3568159c693c30bed7f61580e4f3b6241253ad4e") (:keywords "hamburger" "menu") (:url . "https://gitlab.com/iain/hamburger-menu-mode"))]) (hamburg-theme . [(20160122 2340) ((emacs (24))) "Color Theme with a dark blue background." single ((:commit . "aacefdf1501d97a5afc0e63c8ead4b2463323028"))]) (ham-mode . [(20150811 606) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single ((:commit . "3a141986a21c2aa6eefb428983352abb8b7907d2") (:keywords "convenience" "emulation" "wp") (:url . "http://github.com/Bruce-Connor/ham-mode"))]) (hal-mode . [(20160704 1046) nil "Major mode for editing HAL files" single ((:commit . "cd2f66f219ee520198d4586fb6b169cef7ad3f21") (:keywords "language") (:url . "https://github.com/strahlex/hal-mode/"))]) (hackernews . [(20180220 419) ((json (1 2))) "Access the Hacker News aggregator from Emacs" tar ((:commit . "309c60c974eb5af4554e0675d4285baa77d89e54"))]) (hacker-typer . [(20170206 720) ((emacs (24))) "Pretend to write code like a pro" tar ((:commit . "d5a23714a4ccc5071580622f278597d5973f40bd") (:keywords "hacker" "typer" "multimedia" "games") (:url . "http://github.com/therockmandolinist/emacs-hacker-typer"))]) (hack-time-mode . [(20170527 910) ((emacs (24 4))) "Forge time" single ((:commit . "73d6fcf8b39283526e5d4e3919193611e25a0898") (:keywords "time" "convenience") (:url . "https://gitlab.com/marcowahl/hack-time-mode"))]) (habitica . [(20171022 1922) ((org (8 3 5)) (emacs (24 3))) "Interface for habitica.com" single ((:commit . "e51ff7436fe1da10404e2c0872b15d6a7a926717") (:keywords "habitica" "todo") (:url . "https://github.com/abrochard/emacs-habitica"))]) (habamax-theme . [(20180702 958) ((emacs (24))) "Boring white background color that gets the job done." single ((:commit . "b40e3e7c637e67c8f9164b0db9e75c0ec4eb6a0f") (:url . "https://github.com/habamax/habamax-theme"))]) (gxref . [(20170411 1053) ((emacs (25))) "xref backend using GNU Global." single ((:commit . "380b02c3c3c2586c828456716eef6a6392bb043b") (:keywords "xref" "global" "tools") (:url . "https://github.com/dedi/gxref"))]) (gvpr-mode . [(20131208 918) nil "A major mode offering basic syntax coloring for gvpr scripts." single ((:commit . "3d6cc6f4416faf2a1913821d12ba6eb624362af0") (:keywords "graphviz" "gv" "dot" "gvpr" "graph") (:url . "https://raw.github.com/rodw/gvpr-lib/master/extra/gvpr-mode.el"))]) (guru-mode . [(20170730 31) nil "Become an Emacs guru" single ((:commit . "c180e05ebc1484764aad245c85b69de779826e4e") (:keywords "convenience") (:url . "https://github.com/bbatsov/guru-mode"))]) (gulp-task-runner . [(20170718 1341) nil "Gulp task runner" single ((:commit . "877990e956b1d71e2d9c7c3e5a129ad199b9debb") (:keywords "convenience" "javascript"))]) (guix . [(20180705 315) ((emacs (24 3)) (dash (2 11 0)) (geiser (0 8)) (bui (1 1 0)) (magit-popup (2 1 0)) (edit-indirect (0 1 4))) "Interface for GNU Guix" tar ((:commit . "f220e82b2dd94fb349ae37665912a42196d53975") (:keywords "tools") (:url . "https://emacs-guix.gitlab.io/website/"))]) (guide-key-tip . [(20161011 123) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single ((:commit . "02c5d4b0b65f3e91be5a47f0ff1ae5e86e00c64e") (:keywords "help" "convenience" "tooltip") (:url . "https://github.com/aki2o/guide-key-tip"))]) (guide-key . [(20150107 2235) ((dash (2 10 0)) (popwin (0 3 0)) (s (1 9 0))) "Guide the following key bindings automatically and dynamically" single ((:commit . "9236d287a7272e307fb941237390a96037c8c0a2") (:keywords "help" "convenience") (:url . "https://github.com/kai2nenobu/guide-key"))]) (guess-language . [(20170620 308) ((cl-lib (0 5)) (emacs (24))) "Robust automatic language detection" tar ((:commit . "1f1602f74d7159e7fb8c90f92ec5a3d1df5429da") (:url . "https://github.com/tmalsburg/guess-language.el"))]) (gtk-pomodoro-indicator . [(20171230 840) nil "A pomodoro indicator for the GTK tray" tar ((:commit . "eb59b229de0dde307b20654075a9bbac69899a66") (:keywords "convenience" "pomodoro") (:url . "https://github.com/abo-abo/gtk-pomodoro-indicator"))]) (gscholar-bibtex . [(20170913 1457) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single ((:commit . "ba4ce159e385d695d8560e8b06b3cbe48424861c") (:keywords "extensions"))]) (gs-mode . [(20151202 206) nil "Major mode for editing GrADS script files" single ((:commit . "1a13051db21b999c7682a015b33a03096ff9d891") (:keywords "grads" "script" "major-mode"))]) (gruvbox-theme . [(20180623 2009) ((autothemer (0 2))) "A retro-groove colour theme for Emacs" tar ((:commit . "796999e5db2a0e43ad64c062c1bec3c966d095bc") (:url . "http://github.com/greduan/emacs-theme-gruvbox"))]) (grunt . [(20160316 828) ((dash (2 9 0)) (ansi-color (3 4 2)) (emacs (24 3))) "Some glue to stick Emacs and Gruntfiles together" single ((:commit . "4c269e2738658643ec2ed9ef61a2a3d71b08d304") (:keywords "convenience" "grunt") (:url . "https://github.com/gempesaw/grunt.el"))]) (gruber-darker-theme . [(20180529 12) nil "Gruber Darker color theme for Emacs 24." single ((:commit . "c7687ec0511941db1371dcd70b31061d74aa5668") (:url . "http://github.com/rexim/gruber-darker-theme"))]) (groovy-mode . [(20180601 738) ((s (1 12 0)) (emacs (24 3)) (dash (2 13 0))) "Major mode for Groovy source files" tar ((:commit . "a5afa3ac0a23c1bdebea014d06e5c30dde56ee8b") (:keywords "languages"))]) (groovy-imports . [(20161003 151) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Groovy imports" single ((:commit . "e56d7dda617555ec6205644d32ffddf2e1fa43d9") (:keywords "groovy") (:url . "http://www.github.com/mbezjak/emacs-groovy-imports"))]) (grizzl . [(20160818 37) ((cl-lib (0 5)) (emacs (24 3))) "Fast fuzzy search index for Emacs." single ((:commit . "1e917253ce2b846f0272b8356fad3dbff9cd513a") (:keywords "convenience" "usability") (:url . "https://github.com/grizzl/grizzl"))]) (grin . [(20110805 2358) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:keywords "python" "grin" "grind" "grep" "find") (:url . "http://bitbucket.org/dariusp686/emacs-grin"))]) (greymatters-theme . [(20150621 423) ((emacs (24))) "Emacs 24 theme with a light background." single ((:commit . "a7220a8c6cf18ccae2b76946b6f01188a7c9d5d1"))]) (grep-context . [(20180415 435) ((emacs (24 4)) (dash (2 12 0)) (cl-lib (0 5 0))) "Increase context in compilation and grep buffers" single ((:commit . "4c63d0f2654dee1e249c2054d118d674a757bd45") (:keywords "convenience" "search" "grep" "compile") (:url . "https://github.com/mkcms/grep-context"))]) (grep-a-lot . [(20131006 647) nil "manages multiple search results buffers for grep.el" single ((:commit . "9f9f645b9e308a0d887b66864ff97d0fca1ba4ad") (:keywords "tools" "convenience" "search") (:url . "https://github.com/ZungBang/emacs-grep-a-lot"))]) (gregorio-mode . [(20170705 751) nil "Gregorio Mode for .gabc files" single ((:commit . "736fd3d05fb67f707cca1a7ce24e3ee7ca5e9567") (:keywords "gregorio" "chant") (:url . "https://jsrjenkins.github.io/gregorio-mode/"))]) (green-screen-theme . [(20171130 234) nil "A nice color theme for those who miss green CRTs" single ((:commit . "c348ea0adf0e6ae99294a05be183a7b425a4bab0") (:keywords "faces" "theme") (:url . "https://github.com/rbanffy/green-screen-emacs"))]) (green-phosphor-theme . [(20150515 747) nil "A light color theme with muted, autumnal colors." single ((:commit . "fa42f598626adfdc5450e5c380fa2d5df6110f28") (:keywords "color" "theme") (:url . "http://github.com/aalpern/emacs-color-theme-green-phosphor"))]) (green-is-the-new-black-theme . [(20180322 1903) nil "A cool and minimalist green blackened theme engine" single ((:commit . "8a03687a2b8b55c5dc7f099086019278d505d8d8") (:keywords "faces" "themes") (:url . "https://github.com/fredcamps/green-is-the-new-black-emacs"))]) (grayscale-theme . [(20171005 102) nil "A simple grayscale theme" single ((:commit . "53ad50e10e68f2f076ebfc96e10ecef7a932d38d") (:keywords "lisp") (:url . "https://github.com/belak/emacs-grayscale-theme"))]) (grass-mode . [(20170503 800) ((cl-lib (0 2)) (dash (2 8 0))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(20131001 834) nil "HTTP request lib with flexible callback dispatch" single ((:commit . "fbd0f9a51139973d35e4014855964fa435e8ecaf") (:url . "http://www.github.com/leathekd/grapnel"))]) (graphviz-dot-mode . [(20171103 127) nil "Mode for the dot-language used by graphviz (att)." single ((:commit . "c456a2b65c734089e6c44e87209a5a432a741b1a") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att") (:url . "http://ppareit.github.com/graphviz-dot-mode/"))]) (graphql-mode . [(20180303 1558) ((emacs (24 3))) "Major mode for editing GraphQL schemas" single ((:commit . "36b1a4ed9fe78ccd1f386111644e69a5424a1a7b") (:keywords "languages"))]) (graphene-meta-theme . [(20161204 807) nil "Integrated theming for common packages" single ((:commit . "62cc73fee31f1bd9474027b83a249feee050271e") (:keywords "defaults") (:url . "https://github.com/rdallasgray/graphene"))]) (graphene . [(20180529 412) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-completing-read+ (4 3)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 8 0)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar ((:commit . "cc8477fcfb7771ea4e5bbaf3c01f9e679234c1c1"))]) (grandshell-theme . [(20180605 2217) nil "Dark color theme for Emacs > 24 with intensive colors." tar ((:commit . "0ed8e4273607dd4fcaa742b4097259233b09eda6"))]) (grails-projectile-mode . [(20160327 624) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar ((:commit . "8efca50ce92b556fe9d467b157d7aec635bcc017") (:keywords "grails" "projectile") (:url . "https://github.com/yveszoundi/grails-projectile-mode"))]) (grails-mode . [(20160504 211) nil "minor-mode that adds some Grails project management to a grails project" single ((:commit . "a5afa3ac0a23c1bdebea014d06e5c30dde56ee8b") (:keywords "languages") (:url . "http://blog.wolfman.com"))]) (grails . [(20160416 2336) ((emacs (24))) "Minor mode for Grails projects" single ((:commit . "fa638abe5c37f3f8af4fcd32f212453185ce50b1") (:url . "https://github.com/lifeisfoo/emacs-grails"))]) (gradle-mode . [(20150313 1205) ((s (1 8 0))) "Gradle integration with Emacs' compile" single ((:commit . "e4d665d5784ecda7ddfba015f07c69be3cfc45f2") (:keywords "gradle") (:url . "http://github.com/jacobono/emacs-gradle-mode"))]) (grab-x-link . [(20180205 346) ((emacs (24)) (cl-lib (0 5))) "Grab links from X11 apps and insert into Emacs" single ((:commit . "d19f0c0da0ddc55005a4c1cdc2b8c5de8bea1e8c") (:keywords "hyperlink") (:url . "https://github.com/xuchunyang/grab-x-link"))]) (grab-mac-link . [(20180328 745) ((emacs (24))) "Grab link from Mac Apps and insert it into Emacs" single ((:commit . "35edb57d136c2a9726fd14e6a59cce4fc0248771") (:keywords "mac" "hyperlink") (:url . "https://github.com/xuchunyang/grab-mac-link.el"))]) (gpastel . [(20180419 2350) ((emacs (24 3))) "Integrates GPaste with the kill-ring" single ((:commit . "ae11a0ae58577321605c338809fc5ae29b38fc72") (:keywords "tools") (:url . "https://gitlab.petton.fr/DamienCassou/desktop-environment"))]) (govet . [(20170808 1024) nil "linter/problem finder for the Go source code" single ((:commit . "1c05817cf8b96589076c7ac4e52ee58a860a0cbf") (:url . "https://godoc.org/golang.org/x/tools/cmd/vet"))]) (govc . [(20180524 1323) ((emacs (24 3)) (dash (1 5 0)) (s (1 9 0)) (magit-popup (2 0 50)) (json-mode (1 6 0))) "Interface to govc for managing VMware ESXi and vCenter" single ((:commit . "8d973c31513ae5f16bdcf5d88c1b8ae2267bc63d") (:keywords "convenience") (:url . "https://github.com/vmware/govmomi/tree/master/govc/emacs"))]) (goto-last-change . [(20150109 1023) nil "Move point through buffer-undo-list positions" single ((:commit . "58b0928bc255b47aad318cd183a5dce8f62199cc") (:keywords "convenience") (:url . "https://github.com/camdez/goto-last-change.el"))]) (goto-gem . [(20140729 1145) ((s (1 9 0))) "Open dired in gem directory" single ((:commit . "e3206f11f48bb7e798514a4ca2c2f60649613e5e") (:keywords "gemfile" "convenience"))]) (goto-chg . [(20180105 1033) nil "goto last change" single ((:commit . "e5b38e4e1378f6ea48fa9e8439f49c2998654aa4") (:keywords "convenience" "matching") (:url . "https://github.com/emacs-evil/goto-chg"))]) (gotham-theme . [(20171013 1216) nil "A very dark Emacs color theme." single ((:commit . "5e97554d1f9639698faedb0660e63694be33bd84") (:url . "https://github.com/wasamasa/gotham-theme"))]) (gotest . [(20180617 633) ((emacs (24 3)) (s (1 11 0)) (f (0 19 0)) (go-mode (1 5 0))) "Launch GO unit tests" single ((:commit . "4b21b86c07a1597e5e3ca795603787906695ee1b") (:keywords "languages" "go" "tests") (:url . "https://github.com/nlamirault/gotest.el"))]) (gorepl-mode . [(20170905 245) ((emacs (24)) (s (1 11 0)) (f (0 19 0)) (hydra (0 13 0))) "Go REPL Interactive Development in top of Gore" single ((:commit . "bbd27f6a0a77f484e2a3f082d70dc69da63ae52a") (:keywords "languages" "go" "golang" "gorepl") (:url . "http://www.github.com/manute/gorepl-mode"))]) (gore-mode . [(20151123 1127) ((go-mode (1 0 0))) "Simple mode for gore, a command-line evaluator for golang." single ((:commit . "94d7f3e99104e06167967c98fdc201049c433c2d") (:keywords "go" "repl"))]) (goose-theme . [(20160828 545) ((emacs (24 1))) "A gray color theme" single ((:commit . "acd017b50ab25a75fd1331eb3de66467e2042e9c") (:url . "https://github.com/thwg/goose-theme"))]) (google-translate . [(20170713 119) nil "Emacs interface to Google Translate." tar ((:commit . "d8b84a8359fcc697114d1298840e9a45b111c974"))]) (google-this . [(20170810 515) ((emacs (24 1))) "A set of functions and bindings to google under point." single ((:commit . "8a2e3ca5da6a8c89bfe99a21486c6c7db125dc84") (:keywords "convenience" "hypermedia") (:url . "http://github.com/Malabarba/emacs-google-this"))]) (google-maps . [(20171002 734) ((emacs (24 3))) "Access Google Maps from Emacs" tar ((:commit . "c0e5dccfdc9f7f77ff8f29177547be47833d7156") (:keywords "comm") (:url . "https://julien.danjou.info/projects/emacs-packages#google-maps"))]) (google-contacts . [(20171027 1033) ((oauth2 (0 10)) (cl-lib (0 5))) "Support for Google Contacts in Emacs" tar ((:commit . "a40389bae006ae094aeb1a39fae9891ca687c0fa") (:keywords "comm") (:url . "http://julien.danjou.info/projects/emacs-packages#google-contacts"))]) (google-c-style . [(20180130 936) nil "Google's C/C++ style for c-mode" single ((:commit . "ab48617e00be9d111804bd3715dd7b5f5732c9a3") (:keywords "c" "tools"))]) (google . [(20140416 1048) nil "Emacs interface to the Google API" single ((:commit . "3b3189a8b201c8d36fed6e61496274e530dd40bd") (:keywords "comm" "processes" "tools"))]) (gom-mode . [(20131007 1953) nil "Major mode for Gomfile" single ((:commit . "972e33df1d38ff323bc97de87477305826013701") (:url . "https://github.com/syohex/emacs-gom-mode"))]) (golint . [(20180221 1215) nil "lint for the Go source code" single ((:commit . "06c8688daad7faa9da5a0c2f163a3d14aac986ca") (:url . "https://github.com/golang/lint"))]) (goldendict . [(20180121 120) ((emacs (24 4)) (cl-lib (0 5))) "query word smartly with goldendict.el" single ((:commit . "1aac19daaec811deb9afe45eea4929309c09ac8b") (:keywords "dict" "goldendict") (:url . "https://github.com/stardiviner/goldendict.el"))]) (golden-ratio-scroll-screen . [(20170223 1829) nil "Scroll half screen down or up, and highlight current line" single ((:commit . "44e947194d3e5cbe0fd2f3c4886a4e6e1a0c0791") (:keywords "scroll" "screen" "highlight") (:url . "https://github.com/jixiuf/golden-ratio-scroll-screen"))]) (golden-ratio . [(20150819 420) nil "Automatic resizing of Emacs windows to the golden ratio" single ((:commit . "72b028808b41d23fa3f7e8c0d23d2c475e7b46ae") (:keywords "window" "resizing"))]) (gold-mode . [(20140606 1906) ((sws-mode (0))) "Major mode for editing .gold files" single ((:commit . "6d3aa59602b1b835495271c8c9741ac344c2eab1") (:keywords "golang" "template" "gold") (:url . "https://github.com/yuutayamada/gold-mode-el"))]) (godoctor . [(20180710 1452) nil "Frontend for godoctor" single ((:commit . "4b45ff3d0572f0e84056e4c3ba91fcc178199859") (:keywords "go" "golang" "refactoring") (:url . "https://github.com/microamp/godoctor.el"))]) (god-mode . [(20180117 334) nil "God-like command entering minor mode" tar ((:commit . "344167ed9b4c212273dd056e7481cf1373b461d0") (:url . "https://github.com/chrisdone/god-mode"))]) (gobgen . [(20161020 823) ((emacs (24 4))) "Generate GObject descendants using a detailed form" single ((:commit . "ed2c2b0d217deae293096f3cf14aa492791ddd4f") (:keywords "gobject" "glib" "gtk" "helper" "utilities"))]) (go-tag . [(20180226 2011) ((emacs (24 0)) (go-mode (1 5 0))) "Edit Golang struct field tag" single ((:commit . "59b243f2fa079d9de9d56f6e2d94397e9560310a") (:keywords "tools") (:url . "https://github.com/brantou/emacs-go-tag"))]) (go-stacktracer . [(20150430 1442) nil "parse Go stack traces" single ((:commit . "a2ac6d801b389f80ca4e2fcc1ab44513a9e55976") (:keywords "tools") (:url . "https://github.com/samertm/go-stacktracer.el"))]) (go-snippets . [(20180112 2211) ((yasnippet (0 8 0))) "Yasnippets for go" tar ((:commit . "d437df148879566ffe7f2e503a3cf2602aa9fb28"))]) (go-scratch . [(20150809 2140) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single ((:commit . "3f68cbcce04f59eb8e83af109164731ec0454be0") (:keywords "languages" "go"))]) (go-rename . [(20180626 2348) ((go-mode (1 3 1))) "Integration of the 'gorename' tool into Emacs." single ((:commit . "7f87c32464d2eb22ac7a413cac741a89fbfdc740") (:keywords "tools"))]) (go-projectile . [(20170302 1705) ((projectile (0 10 0)) (go-mode (0)) (go-eldoc (0 16)) (go-rename (0)) (go-guru (0))) "Go add-ons for Projectile" single ((:commit . "4c449eae696d4e3a15078c336c98ea779da227ab") (:keywords "project" "convenience") (:url . "https://github.com/dougm/go-projectile"))]) (go-playground-cli . [(20160503 214) ((emacs (24)) (request (0 2 0)) (deferred (0 3 2)) (names (20151201 404)) (s (1 10 0)) (f (0 17 2)) (let-alist (1 0 4)) (cl-lib (0 5))) "Go Playground client tool" single ((:commit . "60beebd98e3930641d41cee0189c579626f223bc") (:url . "https://github.com/kosh04/go-playground-cli"))]) (go-playground . [(20170226 43) ((emacs (24)) (go-mode (1 4 0)) (gotest (0 13 0))) "Local Golang playground for short snippets." single ((:commit . "559d53bbc507394aaca3683325d17286637bf4f0") (:keywords "tools" "golang") (:url . "https://github.com/grafov/go-playground"))]) (go-mode . [(20180327 830) nil "Major mode for the Go programming language" single ((:commit . "7f87c32464d2eb22ac7a413cac741a89fbfdc740") (:keywords "languages" "go") (:url . "https://github.com/dominikh/go-mode.el"))]) (go-imports . [(20180709 2228) nil "Insert go import statement given package name" tar ((:commit . "d9950309c868aa46c45f8671413e53f97dc7fe0b") (:keywords "tools" "go" "import") (:url . "https://github.com/yasushi-saito/go-imports"))]) (go-impl . [(20170125 752) ((emacs (24 3)) (go-mode (1 3 0))) "impl integration for go-mode" single ((:commit . "69f0d0ef05771487e15abec500cd06befd171abf") (:url . "https://github.com/syohex/emacs-go-impl"))]) (go-guru . [(20180628 310) ((go-mode (1 3 1)) (cl-lib (0 5))) "Integration of the Go 'guru' analysis tool into Emacs." single ((:commit . "7f87c32464d2eb22ac7a413cac741a89fbfdc740") (:keywords "tools"))]) (go-gopath . [(20160705 334) ((cl-lib (0 5))) "Will guess GOPATH using gb and projectile." single ((:commit . "5172fc53f21edbf9347d5ee7d1d745da1ec88a15") (:url . "http://github.com/iced/go-gopath/"))]) (go-gen-test . [(20171022 2058) ((emacs (24 3)) (s (1 12))) "Generate tests for go code with gotests" single ((:commit . "44c202ac97e728e93a35cee028a0ea8dd6e4292c") (:keywords "languages") (:url . "https://github.com/s-kostyaev/go-gen-test"))]) (go-fill-struct . [(20171224 1931) ((emacs (24))) "Fill struct for golang." single ((:commit . "a613d0b378473eef39e8fd5724abe790aea84321") (:keywords "tools") (:url . "https://github.com/s-kostyaev/go-fill-struct"))]) (go-errcheck . [(20160722 1743) nil "errcheck integration for go-mode" single ((:commit . "9db21eccecedc2490793f176246094167164af31"))]) (go-eldoc . [(20170305 627) ((emacs (24 3)) (go-mode (1 0 0))) "eldoc for go-mode" single ((:commit . "cbbd2ea1e94a36004432a9ac61414cb5a95a39bd") (:url . "https://github.com/syohex/emacs-go-eldoc"))]) (go-dlv . [(20160517 1346) ((go-mode (1 3 1))) "Go Delve - Debug Go programs interactively with the GUD." single ((:commit . "45a9e8a047c9995eb7c802268d96b3e527569f41") (:keywords "go" "debug" "debugger" "delve" "interactive" "gud") (:url . "https://github.com/benma/go-dlv.el/"))]) (go-direx . [(20150315 1843) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single ((:commit . "8f2206469328ee932c7f1892f5e1fb02dec98432") (:url . "https://github.com/syohex/emacs-go-direx"))]) (go-complete . [(20151015 228) ((go-mode (0)) (cl-lib (0 5))) "Native code completion for Go" single ((:commit . "e39efc356f6e19f17db3f3d2c81f28d38b31a55e") (:keywords "go" "golang" "completion") (:url . "https://github.com/vibhavp/go-complete"))]) (go-autocomplete . [(20170626 323) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single ((:commit . "9d1e0378d35b0527c9aef0d17c0913fc38d88b81") (:keywords "languages"))]) (go-add-tags . [(20161123 427) ((emacs (24 3)) (s (1 11 0))) "Add field tags for struct fields" single ((:commit . "54879945e46a0884c5f93d7fd6c866a9cdf401ac") (:url . "https://github.com/syohex/emacs-go-add-tags"))]) (go . [(20161110 1849) ((emacs (24))) "Play GO, translate and transfer between GO back ends" tar ((:commit . "ff45fb44d9cb6579d8511d8b6156ed0b34d5ac97") (:keywords "game" "go" "sgf") (:url . "http://eschulte.github.io/el-go/"))]) (gnus-x-gm-raw . [(20140610 31) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single ((:commit . "978bdfcecc8844465b71641c2e909fcdc66b22be") (:keywords "gnus") (:url . "https://github.com/aki2o/gnus-x-gm-raw"))]) (gnus-summary-ext . [(20180113 516) nil "Extra limit and process mark commands for the gnus summary buffer" single ((:commit . "025fd853fe9280ae696a89ec2c2cac9befd010aa") (:keywords "comm") (:url . "https://github.com/vapniks/gnus-summary-ext"))]) (gnus-select-account . [(20170721 2211) nil "Select an account before writing a mail in gnus" single ((:commit . "ddc8c135eeaf90f5b6692a033af2badae36e68ce") (:keywords "convenience") (:url . "https://github.com/tumashu/gnus-select-account"))]) (gnus-desktop-notify . [(20180623 838) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single ((:commit . "44ebe0241a19f4052cd427dff408206542aa3c8f") (:url . "http://www.thregr.org/~wavexx/software/gnus-desktop-notify.el/"))]) (gnus-alias . [(20150315 1742) nil "an alternative to gnus-posting-styles" single ((:commit . "9447d3ccb4c0e75d0468899cccff7aa249657bac") (:keywords "personality" "identity" "news" "mail" "gnus"))]) (gnuplot-mode . [(20171013 916) nil "Major mode for editing gnuplot scripts" single ((:commit . "601f6392986f0cba332c87678d31ae0d0a496ce7") (:keywords "gnuplot" "plotting") (:url . "https://github.com/mkmcc/gnuplot-mode"))]) (gnuplot . [(20141231 1337) nil "drive gnuplot from within emacs" tar ((:commit . "21f9046e3f5caad41b750b5c9cee02fa4fd20fb9") (:keywords "gnuplot" "plotting"))]) (gnu-apl-mode . [(20180129 2300) ((emacs (24))) "Integrate GNU APL with Emacs" tar ((:commit . "fa569827c916ed46e410e9f28e4b4d28f8567654") (:keywords "languages" "apl") (:url . "https://github.com/lokedhs/gnu-apl-mode"))]) (gntp . [(20141024 1950) nil "Growl Notification Protocol for Emacs" single ((:commit . "767571135e2c0985944017dc59b0be79af222ef5"))]) (gnomenm . [(20150316 1218) ((s (1 9 0)) (dash (2 3 0)) (kv (0 0 19))) "Emacs interface to Gnome nmcli command" single ((:commit . "9065cda44ffc9e06239b8189a0154d31314c3b4d") (:keywords "processes" "hardware") (:url . "http://github.com/nicferrier/emacs-nm"))]) (gnome-calendar . [(20161110 456) nil "Integration with the GNOME Shell calendar" single ((:commit . "489f9f15f7bb35696b1cc19db75b554ae8328df2") (:keywords "gnome" "calendar"))]) (gmpl-mode . [(20171031 1354) ((emacs (24))) "Major mode for editing GMPL(MathProg) files" single ((:commit . "c5d362169819ee8b8e8954145daee7e260c54921") (:keywords "extensions"))]) (gmail2bbdb . [(20170423 444) nil "import email and name into bbdb from vcard." single ((:commit . "a84fa385cfaec7fc5f1518c368e52722da139f99") (:keywords "vcard" "bbdb" "email" "contact" "gmail") (:url . "http://github.com/redguardtoo/gmail2bbdb"))]) (gmail-message-mode . [(20160627 1147) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ((:commit . "ec36672a9dc93c09ebe2f77597b498d11883d008") (:keywords "mail" "convenience" "emulation") (:url . "http://github.com/Bruce-Connor/gmail-message-mode"))]) (glsl-mode . [(20170927 736) nil "major mode for Open GLSL shader files" single ((:commit . "384968506cf25c5c2df61b32fdfdbd041e3bf651") (:keywords "languages") (:url . "http://artis.inrialpes.fr/~Xavier.Decoret/resources/glsl-mode/"))]) (glab . [(20180419 308) ((emacs (24 4)) (ghub (2 0))) "minuscule client library for the Gitlab API" single ((:commit . "4202c1f389a5ad0b7841be0ac8ab3cc3b6b77cb6") (:keywords "tools") (:url . "https://github.com/magit/ghub"))]) (gl-conf-mode . [(20170714 610) ((emacs (24 3))) "Mode for editing gitolite config files" single ((:commit . "9136a9b737e0a5b6471a91571d104c487c43f35b") (:keywords "git" "gitolite" "languages") (:url . "https://github.com/llloret/gitolite-emacs"))]) (gitter . [(20180122 56) ((emacs (24 4)) (let-alist (1 0 4))) "An Emacs Gitter client" single ((:commit . "11cb9b4b45f67bdc24f055a9bfac21d2bd19ea1a") (:keywords "gitter" "chat" "client" "internet") (:url . "https://github.com/xuchunyang/gitter.el"))]) (gitpatch . [(20170721 2110) ((emacs (24 3))) "Git-format patch toolkit" single ((:commit . "577d5adf65c8133caa325c10e89e1e2fc323c907") (:keywords "convenience") (:url . "https://github.com/tumashu/gitpatch"))]) (gitolite-clone . [(20160609 1655) ((dash (2 10 0)) (s (1 9 0)) (pcache (0 3 1)) (emacs (24))) "Clone gitolite repositories from a completing list" single ((:commit . "d8a4c2875c984e51137c980b5773f42703602721") (:keywords "gitolite" "clone" "git") (:url . "https://github.com/IvanMalison/gitolite-clone"))]) (gitlab-ci-mode-flycheck . [(20180604 1504) ((emacs (25)) (flycheck (31)) (gitlab-ci-mode (1))) "Flycheck support for ‘gitlab-ci-mode’" single ((:commit . "30ea0eab74b24818f187242b079845785035e967") (:keywords "tools" "vc" "convenience") (:url . "https://gitlab.com/joewreschnig/gitlab-ci-mode-flycheck/"))]) (gitlab-ci-mode . [(20180604 1503) ((emacs (25)) (yaml-mode (0 0 12))) "mode for editing GitLab CI files" single ((:commit . "b9fd692d27351e959c4d272a2149def63ef1c00c") (:keywords "tools" "vc") (:url . "https://gitlab.com/joewreschnig/gitlab-ci-mode/"))]) (gitlab . [(20180312 947) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar ((:commit . "68318aca3206d50701039c9aae39734ca29a49f9") (:keywords "gitlab") (:url . "https://github.com/nlamirault/emacs-gitlab"))]) (gitignore-templates . [(20180327 626) ((emacs (24 3))) "Access GitHub .gitignore templates" single ((:commit . "b0705b8de4cbdd631c64c4e0024d62ba4ad68052") (:keywords "tools") (:url . "https://github.com/xuchunyang/gitignore-templates.el"))]) (gitignore-mode . [(20180318 1256) nil "Major mode for editing .gitignore files" single ((:commit . "b08ac12f09a6cfe967ef70dad3f22430da4fbdab") (:keywords "convenience" "vc" "git") (:url . "https://github.com/magit/git-modes"))]) (github-theme . [(20170630 1501) nil "The GitHub color theme for Emacs." single ((:commit . "29f00a51d949a248a5f6355a97131e216747c797") (:url . "https://github.com/philiparvidsson/GitHub-Theme-for-Emacs"))]) (github-stars . [(20180328 433) ((emacs (25 1)) (ghub (2 0 0))) "Browse your Github Stars" single ((:commit . "15cbf15cdd3fbd2139b5c128a173bb8f6a4ef496") (:keywords "tools") (:url . "https://github.com/xuchunyang/github-stars.el"))]) (github-search . [(20170823 2023) ((magit (0 8 1)) (gh (1 0 0))) "Clone repositories by searching github" single ((:commit . "c5fa1d9f8f9bcf201fa31478a6f5e02ed5ac086b") (:keywords "github" "search" "clone" "api" "gh" "magit" "vc" "tools") (:url . "https://github.com/IvanMalison/github-search"))]) (github-pullrequest . [(20170115 2216) ((emacs (24 4)) (request (0 2 0)) (dash (2 11 0)) (magit (2 10 0))) "Create and fetch Github Pull requests with ease" single ((:commit . "6ae5c38b0fc15b638b5ba4490112d9822ce5e267") (:keywords "tools") (:url . "https://github.com/jakoblind/github-pullrequest"))]) (github-notifier . [(20180420 2016) ((emacs (24))) "Displays your GitHub notifications unread count in mode-line" single ((:commit . "274f3812926ea371346f639fcee98066f6e8c96f") (:keywords "github" "mode-line") (:url . "https://github.com/xuchunyang/github-notifier.el"))]) (github-modern-theme . [(20171109 451) nil "The GitHub color theme for Emacs." single ((:commit . "a7e7b8e5e9c122138e79e837caf9b7299e748d44") (:url . "https://github.com/philiparvidsson/GitHub-Theme-for-Emacs"))]) (github-issues . [(20160616 1141) ((emacs (24))) "Functions and modes for managing GitHub projects' issues" single ((:commit . "816f7712b0eb05bffec0add3507302862d2629c4") (:keywords "github" "issues") (:url . "http://inkel.github.com/github-issues.el/"))]) (github-elpa . [(20180704 2247) ((package-build (1 0)) (commander (0 7 0)) (git (0 1 1))) "Build and publish ELPA repositories with GitHub Pages" tar ((:commit . "abe92cc25c9d75dab4f8bcf0eccafdd8a26774d6") (:url . "https://github.com/10sr/github-elpa"))]) (github-clone . [(20160622 2010) ((gh (0 7 2)) (magit (2 1 0)) (emacs (24 4))) "Fork and clone github repos" single ((:commit . "467b40ca60a6c26257466ebc43c74414df7f19cc") (:keywords "vc" "tools") (:url . "https://github.com/dgtized/github-clone.el"))]) (github-browse-file . [(20160205 627) ((cl-lib (0 5))) "View the file you're editing on GitHub" single ((:commit . "9742a5183af853788c6ecb83fb7ee0b00d1675ac") (:keywords "convenience" "vc" "git" "github") (:url . "https://github.com/osener/github-browse-file"))]) (gitconfig-mode . [(20180318 1256) nil "Major mode for editing .gitconfig files" single ((:commit . "b08ac12f09a6cfe967ef70dad3f22430da4fbdab") (:keywords "convenience" "vc" "git") (:url . "https://github.com/magit/git-modes"))]) (gitconfig . [(20130718 235) nil "Emacs lisp interface to work with git-config variables" single ((:commit . "7612a37ca14009cac8fb8d6b6f54adad739a5741") (:keywords "git" "gitconfig" "git-config"))]) (gitattributes-mode . [(20180318 1256) nil "Major mode for editing .gitattributes files" single ((:commit . "b08ac12f09a6cfe967ef70dad3f22430da4fbdab") (:keywords "convenience" "vc" "git") (:url . "https://github.com/magit/git-modes"))]) (git-wip-timemachine . [(20150408 306) ((s (1 9 0))) "Walk through git-wip revisions of a file" single ((:commit . "ed4c7931a5f5233bf3e358b1e81647d063526460") (:keywords "git") (:url . "https://github.com/itsjeyd/git-wip-timemachine"))]) (git-timemachine . [(20180607 120) ((emacs (24 3))) "Walk through git revisions of a file" single ((:commit . "90a980578249c102da3e904fccdc9a2a5a0e7bcc") (:keywords "git") (:url . "https://github.com/pidu/git-timemachine"))]) (git-ps1-mode . [(20180413 247) nil "Global minor-mode to print __git_ps1" single ((:commit . "6a06bf57cbe614ab26032b153d3dcf4fb4bfa7ee") (:keywords "utility" "mode-line" "git") (:url . "https://github.com/10sr/git-ps1-mode-el"))]) (git-msg-prefix . [(20180118 646) ((emacs (24)) (s (1 10 0)) (dash (2 9 0))) "Insert commit message prefix (issue number)" single ((:commit . "848f2c7475f5e4937b09f55e85ea89a3be5f8588") (:keywords "vc" "tools") (:url . "http://github.com/kidd/git-msg-prefix.el"))]) (git-messenger . [(20170101 2040) ((emacs (24 3)) (popup (0 5 0))) "Pop up last commit information of current line" single ((:commit . "83815915eb8c1cb47443ff34bca3fecf7d2edf3a") (:url . "https://github.com/syohex/emacs-git-messenger"))]) (git-link . [(20180708 943) ((emacs (24 3))) "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single ((:commit . "efd14ab5f17f5942d25e165210447f3983f3250e") (:keywords "git" "vc" "github" "bitbucket" "gitlab" "convenience") (:url . "http://github.com/sshaw/git-link"))]) (git-lens . [(20180328 717) ((emacs (24 4))) "Show new, deleted or modified files in branch" single ((:commit . "ea49e2e005af977a08331f8caa8f64d102b3b932") (:keywords "vc" "convenience") (:url . "https://github.com/pidu/git-lens"))]) (git-io . [(20180317 1052) ((emacs (24 4))) "git.io integration" single ((:commit . "48753acba73b48b997bb678fb5e2a938ae63b5d6") (:keywords "convenience" "files") (:url . "https://github.com/tejasbubane/emacs-git-io"))]) (git-gutter-fringe . [(20170112 2133) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single ((:commit . "16226caab44174301f1659f7bf8cc67a76153445") (:url . "https://github.com/syohex/emacs-git-gutter-fringe"))]) (git-gutter-fringe+ . [(20140729 403) ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) "Fringe version of git-gutter+.el" single ((:commit . "7a2f49d2455a3a872e90e5f7dd4e6b27f1d96cfc") (:url . "https://github.com/nonsequitur/git-gutter-fringe-plus"))]) (git-gutter . [(20161105 656) ((emacs (24 3))) "Port of Sublime Text plugin GitGutter" single ((:commit . "00c05264af046b5ce248e5b0bc42f117d9c27a09") (:url . "https://github.com/syohex/emacs-git-gutter"))]) (git-gutter+ . [(20151204 923) ((git-commit (0)) (dash (0))) "Manage Git hunks straight from the buffer" single ((:commit . "b7726997806d9a2da9fe84ff00ecf21d62b6f975") (:keywords "git" "vc") (:url . "https://github.com/nonsequitur/git-gutter-plus"))]) (git-dwim . [(20170126 414) nil "Context-aware git commands such as branch handling" single ((:commit . "485c732130686c2f28a026e385366006435394b9") (:keywords "git" "tools" "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/git-dwim.el"))]) (git-commit-insert-issue . [(20171102 1141) ((projectile (0)) (s (0)) (github-issues (0)) (gitlab (0)) (bitbucket (0))) "Get issues list when typing \"Fixes #\"" single ((:commit . "f986923b04b587206ce7ee8e0c456768600e8be7") (:keywords "git" "github" "gitlab" "bitbucket" "commit" "issues") (:url . "https://gitlab.com/emacs-stuff/git-commit-insert-issue/"))]) (git-commit . [(20180713 1444) ((emacs (25 1)) (dash (20180413)) (with-editor (20180414))) "Edit Git commit messages" single ((:commit . "2196dc601b8330ae14fb040e55461ade865fd208") (:keywords "git" "tools" "vc") (:url . "https://github.com/magit/magit"))]) (git-command . [(20160111 503) ((term-run (0 1 4)) (with-editor (2 3 1))) "Yet another Git interface" single ((:commit . "dce465ca1cd80e16df0f8dce8e427a76e9edc3b7") (:keywords "utility" "git") (:url . "https://github.com/10sr/git-command-el"))]) (git-blamed . [(20161028 1226) nil "Minor mode for incremental blame for Git" single ((:commit . "cef196abf398e2dd11f775d1e6cd8690567408aa") (:keywords "git" "version control" "release management"))]) (git-auto-commit-mode . [(20161229 817) nil "Emacs Minor mode to automatically commit and push" single ((:commit . "2c8197e5d7813734d6a49f9b9c0b227b7ae022a8") (:keywords "vc") (:url . "http://projects.ryuslash.org/git-auto-commit-mode/"))]) (git-attr . [(20180204 15) ((emacs (24 3))) "Git attributes of buffer file" tar ((:commit . "c03078637a00ea301cbcc7ae301ae928b10af889") (:keywords "vc") (:url . "https://github.com/arnested/emacs-git-attr"))]) (git-annex . [(20180427 856) nil "Mode for easy editing of git-annex'd files" single ((:commit . "ebdb44aef1883f1b2b8058e05d30fb9315b03707") (:keywords "files" "data" "git" "annex") (:url . "https://github.com/jwiegley/git-annex-el"))]) (git . [(20140128 241) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single ((:commit . "a3396a7027a7d986598c6a2d6d5599bac918f3da") (:keywords "git") (:url . "http://github.com/rejeep/git.el"))]) (gist . [(20171127 2006) ((emacs (24 1)) (gh (0 10 0))) "Emacs integration for gist.github.com" single ((:commit . "314fe6ab80fae35b95f0734eceb82f72813b6f41") (:keywords "tools") (:url . "https://github.com/defunkt/gist.el"))]) (gildas-mode . [(20150919 1501) ((polymode (0)) (emacs (24 3))) "Major mode for Gildas" single ((:commit . "23e8a2e6066ff74af592de6d5d0d858442e2bf8a") (:keywords "languages" "gildas") (:url . "https://github.com/smaret/gildas-mode"))]) (gift-mode . [(20180530 535) nil "major mode for editing GIFT format quizzes" single ((:commit . "b0441ae6e02f343be3b611a2d4b40495ecd932f0") (:url . "https://github.com/csrhodes/gift-mode"))]) (gif-screencast . [(20180616 1230) ((emacs (25 1))) "One-frame-per-action GIF recording" single ((:commit . "12b25442b97b84abae74ecb5190a9d14ff7cfe5a") (:keywords "multimedia" "screencast") (:url . "https://gitlab.com/ambrevar/emacs-gif-screencast"))]) (ghub . [(20180715 1159) ((emacs (24 4)) (let-alist (1 0 5))) "minuscule client library for the Github API" tar ((:commit . "4202c1f389a5ad0b7841be0ac8ab3cc3b6b77cb6") (:keywords "tools") (:url . "https://github.com/magit/ghub"))]) (ghub+ . [(20180602 1545) ((emacs (25)) (ghub (2 0)) (apiwrap (0 5))) "a thick GitHub API client built on ghub" single ((:commit . "52acf79f59e5807bd1825affd79808db709e283a") (:keywords "extensions" "multimedia" "tools") (:url . "https://github.com/vermiculus/ghub-plus"))]) (ghq . [(20160803 857) nil "Ghq interface for emacs" single ((:commit . "aae4b8cb22fd6c24d2c9e3962c7e8e9dac6d9825") (:keywords "ghq"))]) (ghost-blog . [(20171023 42) ((markdown-mode (1 0))) "A package to manage Ghost blog" single ((:commit . "71b358643cc9a2db1bf752281ff94aba9b59e4cc") (:keywords "ghost" "blog") (:url . "https://github.com/javaguirre/ghost-blog"))]) (gherkin-mode . [(20171224 553) nil "An emacs major mode for editing gherkin files." single ((:commit . "0313492e7da152f0aa73ddf96c0287ded8f51253") (:keywords "languages"))]) (ghci-completion . [(20151125 457) ((emacs (24 1)) (cl-lib (0 5))) "Completion for GHCi commands in inferior-haskell buffers" single ((:commit . "c47e23d585d2a3c7b13aac163693fdc4f2bb90e5") (:keywords "convenience"))]) (ghc-imported-from . [(20141124 1132) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single ((:commit . "fcff08628a19f5d26151564659218cc677779b79") (:keywords "languages"))]) (ghc . [(20180121 418) ((haskell-mode (13 0))) "Sub mode for Haskell mode" tar ((:commit . "a9fdf4667a32e392068bc80b2fabc05a10557f44"))]) (gh-md . [(20151207 940) ((emacs (24))) "Render markdown using the Github api" single ((:commit . "693cb0dcadff70e813e1a9d303d227aff7898557") (:keywords "convenience") (:url . "https://github.com/emacs-pe/gh-md.el"))]) (gh . [(20180308 1338) ((emacs (24 3)) (pcache (0 4 1)) (logito (0 1)) (marshal (0 6 3))) "A GitHub library for Emacs" tar ((:commit . "f029fc11f345ef04ab62ee91c38657e29c462fea"))]) (ggtags . [(20180418 657) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:commit . "bf263afd377992f7c5d9e8f727bd381e74feb327") (:keywords "tools" "convenience") (:url . "https://github.com/leoliu/ggtags"))]) (ggo-mode . [(20130524 443) nil "Gengetopt major mode" single ((:commit . "e326899d9ed8217c7a4ea6cfdc4dd7aea61d6c1b") (:keywords "extensions" "convenience" "local"))]) (gf . [(20180606 1455) ((s (1 0)) (ht (2 0))) "Major mode for editing GF code" single ((:commit . "a04a600d979e298d6ad91980c83781a2ea9defe8") (:keywords "languages") (:url . "https://github.com/GrammaticalFramework/gf-emacs-mode"))]) (gerrit-download . [(20150714 708) ((emacs (24 0)) (magit (2 1 0))) "Show gerrit reviews in a diff buffer." single ((:commit . "d568acc7c5935188c9bc19ba72719a6092d9f6fd") (:keywords "tools" "gerrit" "git") (:url . "https://github.com/chmouel/gerrit-download.el"))]) (german-holidays . [(20161011 13) nil "German holidays for Emacs calendar" single ((:commit . "d7d540c229c1a8be68ee09fbda08fe3ea31b7d29") (:url . "https://github.com/rudolfochrist/german-holidays"))]) (genrnc . [(20140612 537) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((:commit . "da75b1966a73ad215ec2ced4522c25f4d0bf1f9a") (:keywords "xml") (:url . "https://github.com/aki2o/emacs-genrnc"))]) (general . [(20180628 1112) ((emacs (24 4)) (cl-lib (0 5))) "Convenience wrappers for keybindings." single ((:commit . "e690ef9e706f7eea071357520709ef5407a42159") (:keywords "vim" "evil" "leader" "keybindings" "keys") (:url . "https://github.com/noctuid/general.el"))]) (geiser . [(20180626 440) nil "GNU Emacs and Scheme talk to each other" tar ((:commit . "1bdd966a4fbe0c8bd5bcb04dad5213e47a1534e6") (:url . "http://www.nongnu.org/geiser/"))]) (geeknote . [(20160717 549) ((emacs (24))) "Use Evernote in Emacs through geeknote" single ((:commit . "8ed607c76864afcc9c338972ab093caf4501cbf8") (:keywords "evernote" "geeknote" "note" "emacs-evernote" "evernote-mode") (:url . "http://github.com/avendael/emacs-geeknote"))]) (geben-helm-projectile . [(20160610 1759) ((emacs (24)) (geben (0 26)) (helm-projectile (0 13 0))) "Integrate helm-projectile with geben" single ((:commit . "31ce0faca5dcc71924884f03fd5a7a25d00ccd9b") (:keywords "ahungry" "emacs" "geben" "helm" "projectile" "debug") (:url . "https://github.com/ahungry/geben-helm-projectile"))]) (geben . [(20170801 551) ((emacs (24 3)) (cl-lib (0 5))) "DBGp protocol frontend, a script debugger" tar ((:commit . "ec3f5e9376cf1ea5615990bd8c212543d57f033b") (:keywords "c" "comm" "tools") (:url . "https://github.com/ahungry/geben"))]) (gdscript-mode . [(20180117 2056) ((emacs (24 3))) "Major mode for editing Godot GDScript files" single ((:commit . "31af5283eaec207bc864022a28e2824132471eaf") (:keywords "languages") (:url . "https://github.com/AdamBark/gdscript-mode"))]) (gather . [(20141230 538) nil "Gather string in buffer." single ((:commit . "50809fbc22d70a1c724c2dd99ac5a1f818ffeb6b") (:keywords "matching" "convenience" "tools") (:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el"))]) (gap-mode . [(20160204 736) nil "Major mode for editing files in the GAP programing language." tar ((:keywords "gap") (:url . "https://bitbucket.org/gvol/gap-mode"))]) (gandalf-theme . [(20130809 247) nil "Gandalf color theme" single ((:commit . "4e472fc851431458537d458d09c1f5895e338536") (:keywords "color" "theme"))]) (gams-mode . [(20180416 206) ((emacs (24 3))) "Major mode for General Algebraic Modeling System (GAMS)." single ((:commit . "3022e9f8411628e6a210fb5843d858b15a7513f5") (:keywords "languages" "tools" "gams") (:url . "http://shirotakeda.org/en/gams/gams-mode/"))]) (gams-ac . [(20180423 226) ((emacs (24)) (auto-complete (1 0)) (gams-mode (4 0))) "auto-complete source file for GAMS mode" single ((:commit . "66d04ff36033f54205c19bc1d893e926d4dbf02e") (:keywords "languages" "tools" "gams-mode" "auto-complete") (:url . "https://github.com/ShiroTakeda/gams-ac"))]) (fzf . [(20180618 1845) ((emacs (24 4))) "A front-end for fzf." single ((:commit . "521d18933cb586337c4e34281bdc71ac07202c98") (:keywords "fzf" "fuzzy" "search") (:url . "https://github.com/bling/fzf.el"))]) (fyure . [(20130216 514) nil "An interface to fix Japanese hyoki-yure" tar ((:commit . "b6977f1eb148e8b63259f7233b55bb050e44d9b8") (:keywords "languages"))]) (fxrd-mode . [(20170728 1101) ((s (1 2))) "Major mode for editing fixed field width files" tar ((:commit . "18a603474abb5a786a8d9f20c283d5f7beed3540") (:keywords "convenience") (:url . "https://github.com/msherry/fxrd-mode"))]) (fwb-cmds . [(20180318 1519) nil "misc frame, window and buffer commands" single ((:commit . "90258a5c7dbbaa2ac227e0fb4ff6c7d5aec3628f") (:keywords "convenience") (:url . "https://github.com/tarsius/fwb-cmds"))]) (fvwm-mode . [(20160411 438) nil "A major mode for editing Fvwm configuration files" single ((:commit . "6832a1c1f68bf6249c3fd6672ea8e27dc7a5c79e") (:keywords "files") (:url . "https://github.com/theBlackDragon/fvwm-mode"))]) (fuzzy . [(20150729 2037) nil "Fuzzy Matching" single ((:commit . "534d723ad2e06322ff8d9bd0ba4863d243f698e7") (:keywords "convenience"))]) (futhark-mode . [(20180619 949) ((cl-lib (0 5))) "major mode for editing Futhark source files" single ((:commit . "f834d03aeef2230315e541646e375e6c38a6a10c") (:keywords "languages") (:url . "https://github.com/diku-dk/futhark"))]) (furl . [(20150508 2016) nil "Friendly URL retrieval" single ((:commit . "014438271e0ef27333dfcd599cb247f12a20d870"))]) (fuo . [(20180314 948) ((emacs (24 4))) "feeluown client." single ((:commit . "5318bef9d935b53031e6312652554920def69af2") (:keywords "feeluown" "multimedia" "unix") (:url . "http://github.com/cosven/emacs-fuo"))]) (function-args . [(20171031 1004) ((ivy (0 9 1))) "C++ completion for GNU Emacs" tar ((:commit . "609b25305670fff08d5e357298e7128e4f4e3497") (:url . "https://github.com/abo-abo/function-args"))]) (fullframe . [(20170816 303) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single ((:commit . "d6a5217f7f2a5a5edcb75140f3fa69b3a50f1cdd") (:keywords "fullscreen"))]) (full-ack . [(20140223 932) nil "a front-end for ack" single ((:commit . "761d846e105b150f8e6d13d7a8983f0248313a45") (:keywords "tools" "matching") (:url . "http://nschum.de/src/emacs/full-ack/"))]) (fuff . [(20170202 703) ((seq (2 3))) "Find files with findutils, recursively" single ((:commit . "278e849913df87bd8756c59382282d87474802c3") (:keywords "files" "project" "convenience") (:url . "https://github.com/joelmo/fuff"))]) (fuel . [(20180224 1411) ((cl-lib (0 2)) (emacs (24 2))) "Major mode for the Factor programming language." tar ((:commit . "3a5533dc442ae8f5e90abf152f89cfd813f2b6b8"))]) (fstar-mode . [(20180713 1329) ((emacs (24 3)) (dash (2 11)) (company (0 8 12)) (quick-peek (1 0)) (yasnippet (0 11 0)) (flycheck (30 0)) (company-quickhelp (2 2 0))) "Support for F* programming" tar ((:commit . "a42763cdd81d6520651dfaad7a7e8c7388bad54c") (:keywords "convenience" "languages") (:url . "https://github.com/FStarLang/fstar-mode.el"))]) (fsharp-mode . [(20180518 1120) ((company (0 8 0)) (company-quickhelp (1 2 0)) (popup (0 5 3)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0)) (flycheck (0 25))) "F# mode for Emacs" tar ((:commit . "68d2121a7317d90fe3794c9295d117f4aebd1438"))]) (fsbot-data-browser . [(20160921 833) nil "browse the fsbot database using tabulated-list-mode" single ((:commit . "6bca4f7de63e31839d2542f6c678b79931dec344") (:keywords "fsbot" "irc" "tabulated-list-mode") (:url . "http://github.com/benaiah/fsbot-data-browser"))]) (fringe-helper . [(20140620 1409) nil "helper functions for fringe bitmaps" single ((:commit . "ef4a9c023bae18ec1ddd7265f1f2d6d2e775efdd") (:keywords "lisp") (:url . "http://nschum.de/src/emacs/fringe-helper/"))]) (fringe-current-line . [(20140110 2011) nil "show current line on the fringe." single ((:commit . "0ef000bac76abae30601222e6f06c7d133ab4942") (:url . "http://github.com/kyanagi/fringe-current-line/raw/master/fringe-current-line.el"))]) (free-keys . [(20160726 1350) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single ((:commit . "edfd69dc369b2647447b7c28c7c1163b1ddf45b4") (:keywords "convenience") (:url . "https://github.com/Fuco1/free-keys"))]) (frecency . [(20170908 2331) ((emacs (25 1)) (a (0 1)) (dash (2 13 0))) "Library for sorting items by frequency and recency of access" single ((:commit . "31ef9ff4af1a4fed3dcc24ea74037feea8795c87") (:keywords "libraries" "recency" "recent" "frequency" "frequent") (:url . "http://github.com/alphapapa/frecency.el"))]) (framesize . [(20131017 1432) ((key-chord (0 5 20080915))) "change the size of frames in Emacs" single ((:commit . "f2dbf5d2513b2bc45f2085370a55c1754b6025da") (:keywords "frames") (:url . "http://github.com/nicferrier/emacs-framesize"))]) (frameshot . [(20180228 408) ((emacs (25 3))) "Take screenshots of a frame" single ((:commit . "4e7b252e9fd9227de8b25f384af2c855ec45279a") (:url . "https://github.com/tarsius/frameshot"))]) (frames-only-mode . [(20180114 1048) ((emacs (24 4)) (dash (2 13 0)) (s (1 11 0))) "Use frames instead of Emacs windows" single ((:commit . "0f42139a41e97bb0a2ebc320d41cec071c034ca0") (:keywords "frames" "windows") (:url . "https://github.com/davidshepherd7/frames-only-mode"))]) (frame-tag . [(20170110 1606) ((cl-lib (0 5))) "Minor mode that assigns a unique number to each frame for easy switching" single ((:commit . "73d6163568c7d32952175e663318b872f995a4e5") (:keywords "frame" "movement") (:url . "http://github.com/liangzan/frame-tag.el"))]) (frame-purpose . [(20180623 1757) ((emacs (25 1)) (dash (2 12)) (dash-functional (1 2 0))) "Purpose-specific frames" single ((:commit . "ef571eb64acb4fef5c5ab22bc1e87a0e6614efa4") (:keywords "buffers" "convenience" "frames") (:url . "http://github.com/alphapapa/frame-purpose.el"))]) (frame-mode . [(20170419 1427) ((s (1 9 0)) (emacs (24 4))) "Use frames instead of windows" single ((:commit . "fcdbafbda45758cd60ab3acb492fbbd692987a58") (:keywords "frames") (:url . "https://github.com/IvanMalison/frame-mode"))]) (frame-local . [(20180330 240) ((emacs (25 1))) "Variables local to a frame" single ((:commit . "7ee1106c3bcd4022f48421f8cb1ef4f995da816e") (:keywords "frames" "tools" "local" "lisp") (:url . "https://github.com/sebastiencs/frame-local"))]) (fraktur-mode . [(20160814 1927) ((cl-lib (0 5))) "Easily insert Unicode mathematical Fraktur characters" single ((:commit . "514baf5546aed12a0d9fa0fe66e87cdcc7843b08") (:keywords "unicode" "fraktur" "math" "mathematical") (:url . "https://github.com/grettke/fraktur-mode"))]) (fountain-mode . [(20180715 145) ((emacs (24 5))) "Major mode for screenwriting in Fountain markup" single ((:commit . "3f253598f2eb6c5eec71af967978a3ecf890240d") (:keywords "wp" "text") (:url . "https://github.com/rnkn/fountain-mode"))]) (fortune-cookie . [(20170407 1517) nil "Print a fortune in your scratch buffer." single ((:commit . "bad99a2cd090f6646c7ee1125b95dd98744939c6") (:keywords "fortune" "cowsay" "scratch" "startup") (:url . "https://github.com/andschwa/fortune-cookie"))]) (fortpy . [(20150715 1332) ((epc (0 1 0)) (auto-complete (1 4)) (python-environment (0 0 2)) (pos-tip (0 4 5))) "a Fortran auto-completion for Emacs" tar ((:commit . "c614517e9396ef7a78be3b8786fbf303879cf43b"))]) (forth-mode . [(20170527 1230) nil "Programming language mode for Forth" tar ((:commit . "522256d98d1a909983bcfd3ae20c65226d5929b6") (:keywords "languages" "forth") (:url . "http://github.com/larsbrinkhoff/forth-mode"))]) (format-sql . [(20150422 633) nil "Use format-sql to make your SQL readable in directly Emacs." single ((:commit . "97f475c245cd6c81a72a265678e2087cee66ac7b") (:url . "https://github.com/paetzke/format-sql.el"))]) (format-all . [(20180723 240) ((cl-lib (0 5))) "Auto-format C, C++, JS, Python, Ruby and 25 other languages" single ((:commit . "56887677a230b31a9212da1f37283b2e9b907bcb") (:keywords "languages" "util") (:url . "https://github.com/lassik/emacs-format-all-the-code"))]) (form-feed . [(20160102 1453) nil "Display ^L glyphs as horizontal lines" single ((:commit . "799ca3e72b20a59a755a094b8cead57f654f3170") (:keywords "faces") (:url . "https://github.com/wasamasa/form-feed"))]) (forest-blue-theme . [(20160627 142) ((emacs (24))) "Emacs theme with a dark background." single ((:commit . "58096ce1a25615d2bae806c3775bae3e2775019d"))]) (foreman-mode . [(20170725 722) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "View and manage Procfile-based applications" single ((:commit . "22b3bb13134b617870ed1e888af739f4818be929") (:keywords "foreman") (:url . "http://github.com/zweifisch/foreman-mode"))]) (foreign-regexp . [(20180224 321) nil "search and replace by foreign regexp." tar ((:commit . "2ec5c44f27c2396ee487aa0ed77ae47d143fa5aa") (:keywords "convenience" "emulations" "matching" "tools" "unix" "wp"))]) (forecast . [(20180429 1515) ((emacs (24 4))) "Weather forecasts" single ((:commit . "05f2655321f020fd4c069d1939f0902eaa837eb4") (:keywords "weather" "forecast") (:url . "https://cadadr.github.io/elisp/index.html#forecast-el"))]) (fontify-face . [(20180420 924) ((emacs (24))) "Fontify symbols representing faces with that face." single ((:commit . "fc3325c98427523d86f0b411e0515cec51ac3d8a") (:keywords "faces") (:url . "https://github.com/Fuco1/fontify-face"))]) (fontawesome . [(20170305 556) ((emacs (24 4))) "fontawesome utility" tar ((:commit . "a743f80bfd53767ca9ee32da34c5ca032172a480") (:url . "https://github.com/syohex/emacs-fontawesome"))]) (font-utils . [(20150806 1051) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single ((:commit . "9192d3f8ee6a4e75f34c3fed10378674cc2b11d3") (:keywords "extensions") (:url . "http://github.com/rolandwalker/font-utils"))]) (font-lock-studio . [(20170127 1251) ((emacs (24 3))) "interactive debugger for Font Lock keywords." single ((:commit . "12c35967b31233e06946c70627aa3152dacfe261") (:keywords "faces" "tools") (:url . "https://github.com/Lindydancer/font-lock-studio"))]) (font-lock-profiler . [(20170208 1208) ((emacs (24 3))) "Coverage and timing tool for font-lock keywords." single ((:commit . "6e096458416888a4f63cca0d6bc5965a052753c8") (:keywords "faces" "tools") (:url . "https://github.com/Lindydancer/font-lock-profiler"))]) (folding . [(20170925 838) nil "A folding-editor-like minor mode." single ((:commit . "3bf134fd1ecfa8767ab7020c25281ea5ce9968a2") (:keywords "tools"))]) (fold-this . [(20180224 40) nil "Just fold this region please" single ((:commit . "4fb509a4176e950d083a5321ad62742f2e9bcb7b") (:keywords "convenience"))]) (fold-dwim-org . [(20131203 551) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ((:commit . "c09bb2b46d65afbd1d0febc6fded7495be7a3037") (:keywords "folding" "emacs" "org-mode") (:url . "https://github.com/mlf176f2/fold-dwim-org"))]) (fold-dwim . [(20140208 837) nil "Unified user interface for Emacs folding modes" single ((:commit . "c46f4bb2ce91b4e307136320e72c28dd50b6cd8b") (:url . "http://www.dur.ac.uk/p.j.heslin/Software/Emacs"))]) (foggy-night-theme . [(20160209 708) ((emacs (24))) "Dark low contrast theme with soft and muted colors." single ((:commit . "60a12abdac29c2d913e1cf24485d0cc083e26093"))]) (focus-autosave-mode . [(20160519 1416) ((emacs (24 4))) "Automatically save files in focus-out-hook." single ((:commit . "e89ed22aa4dfc76e1b844b202aedd468ad58814a") (:keywords "convenience" "files" "frames" "mouse"))]) (focus . [(20171203 2103) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single ((:commit . "045ee6175e9340f873db03445c74ff9eefa35a27") (:url . "http://github.com/larstvei/Focus"))]) (fn . [(20170209 1804) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (dash-functional (1 2 0))) "Concise anonymous functions for Emacs Lisp" single ((:commit . "f685fd0c08ec3b1d1b9974b37e62edd78a000cb8") (:keywords "functional"))]) (fm-bookmarks . [(20170104 916) ((emacs (24 3)) (cl-lib (0 5))) "Use file manager bookmarks (eg Dolphin, Nautilus, PCManFM) in Dired" single ((:commit . "11dacfd16a926bfecba96a94c6b13e162c7717f7") (:keywords "files" "convenience") (:url . "http://github.com/kuanyui/fm-bookmarks.el"))]) (flyspell-popup . [(20170529 115) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single ((:commit . "29311849bfd253b9b689bf331860b4c4d3bd4dde") (:keywords "convenience") (:url . "https://github.com/xuchunyang/flyspell-popup"))]) (flyspell-lazy . [(20180224 1306) nil "Improve flyspell responsiveness using idle timers" single ((:commit . "3ebf68cc9eb10c972a2de8d7861cbabbbce69570") (:keywords "spelling") (:url . "http://github.com/rolandwalker/flyspell-lazy"))]) (flyspell-correct-popup . [(20180427 1135) ((flyspell-correct (0 4 0)) (popup (0 5 3))) "correcting words with flyspell via popup interface" single ((:commit . "0486912f57ac2ec70c472b776c63360462cb32d7") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct-ivy . [(20180427 1135) ((flyspell-correct (0 4 0)) (ivy (0 8 0))) "correcting words with flyspell via ivy interface" single ((:commit . "0486912f57ac2ec70c472b776c63360462cb32d7") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct-helm . [(20180427 1135) ((flyspell-correct (0 4 0)) (helm (1 9 0))) "correcting words with flyspell via helm interface" single ((:commit . "0486912f57ac2ec70c472b776c63360462cb32d7") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct . [(20180427 1135) nil "correcting words with flyspell via custom interface" tar ((:commit . "0486912f57ac2ec70c472b776c63360462cb32d7") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyparens . [(20140723 1146) nil "Check for unbalanced parens on the fly" tar ((:commit . "af9b8cfd647d0e5f97684d613dc2eea7cfc19398") (:keywords "faces" "convenience" "lisp" "matching" "parentheses" "parens"))]) (flymd . [(20160617 514) ((cl-lib (0 5))) "On the fly markdown preview" tar ((:commit . "84d5a68bcfed4a295952c33ffcd11e880978d9d7") (:keywords "markdown" "convenience") (:url . "https://github.com/mola-T/flymd"))]) (flymake-yaml . [(20130423 848) ((flymake-easy (0 1))) "A flymake handler for YAML" single ((:commit . "24cb5b744a1796e554e6dbfc6eeb237d06a00b10") (:keywords "yaml") (:url . "https://github.com/yasuyk/flymake-yaml"))]) (flymake-vala . [(20150325 2231) ((flymake-easy (0 1))) "A flymake handler for vala-mode files" single ((:commit . "c3674f461fc84fb0300cd3a562fb903a59782745") (:keywords "convenience" "vala") (:url . "https://github.com/daniellawrence/flymake-vala"))]) (flymake-solidity . [(20170804 2344) ((flymake-easy (0 10))) "A flymake handler for solidity using solc" single ((:commit . "48bfe9525f764d8a68cc0270905dbf45bfd00bb8") (:url . "https://github.com/kootenvp/flymake-solidity"))]) (flymake-shell . [(20170722 1846) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single ((:commit . "a16cf453056b9849cc7c912bb127fb0b08fc6dab") (:url . "https://github.com/purcell/flymake-shell"))]) (flymake-sass . [(20170722 1846) ((flymake-easy (0 1))) "Flymake handler for sass and scss files" single ((:commit . "2de28148e92deb93bff3d55fe14e7c67ac476056") (:url . "https://github.com/purcell/flymake-sass"))]) (flymake-rust . [(20170729 1439) ((flymake-easy (0 1))) "A flymake handler for rust-mode files" single ((:commit . "2f42d1f2dad73ec9de460eda6176e3ab25c446f0") (:url . "https://github.com/joaoxsouls/flymake-rust"))]) (flymake-ruby . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single ((:commit . "6c320c6fb686c5223bf975cc35178ad6b195e073") (:url . "https://github.com/purcell/flymake-ruby"))]) (flymake-python-pyflakes . [(20170722 1846) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single ((:commit . "1d65c26bf65a5dcbd29fcd967e2feb90e1e7a33d") (:url . "https://github.com/purcell/flymake-python-pyflakes"))]) (flymake-puppet . [(20170731 2254) ((flymake-easy (0 9))) "Flymake handler using puppet-lint" single ((:commit . "8a772395f4ccc59d883712ab53a92a17c1d9a429") (:url . "https://github.com/benprew/flymake-puppet"))]) (flymake-phpcs . [(20140712 2331) ((flymake-easy (0 9))) "making flymake work with PHP CodeSniffer" single ((:commit . "a4d383474e055e554aaf1cd617055d5d7181aa50") (:keywords "flymake" "phpcs" "php") (:url . "https://github.com/senda-akiha/flymake-phpcs/"))]) (flymake-php . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ((:commit . "c045d01e002ba5e09b05f40e25bf5068d02126bc") (:url . "https://github.com/purcell/flymake-php"))]) (flymake-perlcritic . [(20120328 114) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ((:commit . "edfaa86500ddfa8a6a6f51f5581a81a821277df6") (:url . "https://github.com/illusori/emacs-flymake-perlcritic"))]) (flymake-lua . [(20170128 1754) nil "Flymake for Lua" single ((:commit . "84589f20066921a5b79cf3a1f914a223a2552d2a") (:keywords "lua"))]) (flymake-less . [(20151110 2338) ((less-css-mode (0 15)) (flymake-easy (0 1))) "Flymake handler for LESS stylesheets (lesscss.org)" single ((:commit . "32d3c28a9a5c52b82d1741ff9d715013b6498421") (:keywords "languages"))]) (flymake-json . [(20180511 211) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single ((:commit . "ae58795f948402e987cda4c15f10354f8ec2d0fd") (:url . "https://github.com/purcell/flymake-json"))]) (flymake-jslint . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for javascript using jslint" single ((:commit . "8edb82be605542b0ef62d38d818adcdde335eecb") (:url . "https://github.com/purcell/flymake-jslint"))]) (flymake-jshint . [(20140319 1500) ((flymake-easy (0 8))) "making flymake work with JSHint" single ((:commit . "79dd554c227883c487db38ac111306c8d5382c95") (:keywords "flymake" "jshint" "javascript"))]) (flymake-hlint . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single ((:commit . "f910736b26784efc9a2fa29503f45c1f1dd0aa38") (:url . "https://github.com/purcell/flymake-hlint"))]) (flymake-haskell-multi . [(20170722 1846) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar ((:commit . "b564a94312259885b1380272eb867bf52a164020"))]) (flymake-haml . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for haml files" single ((:commit . "22a81e8484734552d461e7ae7305664dc244447e") (:url . "https://github.com/purcell/flymake-haml"))]) (flymake-google-cpplint . [(20140205 525) ((flymake-easy (0 9))) "Help to comply with the Google C++ Style Guide" single ((:commit . "905d32e84a27f18a78bec455ca930ab1ff9ae31e") (:keywords "flymake" "c" "c++") (:url . "https://github.com/senda-akiha/flymake-google-cpplint/"))]) (flymake-go . [(20150714 33) nil "A flymake handler for go-mode files" single ((:commit . "ae83761aa908c1a50ff34af04f00dcc46bca2ce9") (:keywords "go" "flymake") (:url . "https://github.com/robert-zaremba/flymake-go"))]) (flymake-gjshint . [(20130327 532) nil "A flymake handler for javascript using both jshint and gjslint" single ((:commit . "dc957c14cb060819585de8aedb330e24efa4b784") (:keywords "flymake" "javascript" "jshint" "gjslint"))]) (flymake-elixir . [(20130810 717) nil "A flymake handler for elixir-mode .ex files." single ((:commit . "3810566cffe35d04cc3f01e27fe397d68d52f802"))]) (flymake-easy . [(20140818 55) nil "Helpers for easily building flymake checkers" single ((:commit . "de41ea49503f71f997e5c359a2ad08df696c0147") (:keywords "convenience" "internal") (:url . "https://github.com/purcell/flymake-easy"))]) (flymake-cursor . [(20120322 1057) ((flymake (0 3))) "Show flymake messages in the minibuffer after delay" single ((:commit . "ecc539082c3fc9e91bba33d72c26989217411593") (:keywords "languages" "mode" "flymake") (:url . "https://github.com/illusori/emacs-flymake-cursor"))]) (flymake-css . [(20170722 1846) ((flymake-easy (0 1))) "Flymake support for css using csslint" single ((:commit . "de090163ba289910ceeb61b13368ce42d0f2dfd8") (:url . "https://github.com/purcell/flymake-css"))]) (flymake-cppcheck . [(20140415 557) ((flymake-easy (0 9))) "Flymake work with Cppcheck for C/C++" single ((:commit . "9554f504d425a04fa6a875f7e3179bc7cf07dd03") (:keywords "flymake" "cppcheck" "c" "c++") (:url . "https://github.com/senda-akiha/flymake-cppcheck/"))]) (flymake-coffee . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for coffee script" single ((:commit . "dee295acf30820ed15fe0de17137d50bc27fc80c") (:url . "https://github.com/purcell/flymake-coffee"))]) (flycheck-ycmd . [(20180207 843) ((emacs (24)) (dash (2 13 0)) (flycheck (0 22)) (ycmd (1 2)) (let-alist (1 0 5))) "flycheck integration for ycmd" single ((:commit . "fe35b7f2e3d9370941b9e537c9bc578d814acce2") (:url . "https://github.com/abingham/emacs-ycmd"))]) (flycheck-yang . [(20180312 1131) ((yang-mode (0 9 4)) (flycheck (0 18))) "YANG flycheck checker" single ((:commit . "47881fc42ef0163c47064b72b5d6dbef4f83d778"))]) (flycheck-yamllint . [(20170325 1035) ((flycheck (30))) "Flycheck integration for YAMLLint" single ((:commit . "c2b273d84f15bd03464d6722391e595d7c179a5c") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/krzysztof-magosa/flycheck-yamllint"))]) (flycheck-xcode . [(20180121 2251) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Apple's Xcode." single ((:commit . "6147ab777e2c08e4f5ffdbd85d3013ca700fa835") (:keywords "languages" "xcode") (:url . "https://github.com/jojojames/flycheck-xcode"))]) (flycheck-vale . [(20180308 2243) ((emacs (24 4)) (flycheck (0 22)) (let-alist (1 0 4))) "flycheck integration for vale" single ((:commit . "7777e0d4cf961b6ee6ae4ef917636121d18b3ee8") (:url . "https://github.com/abingham/flycheck-vale"))]) (flycheck-title . [(20170216 1546) ((flycheck (30)) (emacs (24))) "show flycheck errors in the frame title" single ((:commit . "6faea67be8661faf8152217869d16e993cc2bc49"))]) (flycheck-tip . [(20171020 348) ((flycheck (29)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar ((:commit . "9b0072d92e6b4a52834bf5a34120a0f5e1c8c2fd") (:keywords "flycheck") (:url . "https://github.com/yuutayamada/flycheck-tip"))]) (flycheck-tcl . [(20180327 559) ((emacs (24 4)) (flycheck (0 22))) "A flycheck checker for Tcl using tclchecker" single ((:commit . "7ca23f4673e178b9f5dcc8a82b86cf05b15d7236") (:url . "https://github.com/nwidger/flycheck-tcl"))]) (flycheck-swiftlint . [(20180312 1656) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Swiftlint." single ((:commit . "8496fd4499ef5c0e0cfeb65f4d76c6f9dd8991f3") (:keywords "languages" "swiftlint" "swift" "emacs") (:url . "https://github.com/jojojames/flycheck-swiftlint"))]) (flycheck-swift3 . [(20180411 652) ((emacs (24 4)) (flycheck (26))) "Flycheck: Swift support for Apple swift-mode" single ((:commit . "06a6f98d7e498860b345bbd03e96bfe59608f508") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/GyazSquare/flycheck-swift3"))]) (flycheck-swift . [(20170128 2149) ((emacs (24 4)) (flycheck (0 25))) "Flycheck extension for Apple's Swift." single ((:commit . "4c5ad401252400a78da395fd56a71e67ff8c2761") (:keywords "languages" "swift"))]) (flycheck-status-emoji . [(20180330 1625) ((cl-lib (0 1)) (emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single ((:commit . "4bd113ab42dec9544b66e0a27ed9008ce8148433") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/liblit/flycheck-status-emoji"))]) (flycheck-stack . [(20160520 244) ((flycheck (26)) (haskell-mode (13))) "Flychecker using stack ghci" single ((:commit . "f04235e00998000ee2c305f5a3ee72bb5dbbc926"))]) (flycheck-rust . [(20180327 945) ((emacs (24 1)) (flycheck (28)) (dash (2 13 0)) (seq (2 3)) (let-alist (1 0 4))) "Flycheck: Rust additions and Cargo support" single ((:commit . "1ffbbfeed6344107a3f65d837b30c8879274e4cf") (:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-rust"))]) (flycheck-rtags . [(20180619 124) ((emacs (24)) (flycheck (0 23)) (rtags (2 10))) "RTags Flycheck integration." single ((:commit . "9e2bbc5d562773506255143c22a52f4bc40f19e6") (:url . "http://rtags.net"))]) (flycheck-rebar3 . [(20161030 615) ((flycheck (27))) "Rebar3 flycheck integration for Erlang projects" single ((:commit . "56a7c94857f0a0ea6a2a73c476a1a2faadc0f7c6") (:keywords "erlang" "flycheck" "rebar3") (:url . "https://github/joedevivo/flycheck-rebar3"))]) (flycheck-pyflakes . [(20170330 1611) ((flycheck (0 18))) "Support pyflakes in flycheck" single ((:commit . "61b045939e3743b2162b7e4e73249c66fc2b8f65"))]) (flycheck-pycheckers . [(20180717 2300) ((flycheck (0 18))) "multiple syntax checker for Python, using Flycheck" tar ((:commit . "f85eb69318729689d09f69e955d800ddc6124d6a") (:keywords "convenience" "tools" "languages") (:url . "https://github.com/msherry/flycheck-pycheckers"))]) (flycheck-purescript . [(20161121 907) ((emacs (24 3)) (flycheck (0 22)) (dash (2 12 0)) (let-alist (1 0 4)) (seq (1 11))) "Flycheck: PureScript support" single ((:commit . "30f0435d5e2715053c8c6170b2bce2ae462ac819") (:keywords "convenience" "tools" "languages") (:url . "https://github.com/emacs-pe/flycheck-purescript"))]) (flycheck-prospector . [(20180523 2150) ((flycheck (0 22))) "Support prospector in flycheck" single ((:commit . "92f2680573290ba4a69a2d6e140f44680efce6a8") (:url . "https://github.com/chocoelho/flycheck-prospector"))]) (flycheck-posframe . [(20180321 2307) ((flycheck (0 24)) (emacs (26)) (posframe (0 3 0))) "Show flycheck error messages using posframe.el" single ((:commit . "61bdfd4b04e1651163fdcaa7dc631ad073b3e513") (:url . "https://github.com/alexmurray/flycheck-posframe"))]) (flycheck-pos-tip . [(20180610 915) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single ((:commit . "909113977d37739387c7f099d74a724cfe6efcec") (:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-pos-tip"))]) (flycheck-popup-tip . [(20170812 1651) ((flycheck (0 22)) (popup (0 5)) (emacs (24))) "Display Flycheck error messages using popup.el" single ((:commit . "ef86aad907f27ca076859d8d9416f4f7727619c6") (:keywords "convenience" "tools" "flycheck" "tooltip") (:url . "https://github.com/flycheck/flycheck-popup-tip/"))]) (flycheck-pony . [(20160501 1417) ((flycheck (0 25 1))) "Pony support in Flycheck" single ((:commit . "ef27475a14090396a01924d131bfee9e163cf6e9") (:keywords "tools" "convenience") (:url . "https://github.com/seantallen/flycheck-pony"))]) (flycheck-plantuml . [(20171017 1811) ((flycheck (0 24)) (emacs (24 4)) (plantuml-mode (1 2 2))) "Integrate plantuml with flycheck" single ((:commit . "183be89e1dbba0b38237dd198dff600e0790309d") (:url . "https://github.com/alexmurray/flycheck-plantuml"))]) (flycheck-pkg-config . [(20180430 1543) ((dash (2 8 0)) (s (1 9 0)) (flycheck (29))) "configure flycheck using pkg-config" single ((:commit . "e72e4c1b8153611ed82695673af84096f4d52795") (:keywords "flycheck"))]) (flycheck-phpstan . [(20180430 358) ((emacs (24 3)) (flycheck (26)) (phpstan (0 2 1))) "Flycheck integration for PHPStan" single ((:commit . "09102b062b607affc93f2d8a113a9fc9f9cf3016") (:keywords "convenience" "php") (:url . "https://github.com/emacs-php/phpstan.el"))]) (flycheck-perl6 . [(20180509 1501) ((emacs (24 3)) (flycheck (0 22))) "Perl 6 support in Flycheck" single ((:commit . "b804702305d7a6e26f762ff98cfdeec2e9dd4cb7") (:keywords "tools" "convenience") (:url . "https://github.com/hinrik/flycheck-perl6"))]) (flycheck-package . [(20161111 1451) ((flycheck (0 22)) (package-lint (0 2))) "A Flycheck checker for elisp package authors" single ((:commit . "6d99248b45eea1e5236062f38e524230efdb1a84") (:keywords "lisp"))]) (flycheck-ocaml . [(20170730 1453) ((emacs (24 1)) (flycheck (0 22)) (merlin (3 0 1)) (let-alist (1 0 3))) "Flycheck: OCaml support" single ((:commit . "8707a7bf545a8639a6a5c600a98d9a2ea1487dc9") (:keywords "convenience" "tools" "languages") (:url . "https://github.com/flycheck/flycheck-ocaml"))]) (flycheck-objc-clang . [(20180410 422) ((emacs (24 4)) (flycheck (26))) "Flycheck: Objective-C support using Clang" single ((:commit . "f4a76ac199b67ff383ab5e70434c9b98b48c92d5") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/GyazSquare/flycheck-objc-clang"))]) (flycheck-nimsuggest . [(20171027 1508) ((flycheck (0 23)) (emacs (24 3))) "flycheck backend for Nim using nimsuggest" single ((:commit . "dc9a5de1cb3ee05db5794d824610959a1f603bc9") (:url . "https://github.com/yuutayamada/flycheck-nimsuggest"))]) (flycheck-nim . [(20160714 2128) ((dash (2 4 0)) (flycheck (0 20))) "Defines a flycheck syntax checker for nim" single ((:commit . "6d27349b66e44578851e6148299709d64d2bde41") (:url . "https://github.com/ALSchwalm/flycheck-nim"))]) (flycheck-mypy . [(20180518 4) ((flycheck (0 18))) "Support mypy in flycheck" single ((:commit . "043e8bba13a6d5e760cde8374c8f77d90946a1f5"))]) (flycheck-mmark . [(20180203 932) ((emacs (24 4)) (flycheck (0 29))) "Flycheck checker for the MMark markdown processor" single ((:commit . "7fdcc48ff6ffa5e7db126a76f4948ab08b9eb8d4") (:keywords "convenience" "text") (:url . "https://github.com/mmark-md/flycheck-mmark"))]) (flycheck-mix . [(20170118 630) ((flycheck (27)) (elixir-mode (1 8 0))) "Elixir mix flycheck integration" single ((:commit . "76684d4b5987925b98b254aab656f8bf8198ab88") (:keywords "elixir" "flycheck" "mix") (:url . "https://github.com/tomekowal/flycheck-mix"))]) (flycheck-mercury . [(20151122 2334) ((flycheck (0 22)) (s (1 9 0)) (dash (2 4 0))) "Mercury support in Flycheck" single ((:commit . "fa9e433a0a912f0fae9e4dec9ea616ef99fcf861") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/flycheck/flycheck-mercury"))]) (flycheck-liquidhs . [(20170412 1626) ((flycheck (0 15))) "A flycheck checker for Haskell using liquid (i.e. liquidhaskell)" single ((:commit . "c27252ac24d77f4b6eec76a4ba9cd61761a3fba9") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/ucsd-progsys/liquidhaskell/flycheck-liquid.el"))]) (flycheck-lilypond . [(20171203 532) ((emacs (24 3)) (flycheck (0 22))) "LilyPond support in Flycheck" single ((:commit . "cc1b7677a932c42e5dab1661ad7b923d4aae744c") (:keywords "tools" "convenience") (:url . "https://github.com/hinrik/flycheck-lilypond"))]) (flycheck-ledger . [(20180125 31) ((flycheck (0 15))) "Flycheck integration for ledger files" single ((:commit . "044f28d126d1bce55c4b78ba6d5bc92e1f6cfd69") (:keywords "convenience" "languages" "tools"))]) (flycheck-kotlin . [(20170122 337) ((flycheck (0 18))) "Support kotlin in flycheck" single ((:commit . "cbb9fbf70dbe8efcc3971b3606ee95c97469b1fe"))]) (flycheck-julia . [(20170729 1441) ((emacs (24)) (flycheck (0 22))) "Julia support for Flycheck" single ((:commit . "213b60a5a9a1cb7887260e1d159b5bb27167cbb6") (:keywords "convenience" "tools" "languages") (:url . "https://github.com/gdkrmr/flycheck-julia"))]) (flycheck-joker . [(20180712 2102) ((flycheck (0 18))) "Add Clojure syntax checker (via Joker) to flycheck" single ((:commit . "0d8d5683a273093ca12841bf93d10dae97ccbc5d"))]) (flycheck-jest . [(20180410 2028) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Jest." single ((:commit . "08f27c5ed97c83c445f99fab58f0b6c826f14449") (:keywords "languages" "jest") (:url . "https://github.com/jojojames/flycheck-jest"))]) (flycheck-irony . [(20180604 1452) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0))) "Flycheck: C/C++ support via Irony" single ((:commit . "42dbecd4a865cabeb301193bb4d660e26ae3befe") (:keywords "convenience" "tools" "c") (:url . "https://github.com/Sarcasm/flycheck-irony/"))]) (flycheck-inline . [(20180529 614) ((emacs (25 1)) (flycheck (31))) "Display Flycheck errors inline" single ((:commit . "7460008c326aee818a1be08579b927f7c8ccad64") (:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-inline"))]) (flycheck-hdevtools . [(20160926 2) ((flycheck (0 21 -4 1)) (dash (2 0))) "A flycheck checker for Haskell using hdevtools" single ((:commit . "eab1fc184854341a56154623a131cab6ff0ce18c") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/flycheck/flycheck-hdevtools"))]) (flycheck-haskell . [(20180611 1442) ((emacs (24 3)) (flycheck (0 25)) (haskell-mode (13 7)) (dash (2 4 0)) (seq (1 11)) (let-alist (1 0 1))) "Flycheck: Automatic Haskell configuration" tar ((:commit . "32877c2912d435c30c0202680611d127862a372c") (:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-haskell"))]) (flycheck-gradle . [(20180403 33) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Gradle." single ((:commit . "a14b45183e50993e8b28a4c57ad5db82b789faef") (:keywords "languages" "gradle") (:url . "https://github.com/jojojames/flycheck-gradle"))]) (flycheck-gometalinter . [(20180424 241) ((emacs (24)) (flycheck (0 22))) "flycheck checker for gometalinter" single ((:commit . "422f6e4b77b27fd7370f0c88437ac5072c9d3413") (:keywords "convenience" "tools" "go") (:url . "https://github.com/favadi/flycheck-gometalinter"))]) (flycheck-golangci-lint . [(20180711 117) ((emacs (24)) (flycheck (0 22))) "Flycheck checker for golangci-lint" single ((:commit . "b4b51aa6fe5335c0f46f2f83c7dc32e4141ff9f1") (:keywords "convenience" "tools" "go") (:url . "https://github.com/weijiangan/flycheck-golangci-lint"))]) (flycheck-ghcmod . [(20150113 2232) ((flycheck (0 21 -4 1)) (dash (2 0))) "A flycheck checker for Haskell using ghcmod" single ((:commit . "6bb7b7d879f05bbae54e99eb04806c877adf3ccc") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/scturtle/flycheck-ghcmod"))]) (flycheck-flow . [(20180723 803) ((flycheck (0 18)) (json (1 4))) "Support Flow in flycheck" single ((:commit . "83e72c4e7eb443639b2756b509812c152bb1f2d7"))]) (flycheck-flawfinder . [(20170115 1927) ((flycheck (0 24)) (emacs (24 4))) "Integrate flawfinder with flycheck" single ((:commit . "7d964d38023b088adf3ffc2fddeead81f4491a45") (:url . "https://github.com/alexmurray/flycheck-flawfinder"))]) (flycheck-elm . [(20160717 257) ((flycheck (0 29 -4)) (emacs (24 4))) "Flycheck support for the elm language" single ((:commit . "b401873ebd2176190a0a6fb4d61c2cca97d3b9fb") (:url . "https://github.com/bsermons/flycheck-elm"))]) (flycheck-elixir . [(20171122 507) ((flycheck (0 25))) "Support Elixir in flycheck" single ((:commit . "1f19a739cdb93851c6b01b1e188e215d035cd4a1"))]) (flycheck-dtrace . [(20180126 1135) ((emacs (25 1)) (flycheck (0 22))) "Flycheck: DTrace support" single ((:commit . "a328c38aea855c0fd02f901c141c100c24b27d7f") (:keywords "languages" "convenience" "tools"))]) (flycheck-dogma . [(20170124 2321) ((flycheck (29))) "flycheck checker for elixir dogma" single ((:commit . "eea1844a81e87e2488b05e703a93272d0fc3bc74") (:url . "https://github.com/aaronjensen/flycheck-dogma"))]) (flycheck-dmd-dub . [(20180625 935) ((flycheck (0 24)) (f (0 18 2))) "Sets flycheck-dmd-include-paths from dub package information" single ((:commit . "148ea4ba3e4c46c8edc616f947f796e98bcad0de") (:keywords "languages") (:url . "http://github.com/atilaneves/flycheck-dmd-dub"))]) (flycheck-dialyzer . [(20160326 730) ((flycheck (0 18))) "Support dialyzer in flycheck" single ((:commit . "a5df0db95ac69f397b5f85d325a6d88cf8974f64"))]) (flycheck-dialyxir . [(20170515 825) ((flycheck (29))) "flycheck checker for elixir dialyxir" single ((:commit . "adfb73374cb2bee75724822972f405f2ec371199") (:url . "https://github.com/aaronjensen/flycheck-dialyxir"))]) (flycheck-demjsonlint . [(20161114 2318) ((flycheck (30))) "Flychecker for json-mode using jsonlint from demjson" tar ((:commit . "a3dfe1df8ecdea76c076c0849901427567356228") (:keywords "convenience" "tools") (:url . "https://github.com/z4139jq/flycheck-demjsonlint"))]) (flycheck-dedukti . [(20171103 512) ((flycheck (0 19)) (dedukti-mode (0 1))) "Flycheck integration of Dedukti" single ((:commit . "3dbff5646355f39d57a3ec514f560a6b0082a1cd") (:keywords "convenience" "languages" "tools" "flycheck" "dedukti") (:url . "https://github.com/rafoo/flycheck-dedukti"))]) (flycheck-d-unittest . [(20160521 2117) ((flycheck (0 21 -4 1)) (dash (1 4 0))) "Add D unittest support to flycheck" single ((:commit . "3e614f23cb4a5566fd7988dbcaaf254af81c7718") (:keywords "flycheck" "d") (:url . "https://github.com/tom-tan/flycheck-d-unittest/"))]) (flycheck-cython . [(20170724 258) ((flycheck (0 25))) "Support Cython in flycheck" single ((:commit . "ecc4454d35ab5317ab66a04406f36f0c1dbc0b76"))]) (flycheck-cstyle . [(20160905 1641) ((flycheck (0 24)) (emacs (24 4))) "Integrate cstyle with flycheck" single ((:commit . "207285140a353d08cf1fc450cacab158bc98ba82") (:url . "https://github.com/alexmurray/flycheck-cstyle"))]) (flycheck-css-colorguard . [(20161031 422) ((flycheck (0 22)) (emacs (24))) "Detect similar colors in CSS" single ((:commit . "ae94fa0396acd99f9ec36d9572459df793f37fe8") (:keywords "flycheck" "css" "colorguard") (:url . "https://github.com/Simplify/flycheck-css-colorguard/"))]) (flycheck-crystal . [(20180626 1942) ((flycheck (30))) "Add support for Crystal to Flycheck" single ((:commit . "ae87526d13be07e6817809ac9795657db0092c9d") (:keywords "tools" "crystal") (:url . "https://github.com/crystal-lang-tools/emacs-crystal-mode"))]) (flycheck-credo . [(20170526 845) ((flycheck (29))) "flycheck checker for elixir credo" single ((:commit . "e88f11ead53805c361ec7706e44c3dfee1daa19f") (:url . "https://github.com/aaronjensen/flycheck-credo"))]) (flycheck-coverity . [(20170703 1759) ((flycheck (0 24)) (dash (2 12 0)) (emacs (24 4))) "Integrate Coverity with flycheck" single ((:commit . "cb211e3dd50413a5042eb20175be518214591c9d") (:url . "https://github.com/alexmurray/flycheck-coverity"))]) (flycheck-color-mode-line . [(20171121 2307) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ((:commit . "cc474804d4e8088a627485faaf4217a5781aec7d") (:keywords "convenience" "language" "tools"))]) (flycheck-clojure . [(20180721 712) ((cider (0 8 1)) (flycheck (0 22 -4 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single ((:commit . "d81d875f83f7db26cd7bf43d0f9bab272fb54a3c") (:url . "https://github.com/clojure-emacs/squiggly-clojure"))]) (flycheck-clangcheck . [(20150712 10) ((cl-lib (0 5)) (seq (1 7)) (flycheck (0 17))) "A Flycheck checker difinition for ClangCheck." single ((:commit . "24a9424c484420073a24443a829fd5779752362b") (:url . "https://github.com/kumar8600/flycheck-clangcheck"))]) (flycheck-clang-tidy . [(20171024 108) ((flycheck (0 30))) "Flycheck syntax checker using clang-tidy" single ((:commit . "b8ebd49693f67e08e420ba847cc88f6721ef9e3e") (:keywords "convenience" "languages" "tools") (:url . "https://github.com/ch1bo/flycheck-clang-tidy"))]) (flycheck-clang-analyzer . [(20180225 2039) ((flycheck (0 24)) (emacs (24 4))) "Integrate Clang Analyzer with flycheck" single ((:commit . "adc9e7663bafcc9b740c09b691898413627e74ab") (:url . "https://github.com/alexmurray/flycheck-clang-analyzer"))]) (flycheck-checkpatch . [(20170217 225) ((emacs (25)) (flycheck (30))) "Flycheck support for checkpatch.pl tool" single ((:commit . "6461fc7b0d493eb9863814055f8bce5fa35739de") (:url . "https://github.com/zpp0/flycheck-checkpatch"))]) (flycheck-checkbashisms . [(20160224 906) ((emacs (24)) (flycheck (0 25))) "checkbashisms checker for flycheck" single ((:commit . "0794ad763d7cd81286283f6400bc89a81e8e07d4") (:keywords "convenience" "tools" "sh" "unix") (:url . "https://github.com/Gnouc/flycheck-checkbashisms"))]) (flycheck-cask . [(20160928 226) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single ((:commit . "c3a51147eddeb7347de81f6a498fc96538bac499") (:keywords "tools" "convenience") (:url . "https://github.com/flycheck/flycheck-cask"))]) (flycheck-bashate . [(20160629 2140) ((flycheck (0 24)) (emacs (24 4))) "Integrate bashate with flycheck" single ((:commit . "77fa03dbc578c34fe71ca44926bac2aff8f2b021") (:url . "https://github.com/alexmurray/flycheck-bashate"))]) (flycheck-ats2 . [(20170225 836) ((emacs (24 1)) (flycheck (0 22))) "Flycheck: ATS2 support" single ((:commit . "9f77add8408462af35bdddf87e37a661880255e3") (:keywords "convenience" "tools" "languages") (:url . "http://github.com/drvink/flycheck-ats2"))]) (flycheck-apertium . [(20160406 618) ((flycheck (0 25))) "Apertium checkers in flycheck" tar ((:commit . "71cf49d5aaee962b995583384bfa045a1d4c3db7") (:keywords "convenience" "tools" "xml") (:url . "http://wiki.apertium.org/wiki/Emacs"))]) (flycheck . [(20180720 247) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "On-the-fly syntax checking" tar ((:commit . "740d6670384e76f86d675d8ab00ff21eb7e09fcb") (:keywords "convenience" "languages" "tools") (:url . "http://www.flycheck.org"))]) (flx-isearch . [(20180102 2114) ((emacs (24)) (flx (20140821)) (cl-lib (0 5))) "Fuzzy incremental searching for emacs" single ((:commit . "f132fd6367e369885ab3a865fbfe20eee989bc0b") (:keywords "convenience" "search" "flx") (:url . "https://github.com/pythonnut/flx-isearch"))]) (flx-ido . [(20180117 719) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ((:commit . "46040d0b096a0340d91235561f27a959a61d0fef") (:url . "https://github.com/lewang/flx"))]) (flx . [(20151030 1112) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ((:commit . "46040d0b096a0340d91235561f27a959a61d0fef") (:url . "https://github.com/lewang/flx"))]) (fluxus-mode . [(20170210 1141) ((osc (0 1)) (emacs (24 4))) "Major mode for interfacing with Fluxus" single ((:commit . "3661d4dfdaf249138e7f215f15f291c9391ede8d") (:keywords "languages") (:url . "https://github.com/defaultxr/fluxus-mode"))]) (flower . [(20180618 1222) ((emacs (24 4)) (clomacs (0 0 3))) "Emacs task tracker client." tar ((:commit . "4d05448dc0118078ec320f564d87acaa740ae47c") (:keywords "hypermedia" "outlines" "tools" "vc") (:url . "https://github.com/PositiveTechnologies/flower"))]) (flow-minor-mode . [(20180315 1124) ((emacs (25 1))) "Flow type mode based on web-mode." single ((:commit . "d1b32a7dd0d33c6a00a106da5f4b2323602cbd3e") (:url . "https://github.com/an-sh/flow-minor-mode"))]) (floobits . [(20170802 1500) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:commit . "ed5586d1bf94f36354091648e824ccb6fcaf807f") (:keywords "comm" "tools") (:url . "http://github.com/Floobits/floobits-emacs"))]) (fliptext . [(20171124 1256) nil "Input method for flipping characters upside down" single ((:commit . "fd821f645ffebae6ae3894afa7ba7fc06f91afc6") (:keywords "games" "i18n"))]) (flimenu . [(20170417 1847) ((dash (2 10 0)) (emacs (24 4))) "Flatten imenu automatically" single ((:commit . "9351201d89b05cbdaec312a6ebd7fd10c38d6112") (:keywords "imenu" "browse" "structure" "hook" "mode" "matching" "tools" "convenience" "files") (:url . "https://github.com/IvanMalison/flimenu"))]) (flim . [(20180328 1624) ((apel (10 8))) "A library to provide basic features about message representation or encoding." tar ((:commit . "faaa2b1f2bb8fcf835ddfb8981654e4d3b2bdbc6"))]) (flex-isearch . [(20170308 1210) nil "Flex matching (like ido) in isearch." single ((:keywords "convenience" "search") (:url . "https://bitbucket.org/jpkotta/flex-isearch"))]) (flex-compile . [(20180528 853) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "Run, evaluate and compile for a many languages and modes." tar ((:commit . "0b6259944e78f0bc6ee4407d97e3d09db8fd400e") (:keywords "compilation" "integration") (:url . "https://github.com/plandes/flex-compile"))]) (flex-autopair . [(20120809 518) nil "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." single ((:commit . "4bb757f2556a4a51828e2fed8fb81e31e83052cb") (:keywords "keyboard" "input") (:url . "https://github.com/uk-ar/flex-autopair.el"))]) (flatui-theme . [(20160618 1827) nil "A color theme for Emacs based on flatuicolors.com" single ((:commit . "9c15db5526c15c8dba55023f5698372b19c2a780") (:url . "https://github.com/john2x/flatui-theme.el"))]) (flatui-dark-theme . [(20170513 722) ((emacs (24))) "Dark color theme with colors from https://flatuicolors.com/" single ((:commit . "5b959a9f743f891e4660b1b432086417947872ea") (:keywords "color" "theme" "dark" "flatui" "faces") (:url . "https://github.com/theasp/flatui-dark-theme"))]) (flatland-theme . [(20171113 721) nil "A simple theme for Emacs based on the Flatland theme for Sublime Text" single ((:commit . "a98a6f19ad4dff0fa3fad1ea487b7d0ef634a19a") (:url . "http://github.com/gregchapple/flatland-emacs"))]) (flatland-black-theme . [(20170808 612) ((emacs (24 0))) "an Emacs 24 theme based on Flatland Black (tmTheme)" single ((:commit . "348c5d5fe615e6ea13cadc17f046e506e789ce07") (:url . "https://github.com/emacsfodder/flatland-black-theme"))]) (flash-region . [(20130923 1117) nil "Flash a region" single ((:commit . "261b3597b23cdd40e5c14262a5687bcc6c1d0901") (:keywords "utility"))]) (flappymacs . [(20171023 304) nil "flappybird clone for emacs" single ((:commit . "27f3e21acb22f786606481e3f4e5dc1edbaaaed4") (:keywords "games") (:url . "https://github.com/taksatou/flappymacs"))]) (flame . [(20180303 1216) ((emacs (24))) "automatic generation of flamage, as if we needed more." single ((:commit . "a749b2a77b87e505572d0f1f5d59fac76348bb73") (:keywords "games") (:url . "https://github.com/mschuldt/flame"))]) (fixmee . [(20150223 555) ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single ((:commit . "1b8b3460f1e3c3c1784b2a63fb9f4fb3bb4dc084") (:keywords "navigation" "convenience") (:url . "http://github.com/rolandwalker/fixmee"))]) (fix-word . [(20171231 2215) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single ((:commit . "8e66b6a7b599c6c5098490e83ef4e69acf307603") (:keywords "word" "convenience") (:url . "https://github.com/mrkkrp/fix-word"))]) (fix-muscle-memory . [(20160822 2139) nil "Simple hacks to fix muscle memory problems" single ((:commit . "a123e04f8a1d2982cbf930efb909cad9522ac884") (:keywords "spelling" "typing"))]) (fix-input . [(20171231 2220) ((emacs (24 4))) "Make input methods play nicely with alternative keyboard layout on OS level" single ((:commit . "37bc0734a2e71d66245ee3960879577e5ef906bb") (:keywords "input" "method") (:url . "https://github.com/mrkkrp/fix-input"))]) (fish-mode . [(20180306 818) ((emacs (24))) "Major mode for fish shell scripts" single ((:commit . "bac709ac1235751952d6022dddc6307d9135d096") (:keywords "fish" "shell"))]) (fish-completion . [(20180616 1223) nil "Add fish completion to pcomplete (shell and Eshell)" single ((:commit . "bac15fda1392a891070574dfe5d2d50b10831e8b") (:url . "https://gitlab.com/Ambrevar/emacs-fish-completion"))]) (firrtl-mode . [(20180221 1555) ((emacs (24 3))) "mode for working with FIRRTL files" single ((:commit . "1ac00d526018945389bcb2292dbdd8395381774a") (:keywords "languages" "firrtl") (:url . "https://github.com/ibm/firrtl-mode"))]) (firestarter . [(20161219 523) nil "Execute (shell) commands on save" single ((:commit . "4d6b106f325ac1802eabce3c8a7cd0a4c7a32864") (:keywords "convenience") (:url . "https://github.com/wasamasa/firestarter"))]) (fireplace . [(20160811 519) nil "A cozy fireplace for emacs" single ((:commit . "23a444f749bcb2b804593e3b2cb9c73cc59231fb") (:keywords "games") (:url . "https://github.com/johanvts/emacs-fireplace"))]) (firefox-controller . [(20160320 1147) ((moz (0)) (popwin (1 0 0)) (cl-lib (0 5))) "An improved Firefox controller" single ((:commit . "a8af8cbf70afaf6b89a26d6ac69af8e92afc181f") (:keywords "extensions") (:url . "https://github.com/cute-jumper/emacs-firefox-controller"))]) (firecode-theme . [(20170808 611) ((emacs (24 0))) "an Emacs 24 theme based on FireCode (tmTheme)" single ((:commit . "8b7b03ecdd41e70dab145b98906017e1392eaef4") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (fiplr . [(20140723 2345) ((grizzl (0 1 0)) (cl-lib (0 1))) "Fuzzy Search for Files in Projects" tar ((:commit . "3f50159fd42125440d5b0eb9d6398560461f030b"))]) (fingers . [(20160817 129) nil "Modal editing with universal text manipulation helpers." tar ((:commit . "fed0f742afb1d72eaef29d8da394467550a030fa") (:keywords "fingers" "modal" "editing" "workman") (:url . "http://github.com/fgeller/fingers.el"))]) (findr . [(20130127 1232) nil "Breadth-first file-finding facility for (X)Emacs" single ((:commit . "1ddbc0464bb05dcda392b62666ad17239a2152d3") (:keywords "files"))]) (find-things-fast . [(20150519 1526) nil "Find things fast, leveraging the power of git" single ((:commit . "efc7c189019ed65430e2f9e910e8e0a5ca9d2d03") (:keywords "project" "convenience"))]) (find-temp-file . [(20170107 539) nil "Open quickly a temporary file" single ((:commit . "513005d19d72d71f34481ee00158dd57bd93206f") (:keywords "convenience") (:url . "https://github.com/thisirs/find-temp-file.git"))]) (find-file-in-repository . [(20151113 519) nil "Quickly find files in a git, mercurial or other repository" single ((:commit . "8a8c84a6dbe7a2bba4564c3b58c92d157abfa3f8") (:keywords "files" "convenience" "repository" "project" "source control") (:url . "https://github.com/hoffstaetter/find-file-in-repository"))]) (find-file-in-project . [(20180705 1832) ((ivy (0 10 0)) (emacs (24 3))) "Find file/directory and review Diff/Patch/Commit efficiently everywhere" single ((:commit . "1c54325cb60bde7496dad4e19f4c2a857999df58") (:keywords "project" "convenience") (:url . "https://github.com/technomancy/find-file-in-project"))]) (find-by-pinyin-dired . [(20180209 1818) ((pinyinlib (0 1 0))) "Find file by first PinYin character of Chinese Hanzi" single ((:commit . "3b4781148dddc84a701ad76c0934ed991ecd59d5") (:keywords "hanzi" "chinese" "dired" "find" "file" "pinyin") (:url . "http://github.com/redguardtoo/find-by-pinyin-dired"))]) (finalize . [(20170418 1245) ((emacs (24 1)) (cl-generic (0 3)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar ((:commit . "846731531e7d1d80451787992e07bfe7dedbe9ff"))]) (fillcode . [(20171029 925) nil "Fill (wrap) function calls and expressions in source code" single ((:commit . "d0a9e20f5fcc24a786d09ea19bfb9237681ba823") (:url . "https://snarfed.org/fillcode"))]) (fill-function-arguments . [(20180427 1002) ((emacs (24 4))) "Convert function arguments to/from single line" single ((:commit . "fcfb2a671adaf04110586aee0c499b1f0056a8e6") (:keywords "convenience") (:url . "https://github.com/davidshepherd7/fill-function-arguments"))]) (fill-column-indicator . [(20171209 1124) nil "Graphically indicate the fill column" single ((:commit . "d2536b1c48f78679e15a2b50cd5d8c0ffde4b155") (:keywords "convenience"))]) (filelock . [(20180524 1515) ((emacs (24)) (cl-lib (0)) (f (0))) "Functions for manipulating file locks" single ((:commit . "17a5ca6e0dee14d2e7d92c84be91143bca9d9663") (:keywords "extensions" "files" "tools") (:url . "https://github.com/DarwinAwardWinner/emacs-filelock"))]) (figlet . [(20160218 1437) nil "Annoy people with big, ascii art text" single nil]) (fifo-class . [(20160424 2258) nil "First in first out abstract class" single ((:commit . "8fe4cf690727f4ac7b67f29c55f845df023c3f21") (:keywords "lisp") (:url . "https://github.com/mola-T/fifo-class"))]) (fic-mode . [(20180603 1335) nil "Show FIXME/TODO/BUG(...) in special face only in comments and strings" single ((:commit . "a05fc36ed54ba0c6dc22ac216a6a72cf191ca13d") (:url . "https://github.com/lewang/fic-mode"))]) (fetch . [(20131130 2330) nil "Fetch and unpack resources" single ((:commit . "3f2793afcbbc32f320e572453166f9354ecc6d06") (:url . "https://github.com/crshd/fetch.el"))]) (fennel-mode . [(20180509 1852) nil "a major-mode for editing Fennel code" single ((:commit . "21e184b2a862290db9dcf839f0e4a2df480a642e") (:keywords "languages" "tools") (:url . "https://gitlab.com/technomancy/fennel-mode"))]) (feebleline . [(20180604 515) nil "Replace modeline with a slimmer proxy" single ((:commit . "9ece1c02a60ed0209cda661bcb864a7e624e8aca") (:url . "https://github.com/tautologyclub/feebleline"))]) (feature-mode . [(20170907 748) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar ((:commit . "722b352c4f0b800a9356dd369c79612782b3b847"))]) (fcopy . [(20150304 603) nil "Funny Copy, set past point HERE then search copy text" single ((:commit . "e355f6ec889d8ecbdb096019c2dc660b1cec4941") (:keywords "convenience") (:url . "https://github.com/ataka/fcopy"))]) (fcitx . [(20170913 1900) nil "Make fcitx better in Emacs" single ((:commit . "095332fbeb994c908c533fe2ad068c0728211c3d") (:keywords "extensions") (:url . "https://github.com/cute-jumper/fcitx.el"))]) (faustine . [(20171122 402) ((emacs (24 3)) (faust-mode (0 3))) "Edit, visualize, build and run Faust code" single ((:commit . "07a38963111518f86123802f9d477be0d4689a3f") (:keywords "languages" "faust") (:url . "https://bitbucket.org/yphil/faustine"))]) (faust-mode . [(20180205 126) nil "Faust syntax colorizer for Emacs." single ((:commit . "7c31b22bdbfd2f8c16ec117d2975d56dd61ac15c") (:keywords "languages" "faust") (:url . "https://github.com/rukano/emacs-faust-mode"))]) (fastnav . [(20120211 657) nil "Fast navigation and editing routines." single ((:commit . "1019ba2b61d1a070204099b23da347278a61bc89") (:keywords "nav" "fast" "fastnav" "navigation"))]) (fastdef . [(20160713 629) ((ivy (0 7 0)) (w3m (0 0))) "Insert terminology from Google top search results" single ((:commit . "0696f41dc150d35ce31fe8d2ea74f4173818bb55") (:keywords "terminology" "org-mode" "markdown") (:url . "http://github.com/redguardtoo/fastdef"))]) (fasd . [(20180605 2205) nil "Emacs integration for the command-line productivity booster `fasd'" single ((:commit . "020c6a4b5fd1498a84ae142d2e32c7ff678fb029") (:keywords "cli" "bash" "zsh" "autojump") (:url . "https://framagit.org/steckerhalter/emacs-fasd"))]) (farmhouse-theme . [(20160713 1544) nil "Farmhouse Theme, Emacs edition" tar ((:commit . "7ddc1ff13b4a3d5466bd0d33ecb86100352e83a7") (:keywords "color" "theme") (:url . "https://github.com/mattly/emacs-farmhouse-theme"))]) (fancy-narrow . [(20171030 1716) nil "narrow-to-region with more eye candy." single ((:commit . "9f4a587f6a5a387271fb665e13f59d41fd42504c") (:keywords "faces" "convenience") (:url . "http://github.com/Bruce-Connor/fancy-narrow"))]) (fancy-battery . [(20150101 404) ((emacs (24 1))) "Fancy battery display" single ((:commit . "9b88ae77a01aa3edc529840338bcb2db7f445822") (:keywords "convenience" "tools" "hardware") (:url . "https://github.com/lunaryorn/fancy-battery.el"))]) (fakir . [(20140729 952) ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) "fakeing bits of Emacs" single ((:commit . "1fca406ad7de80fece6319ff75d4230b648534b0") (:keywords "lisp" "tools") (:url . "http://github.com/nicferrier/emacs-fakir"))]) (fakespace . [(20120817 1706) nil "fake namespaces with defpackage" single ((:commit . "d1bd1f4b14b2690d7a67f9a52622ec51ed84813a") (:url . "https://github.com/skeeto/elisp-fakespace"))]) (faff-theme . [(20180702 1023) nil "Light Emacs color theme on ivory3 background" single ((:commit . "596c8cfbf1a7fbc3b93643359f8d0f4c612d69be") (:keywords "color" "theme") (:url . "https://github.com/WJCFerguson/emacs-faff-theme"))]) (factlog . [(20130209 1740) ((deferred (0 3 1))) "File activity logger" single ((:commit . "6503d77ea882c995b051d22e72db336fb28770fc") (:url . "https://github.com/tkf/factlog"))]) (faceup . [(20170925 1246) nil "Markup language for faces and font-lock regression testing" single ((:commit . "6c92dad56a133e14e7b27831e1bcf9b3a71ff154") (:keywords "faces" "languages") (:url . "https://github.com/Lindydancer/faceup"))]) (face-explorer . [(20170710 1201) nil "Library and tools for faces and text properties" single ((:commit . "13bd4553bc4b09215a04d0267be1cb4ed834775c") (:keywords "faces") (:url . "https://github.com/Lindydancer/face-explorer"))]) (fabric . [(20171115 2256) nil "Launch Fabric using Emacs" tar ((:commit . "df79be341d0b34ed23850f9894136092fa5fea8c") (:keywords "python" "fabric") (:url . "https://github.com/nlamirault/fabric.el"))]) (f3 . [(20180130 358) ((emacs (24 3)) (helm (2 8 8)) (cl-lib (0 5))) "a helm interface to find" tar ((:commit . "000009ce4adf7a57eae80512f29c4ec2a1391ce5") (:keywords "find" "file" "files" "helm" "fast" "finder") (:url . "https://github.com/cosmicexplorer/f3"))]) (f . [(20180106 122) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:commit . "de6d4d40ddc844eee643e92d47b9d6a63fbebb48") (:keywords "files" "directories") (:url . "http://github.com/rejeep/f.el"))]) (eziam-theme . [(20180414 329) nil "A mostly monochrome theme, inspired by Tao and Leuven, with dark and light versions." tar ((:commit . "96595833110cd64c391e0ccd5230782a8f0a4e08"))]) (ez-query-replace . [(20170814 621) ((dash (1 2 0)) (s (1 11 0))) "a smarter context-sensitive query-replace that can be reapplied" single ((:commit . "f5dbd2d3e5e62e6b7e7cc1a98fc4d0cd411e5afa"))]) (eyuml . [(20141028 1527) ((request (0 2 0)) (s (1 8 0))) "Write textual uml diagram from emacs using yuml.me" single ((:commit . "eb29c37316e44a14741f16e894fbcfcb7537dc80") (:keywords "uml") (:url . "http://github.com/antham/eyuml"))]) (eyebrowse . [(20180514 1219) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single ((:commit . "dfeea9e9cd6dcd78ddc9fccdf9a21f7317f754bc") (:keywords "convenience") (:url . "https://github.com/wasamasa/eyebrowse"))]) (exwm-x . [(20180227 257) ((cl-lib (0 5)) (exwm (0 17)) (switch-window (0 10)) (swiper (0 9 0)) (bind-key (1 0)) (counsel (0 9 0)) (ivy (0 9 0))) "A derivative wm based on EXWM (emacs x window manager)" tar ((:commit . "4f7946db67d6599baba6b3961e8f543a68707742") (:keywords "window-manager" "exwm") (:url . "https://github.com/tumashu/exwm-x"))]) (exwm-surf . [(20171204 340) ((emacs (24 4)) (exwm (0 16))) "Interface for Surf (surf.suckless.org) under exwm" single ((:commit . "6c17e2c1597fe4b7b454a1dac23b9127ac951e94") (:keywords "extensions") (:url . "https://github.com/ecraven/exwm-surf"))]) (exwm-edit . [(20180629 137) ((emacs (24 4))) "Edit mode for EXWM" single ((:commit . "6ea0a64e47d06204d826e146c3c3082dec5c4007") (:keywords "convenience") (:url . "https://github.com/agzam/exwm-edit"))]) (extmap . [(20180205 1047) ((emacs (24 1))) "Externally-stored constant mapping for Elisp" single ((:commit . "3860b69fb19c962425d4e271ee0a24547b67d323") (:keywords "lisp") (:url . "https://github.com/doublep/extmap"))]) (extend-dnd . [(20151122 1050) nil "R drag and Drop" tar ((:commit . "80c966c93b82c9bb5c6225a432557c39144fc602") (:keywords "extend" "drag and drop") (:url . "https://github.com/mlf176f2/extend-dnd"))]) (extempore-mode . [(20180104 2221) ((emacs (24 4))) "Emacs major mode for Extempore source files" single ((:commit . "ae5f40d4b0883a4519e460cd7720e5fcc3a68fa5") (:keywords "extempore") (:url . "http://github.com/extemporelang/extempore-emacs-mode"))]) (exsqlaim-mode . [(20170607 303) ((s (1 10 0))) "Use variables inside sql queries" single ((:commit . "a2e0a62ec8b87193d8eaa695774bfd689324b06c") (:url . "https://github.com/ahmadnazir/exsqlaim-mode"))]) (express . [(20140508 1341) ((string-utils (0 3 2))) "Alternatives to `message'" single ((:commit . "93dae7377eace4a5413ba99aecb6f26f90798725") (:keywords "extensions" "message" "interface") (:url . "http://github.com/rolandwalker/express"))]) (expand-region . [(20180625 939) nil "Increase selected region by semantic units." tar ((:commit . "a82d74b8b6d95e96e43148edb4daaf0f1e9c72dd"))]) (expand-line . [(20151005 1907) nil "Expand selection by line" single ((:commit . "75a5d0241f35dd0748ab8ecb4ff16891535be372"))]) (exotica-theme . [(20180212 1529) ((emacs (24))) "A dark theme with vibrant colors" single ((:commit . "ff3ef4f6fa38c93b99becad977c7810c990a4d2f") (:keywords "faces" "theme" "dark" "vibrant colors") (:url . "https://github.com/jbharat/exotica-theme"))]) (exiftool . [(20170822 1432) ((emacs (25))) "Elisp wrapper around ExifTool" single ((:commit . "3a07dbcb975577734d4abf6d68e1ab83a01951bb") (:keywords "data") (:url . "https://git.systemreboot.net/exiftool.el"))]) (exec-path-from-shell . [(20180323 1904) nil "Get environment variables such as $PATH from the shell" single ((:commit . "54ea2f9c3c81d18b96e4d33c4c547e02eee420dc") (:keywords "unix" "environment") (:url . "https://github.com/purcell/exec-path-from-shell"))]) (exato . [(20180305 242) ((evil (1 2 13)) (emacs (24))) "EXATO: Evil XML/HTML Attributes Text Object" single ((:commit . "88266fa7fcfbef704032f671b94f756f2f98bd4f") (:url . "https://github.com/ninrod/exato"))]) (eww-lnum . [(20150102 712) nil "Conkeror-like functionality for eww" single ((:commit . "4b0ecec769919ecb05ca4fb15ec51911ba589929") (:keywords "eww" "browse" "conkeror") (:url . "https://github.com/m00natic/eww-lnum"))]) (ewmctrl . [(20170921 1917) nil "Use `wmctrl' to manage desktop windows via EWMH/NetWM." single ((:commit . "3d0217c4d6cdb5c308b6cb4293574f470d4faacf") (:keywords "desktop" "windows" "ewmh" "netwm") (:url . "https://github.com/flexibeast/ewmctrl"))]) (evm . [(20141007 456) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single ((:commit . "d0623b2355436a5fd9f7238b419782080c79196b") (:url . "http://github.com/rejeep/evm"))]) (evil-visualstar . [(20160222 1648) ((evil (0))) "Starts a * or # search from the visual selection" single ((:commit . "06c053d8f7381f91c53311b1234872ca96ced752") (:keywords "evil" "vim" "visualstar") (:url . "https://github.com/bling/evil-visualstar"))]) (evil-visual-replace . [(20171015 2313) ((evil (1 0 0))) "search/replace commands for evil visual state, inc. blocks" single ((:commit . "163fc827a1ffc106475da470c37fb26f4cc9b008") (:keywords "evil" "search" "replace" "regexp" "block" "rectangular" "region" "visual") (:url . "https://github.com/troyp/evil-visual-replace"))]) (evil-visual-mark-mode . [(20150202 1000) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single ((:commit . "094ee37599492885ff3144918fcdd9b74dadaaa0") (:keywords "evil"))]) (evil-vimish-fold . [(20171030 451) ((emacs (24 4)) (evil (1 0 0)) (vimish-fold (0 2 0))) "Integrate vimish-fold with evil" single ((:commit . "c617fecb91303f8c63f85a6101a503fdc88aae84") (:url . "https://github.com/alexmurray/evil-vimish-fold"))]) (evil-tutor-ja . [(20160916 1832) ((evil (1 0 9)) (evil-tutor (0 1))) "Japanese Vimtutor adapted to Evil and wrapped in a major-mode" tar ((:commit . "99af7d82e02ce3bcdfaff47c5c80b57327a7ea8d") (:keywords "convenience" "editing" "evil" "japanese") (:url . "https://github.com/kenjimyzk/evil-tutor-ja"))]) (evil-tutor . [(20150102 2250) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar ((:commit . "4e124cd3911dc0d1b6817ad2c9e59b4753638f28") (:keywords "convenience" "editing" "evil") (:url . "https://github.com/syl20bnr/evil-tutor"))]) (evil-textobj-column . [(20170905 1205) ((names (0 5)) (emacs (24)) (evil (0))) "Provides column text objects." single ((:commit . "835d7036d0bc9a6e44fc9b7c54ccf2a7c01428cd") (:keywords "evil" "column" "text-object") (:url . "https://github.com/noctuid/evil-textobj-column"))]) (evil-textobj-anyblock . [(20170905 1207) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single ((:commit . "ff00980f0634f95bf2ad9956b615a155ea8743be") (:keywords "evil") (:url . "https://github.com/noctuid/evil-textobj-anyblock"))]) (evil-text-object-python . [(20160815 141) ((emacs (24)) (evil (1 2 12))) "Python specific evil text objects" single ((:commit . "3b3fb01e7ad7eeeeae1143695547fe75148cc44f") (:keywords "evil" "python" "text-object") (:url . "https://github.com/wbolster/evil-text-object-python"))]) (evil-test-helpers . [(20180109 1040) ((evil (1 2 13))) "unit test helpers for Evil" single ((:commit . "3d9f76f3add56f670042af9421b36dfb8574ad00"))]) (evil-terminal-cursor-changer . [(20170401 142) ((evil (1 0 8))) "Change cursor shape and color by evil state in terminal" single ((:commit . "b49ca4393d2f3cc6014174950059b36a5cb22949") (:keywords "evil" "terminal" "cursor") (:url . "https://github.com/7696122/evil-terminal-cursor-changer"))]) (evil-tabs . [(20160217 720) ((evil (0 0 0)) (elscreen (0 0 0))) "Integrating Vim-style tabs for Evil mode users." single ((:commit . "53d3314a810017b6056ab6796aef671f5ea1c063") (:keywords "evil" "tab" "tabs" "vim") (:url . "https://github.com/krisajenkins/evil-tabs"))]) (evil-swap-keys . [(20170726 1120) ((emacs (24))) "intelligently swap keys on text input with evil" single ((:commit . "56bc201e265a6bd482a7c41a7c81d2238341ef3a") (:keywords "evil" "key" "swap" "numbers" "symbols") (:url . "https://github.com/wbolster/evil-swap-keys"))]) (evil-surround . [(20180102 601) ((evil (1 2 12))) "emulate surround.vim from Vim" single ((:commit . "2af81ab3ac64e4b0515a157a672d8cb89f0172b9") (:keywords "emulation" "vi" "evil"))]) (evil-string-inflection . [(20180313 1055) ((emacs (24)) (evil (1 2 13)) (string-inflection (1 0 6))) "snake_case -> CamelCase -> etc. for text objects" single ((:commit . "00b62fb82de36e9c7b44bd644c7e11ae88f35f62") (:url . "https://github.com/ninrod/evil-string-inflection"))]) (evil-space . [(20151208 428) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:commit . "a9c07284d308425deee134c9d88a2d538dd229e6") (:keywords "space" "repeat" "motion") (:url . "http://github.com/linktohack/evil-space"))]) (evil-snipe . [(20180503 141) ((emacs (24 4)) (evil (1 2 12)) (cl-lib (0 5))) "emulate vim-sneak & vim-seek" single ((:commit . "3abf6c0bd8dbc062a743893762ca8c97ec8ec07d") (:keywords "emulation" "vim" "evil" "sneak" "seek") (:url . "https://github.com/hlissner/evil-snipe"))]) (evil-smartparens . [(20171210 713) ((evil (1 0)) (emacs (24 4)) (smartparens (1 10 1))) "Evil support for smartparens" single ((:commit . "026d4a3cfce415a4dfae1457f871b385386e61d3") (:keywords "evil" "smartparens") (:url . "https://www.github.com/expez/evil-smartparens"))]) (evil-search-highlight-persist . [(20170522 2034) ((highlight (0))) "Persistent highlights after search" single ((:commit . "979d2dec58d3b9c5ca5fdf4bb802a0209913794e"))]) (evil-rsi . [(20160221 1304) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single ((:commit . "65ae60866be494e4622fe383e23975e04d2a42a3") (:keywords "evil" "rsi" "evil-rsi") (:url . "http://github.com/linktohack/evil-rsi"))]) (evil-replace-with-register . [(20170713 225) ((evil (1 0 8))) "Port of vim plugin ReplaceWithRegister" single ((:commit . "91cc7bf21a94703c441cc9212214075b226b7f67") (:keywords "evil" "plugin") (:url . "https://github.com/Dewdrops/evil-ReplaceWithRegister"))]) (evil-replace-with-char . [(20180324 1506) ((evil (1 2 13)) (emacs (24))) "replace chars of a text object with a char" single ((:commit . "ed4a12d5bff11163eb03ad2826c52fd30f51a8d3") (:url . "https://github.com/ninrod/evil-replace-with-char"))]) (evil-rails . [(20160621 1558) ((evil (1 0)) (projectile-rails (1 0))) "Rails support for Evil Mode" single ((:commit . "c8669783d8a40719b2604c58a4c06c248cab272f") (:keywords "ruby" "rails" "vim" "project" "convenience" "web" "evil" "projectile") (:url . "https://github.com/antono/evil-rails"))]) (evil-quickscope . [(20160202 1124) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single ((:commit . "37a20e4c56c6058abf186ad4013c155e695e876f") (:keywords "faces" "emulation" "vim" "evil") (:url . "http://github.com/blorbx/evil-quickscope"))]) (evil-python-movement . [(20180724 720) ((emacs (25 1)) (cl-lib (0 5)) (dash (2 13 0)) (evil (1 0)) (s (1 12 0))) "Port Neovim's python movement to Evil" single ((:commit . "9936b3b7f8d96415d517c1f3604637889484a637") (:url . "https://bitbucket.org/FelipeLema/evil-python-movement.el/"))]) (evil-paredit . [(20150413 1348) ((evil (1 0 9)) (paredit (25 -2))) "Paredit support for evil keybindings" single ((:commit . "e058fbdcf9dbf7ad6cc77f0172d7517ef233d55f") (:keywords "paredit" "evil") (:url . "https://github.com/roman/evil-paredit"))]) (evil-org . [(20180323 1606) ((emacs (24 4)) (evil (1 0))) "evil keybindings for org-mode" tar ((:commit . "b6d652a9163d3430a9e0933a554bdbee5244bbf6") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets") (:url . "https://github.com/Somelauw/evil-org-mode.git"))]) (evil-opener . [(20161207 1010) ((evil (1 2 12)) (opener (0 2 2))) "opening urls as buffers in evil" tar ((:commit . "c384f67278046fdcd220275fdd212ab85672cbeb") (:keywords "url" "http" "files") (:url . "https://github.com/0robustus1/opener.el"))]) (evil-numbers . [(20140606 551) nil "increment/decrement numbers like in vim" single ((:commit . "6ea1c8c3a9b37bed63d48f1128e9a4910e68187e") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary") (:url . "http://github.com/cofi/evil-numbers"))]) (evil-nerd-commenter . [(20180722 1625) ((emacs (24 4))) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar ((:commit . "275c95c89cc09c7096bd6fd0deabd49f29634f5d") (:keywords "commenter" "vim" "line" "evil") (:url . "http://github.com/redguardtoo/evil-nerd-commenter"))]) (evil-multiedit . [(20180209 1819) ((emacs (24 4)) (evil (1 2 12)) (iedit (0 97)) (cl-lib (0 5))) "multiple cursors for evil-mode" single ((:commit . "ea3d9177b74ab0bc65e55df9cc0a0b42e4ef815d") (:keywords "multiple cursors" "editing" "iedit") (:url . "https://github.com/hlissner/evil-multiedit"))]) (evil-mu4e . [(20180613 339) ((emacs (24 4)) (evil (1 2 10))) "evil-based key bindings for mu4e" single ((:commit . "5b22c1e30246318f233264506272d770f63897ca") (:url . "https://github.com/JorisE/evil-mu4e"))]) (evil-mc-extras . [(20170202 849) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5)) (evil-mc (0 0 2)) (evil-numbers (0 4))) "Extra functionality for evil-mc" tar ((:commit . "8c1af3232dd1e15b2ea38360b8cd1e857e11c416") (:keywords "evil" "editing" "multiple-cursors" "vim" "evil-multiple-cursors" "evil-mc" "evil-mc-extras") (:url . "https://github.com/gabesoft/evil-mc-extras"))]) (evil-mc . [(20180603 2033) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar ((:commit . "05686bc98ce4682cc47530f2045dcff2a6897ea0") (:keywords "evil" "editing" "multiple-cursors" "vim" "evil-multiple-cursors" "evil-mc" "evil-mc") (:url . "https://github.com/gabesoft/evil-mc"))]) (evil-matchit . [(20180526 557) ((evil (1 0 7))) "Vim matchit ported to Evil" tar ((:commit . "1c428e192b5c8698f8550d8862593bdca5ef9bfc") (:keywords "matchit" "vim" "evil") (:url . "http://github.com/redguardtoo/evil-matchit"))]) (evil-mark-replace . [(20150424 18) ((evil (1 0 8))) "replace the thing in marked area" single ((:commit . "56cf191724a3e82239ca47a17b071c20aedb0617") (:keywords "mark" "replace" "evil") (:url . "http://github.com/redguardtoo/evil-mark-replace"))]) (evil-magit . [(20180702 853) ((evil (1 2 3)) (magit (2 6 0))) "evil-based key bindings for magit" single ((:commit . "9e2275b14807168451e10b93d69e420e435f21ef") (:url . "https://github.com/justbur/evil-magit"))]) (evil-lispy . [(20170304 259) ((lispy (0 26 0)) (evil (1 2 12)) (hydra (0 13 5))) "precision Lisp editing with Evil and Lispy" tar ((:commit . "040a7ee130c2403a1d6dac591b94b202bb48e186") (:keywords "lisp") (:url . "https://github.com/sp3ctum/evil-lispy"))]) (evil-lisp-state . [(20160403 1948) ((evil (1 0 9)) (bind-map (0)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single ((:commit . "3c65fecd9917a41eaf6460f22187e2323821f3ce") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic") (:url . "https://github.com/syl20bnr/evil-lisp-state"))]) (evil-lion . [(20170810 2314) ((emacs (24 3)) (evil (1 0 0))) "Evil align operator, port of vim-lion" single ((:commit . "aaa3874ad54c31b4322ac5bbc63e331498b11d61") (:keywords "emulations" "evil" "vim") (:url . "http://github.com/edkolev/evil-lion"))]) (evil-ledger . [(20170905 519) ((emacs (24 4)) (evil (1 2 12))) "Make `ledger-mode' more `evil'." single ((:commit . "a282fae7921d2648a32c3207413d927d1adda8b8") (:keywords "convenience" "evil" "languages" "ledger" "vim-emulation") (:url . "https://github.com/atheriel/evil-ledger"))]) (evil-leader . [(20140606 543) ((evil (0))) "let there be <leader>" single ((:commit . "39f7014bcf8b36463e0c7512c638bda4bac6c2cf") (:keywords "evil" "vim-emulation" "leader") (:url . "http://github.com/cofi/evil-leader"))]) (evil-indent-textobject . [(20130831 1519) ((evil (0))) "evil textobjects based on indentation" single ((:commit . "70a1154a531b7cfdbb9a31d6922482791e20a3a7") (:keywords "convenience" "evil") (:url . "http://github.com/cofi/evil-indent-textobject"))]) (evil-indent-plus . [(20151109 1106) ((evil (0)) (cl-lib (0 5))) "Evil textobjects based on indentation" single ((:commit . "0c7501e6efed661242c3a20e0a6c79a6455c2c40") (:keywords "convenience" "evil") (:url . "http://github.com/TheBB/evil-indent-plus"))]) (evil-iedit-state . [(20180606 2258) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single ((:commit . "f75cff4ecbd5beaa9ca64a6c157c4105f078daec") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic") (:url . "https://github.com/syl20bnr/evil-iedit-state"))]) (evil-goggles . [(20180702 353) ((emacs (24 4)) (evil (1 0 0))) "Add a visual hint to evil operations" single ((:commit . "ea5ab4012af0eb451e2c0d996455c58f1554f7c1") (:keywords "emulations" "evil" "vim" "visual") (:url . "http://github.com/edkolev/evil-goggles"))]) (evil-god-state . [(20141116 1855) ((evil (1 0 8)) (god-mode (2 12 0))) "use god-mode keybindings in evil-mode" single ((:commit . "3d44197dc0a1fb40e7b7ff8717f8a8c339ce1d40") (:keywords "evil" "leader" "god-mode") (:url . "https://github.com/gridaphobe/evil-god-state"))]) (evil-fringe-mark . [(20180619 1534) ((emacs (24 3)) (evil (1 0 0)) (fringe-helper (0 1 1)) (goto-chg (1 6))) "Display evil-mode marks in the fringe" tar ((:commit . "fdb147d5ec8fbe087c73604374b3d491f143f2b2") (:url . "https://github.com/Andrew-William-Smith/evil-fringe-mark"))]) (evil-find-char-pinyin . [(20160514 1341) ((evil (1 2 12)) (pinyinlib (0 1 0))) "Evil's f/F/t/T/evil-snipe commands with Pinyin support" single ((:commit . "04e277946d658f1a73c68dcbbadea9c21097a31c") (:keywords "extensions"))]) (evil-extra-operator . [(20161212 2003) ((evil (1 0 7))) "Evil operator for evaluating codes, taking notes, searching via google, etc." single ((:commit . "e16a9b36f9901254da9af8a73871061616410fc3") (:keywords "evil" "plugin") (:url . "http://github.com/Dewdrops/evil-extra-operator"))]) (evil-expat . [(20180719 116) ((emacs (24 3)) (evil (1 0 0))) "Evil ex commands" single ((:commit . "3ff831784c5f301330ecced5ebd43cce42980d2b") (:keywords "emulations" "evil" "vim") (:url . "http://github.com/edkolev/evil-expat"))]) (evil-exchange . [(20170510 1959) ((evil (1 2 8)) (cl-lib (0 3))) "Exchange text more easily within Evil" single ((:commit . "47691537815150715e64e6f6ec79be7746c96120") (:keywords "evil" "plugin") (:url . "http://github.com/Dewdrops/evil-exchange"))]) (evil-escape . [(20180623 2019) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single ((:commit . "73b30bfd912f40657b1306ee5849d215f0f9ffbd") (:keywords "convenience" "editing" "evil") (:url . "https://github.com/syl20bnr/evil-escape"))]) (evil-embrace . [(20160519 1129) ((emacs (24 4)) (embrace (0 1 0)) (evil-surround (0))) "Evil integration of embrace.el" single ((:commit . "4379adea032b25e359d01a36301b4a5afdd0d1b7") (:keywords "extensions"))]) (evil-ediff . [(20170724 1223) ((evil (1 2 3))) "Make ediff a little evil" single ((:commit . "50d26cb0654fca8f8fd7227410e5cbf0b8f681cf") (:url . "https://github.com/justbur/evil-ediff"))]) (evil-easymotion . [(20180113 2254) ((emacs (24)) (avy (0 3 0)) (cl-lib (0 5))) "A port of vim's easymotion to emacs" single ((:commit . "79c13ed3bce018ac09d358e642e5bd7025e93603") (:keywords "convenience" "evil") (:url . "https://github.com/pythonnut/evil-easymotion"))]) (evil-dvorak . [(20160416 1141) ((evil (1 0 8))) "evil keybindings for that work with dvorak mode" tar ((:commit . "824f7c56980d72a0ff04c662223540cd66f13754") (:keywords "evil" "vim-emulation" "dvorak" "keyboard") (:url . "https://github.com/jbranso/evil-dvorak.git"))]) (evil-commentary . [(20170413 751) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." tar ((:commit . "395f91014b69844b81660c155f42eb9b1b3d199d") (:keywords "evil" "comment" "commentary" "evil-commentary") (:url . "http://github.com/linktohack/evil-commentary"))]) (evil-collection . [(20180722 1341) ((emacs (25 1)) (cl-lib (0 5)) (evil (1 2 13))) "A set of keybindings for Evil mode" tar ((:commit . "6e2c59c2ddd8b2d953c6152f467f41bc213533ee") (:keywords "evil" "tools") (:url . "https://github.com/emacs-evil/evil-collection"))]) (evil-colemak-minimal . [(20171006 617) ((emacs (24)) (evil (1 2 12))) "Minimal Colemak key bindings for evil-mode" single ((:commit . "6d98b6da60f414524a0d718f76024c26dce742b3") (:keywords "colemak" "evil") (:url . "https://github.com/bmallred/evil-colemak-minimal"))]) (evil-colemak-basics . [(20170425 509) ((emacs (24)) (evil (1 2 12)) (evil-snipe (2 0 3))) "Basic Colemak key bindings for evil-mode" single ((:commit . "7844079b47f47bb1dc24c885b0ac2e67524fa960") (:keywords "colemak" "evil") (:url . "https://github.com/wbolster/evil-colemak-basics"))]) (evil-cleverparens . [(20170717 2113) ((evil (1 0)) (paredit (1)) (smartparens (1 6 1)) (emacs (24 4)) (dash (2 12 0))) "Evil friendly minor-mode for editing lisp." tar ((:commit . "8c45879d49bfa6d4e414b6c1df700a4a51cbb869") (:keywords "cleverparens" "parentheses" "evil" "paredit" "smartparens") (:url . "https://github.com/luxbock/evil-cleverparens"))]) (evil-avy . [(20150908 48) ((emacs (24 1)) (cl-lib (0 5)) (avy (0 3 0)) (evil (1 2 3))) "set-based completion" single ((:commit . "2dd955cc3ecaa7ddeb67b295298abdc6d16dd3a5") (:keywords "point" "location" "evil" "vim") (:url . "https://github.com/louy2/evil-avy"))]) (evil-args . [(20140329 1429) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single ((:commit . "b4c68bfb458210bbe0b7f35951400920b06f2285") (:keywords "evil" "vim-emulation") (:url . "http://github.com/wcsmith/evil-args"))]) (evil-anzu . [(20170123 2318) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single ((:commit . "9bca6ca14d865e7e005bc02a28a09b4ae74facc9") (:url . "https://github.com/syohex/emacs-evil-anzu"))]) (evil . [(20180723 543) ((emacs (24 1)) (undo-tree (0 6 3)) (goto-chg (1 6)) (cl-lib (0 5))) "Extensible Vi layer for Emacs." tar ((:commit . "3d9f76f3add56f670042af9421b36dfb8574ad00"))]) (eve-mode . [(20170822 1531) ((emacs (25)) (polymode (1 0)) (markdown-mode (2 0))) "Major mode for editing Eve documents." single ((:commit . "a4661114d9c18725691b76321d72167ca5a9070a") (:keywords "languages" "wp" "tools") (:url . "https://github.com/witheve/emacs-eve-mode"))]) (evalator-clojure . [(20160208 1348) ((cider (0 10 0)) (evalator (1 0 0))) "Clojure evaluation context for evalator via CIDER." tar ((:commit . "caa4e0a137bdfada86593128a654e16aa617ad50") (:keywords "languages" "clojure" "cider" "helm") (:url . "http://www.github.com/seanirby/evalator-clojure"))]) (evalator . [(20160212 1728) ((helm-core (1 9 1))) "Package for interactive transformation of data with helm" tar ((:commit . "f30da4da48c0b3f3cfa1fc1c7cfdb53ffe79df36") (:keywords "languages" "elisp" "helm") (:url . "http://www.github.com/seanirby/evalator"))]) (eval-sexp-fu . [(20180509 1903) ((cl-lib (0)) (highlight (0))) "Tiny functionality enhancements for evaluating sexps." single ((:commit . "1cfd0f3e167d63080692fad97ffe0091b024ad73") (:keywords "lisp" "highlight" "convenience"))]) (eval-in-repl . [(20171122 543) ((dash (0 0 0)) (paredit (0 0 0)) (ace-window (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar ((:commit . "fea05a5b81d74ac53cb2a83aa83a73d9526bcc42") (:url . "https://github.com/kaz-yos/eval-in-repl/"))]) (eval-expr . [(20120618 2347) nil "enhanced eval-expression command" single ((:commit . "a0e69e83de41df8dbccefc1962ab4f02206a3328") (:keywords "lisp" "extensions"))]) (euslisp-mode . [(20170830 1229) ((emacs (24 3)) (s (1 9)) (exec-path-from-shell (0)) (helm-ag (0 58))) "Major mode for Euslisp-formatted text" single ((:commit . "db62a2d148482317794727982576494596365a55") (:keywords "euslisp" "euslisp" "github") (:url . "https://github.com/iory/euslisp-mode"))]) (ethan-wspace . [(20170507 1330) nil "whitespace customizations for emacs" single ((:commit . "e055ee6730c0b03525d32e67511ef6c51e4c29e4") (:keywords "whitespace" "tab" "newline" "trailing" "clean"))]) (eterm-256color . [(20180520 523) ((emacs (24 4)) (xterm-color (1 7)) (f (0 19 0))) "Customizable 256 colors for term." tar ((:commit . "ef99d3a12ddce4aa06069c19e66e826f4cfc91e4") (:keywords "faces") (:url . "http://github.com/dieggsy/eterm-256color"))]) (etable . [(20161028 1309) ((dash (2 9 0)) (interval-list (0 1)) (emacs (24 4))) "Implementation of javax.swing.JTable for Emacs." tar ((:commit . "d502141f0c69bf95256ba5cb9cd15350c7e942d2"))]) (esxml . [(20171129 7) nil "Library for working with xml via esxml and sxml" tar ((:commit . "5548ceba17deae0c3c6d0092672edc4de3c75ce3"))]) (esup . [(20180506 1639) ((cl-lib (0 5)) (emacs (24))) "the Emacs StartUp Profiler (ESUP)" tar ((:commit . "1182c490a7ddc275318c9eb25b8d5bbdf9b78d2b") (:keywords "convenience" "processes") (:url . "http://github.com/jschaf/esup"))]) (ess-view . [(20180525 1503) ((ess (15)) (s (1 8 0)) (f (0 16 0))) "View R dataframes in a spreadsheet software" single ((:commit . "dab08b405dbda5aff71022c5cf021ea18b2bde0f") (:keywords "extensions" "ess") (:url . "https://github.com/GioBo/ess-view"))]) (ess-smart-underscore . [(20170222 1715) ((ess (0))) "Ess Smart Underscore" tar ((:commit . "02e8a03553f34fe7184afff97f20e560d6f8d617") (:keywords "ess" "underscore") (:url . "http://github.com/mlf176f2/ess-smart-underscore.el"))]) (ess-smart-equals . [(20150201 2201) ((emacs (24)) (ess (5 0))) "better smart-assignment with =-key in R and S" single ((:commit . "e0f5f18f01ed252fde50d051adf1fa6254a254c9") (:keywords "r" "s" "ess" "convenience") (:url . "https://github.com/genovese/ess-smart-equals"))]) (ess-R-data-view . [(20130509 458) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ((:commit . "d6e98d3ae1e2a2ea39a56eebcdb73e99d29562e9") (:keywords "convenience") (:url . "https://github.com/myuhe/ess-R-data-view.el"))]) (ess . [(20180723 1428) nil "Emacs Speaks Statistics" tar ((:commit . "6f06460f49268dbfc1e3b5e701375d7424ecd5f5"))]) (esqlite-helm . [(20151116 50) ((esqlite (0 2 0)) (helm (20131207 845))) "Define helm source for sqlite database" single ((:commit . "bc4047e09b8f6c34802db86095cd465935670dce") (:keywords "data") (:url . "https://github.com/mhayashi1120/Emacs-esqlite"))]) (esqlite . [(20151206 406) ((pcsv (1 3 3))) "Manipulate sqlite file from Emacs" single ((:commit . "bc4047e09b8f6c34802db86095cd465935670dce") (:keywords "data") (:url . "https://github.com/mhayashi1120/Emacs-esqlite"))]) (espuds . [(20160905 600) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single ((:commit . "78fc53feaf77a98d63894cd410faee2a18107b00") (:keywords "test") (:url . "http://github.com/ecukes/espuds"))]) (espresso-theme . [(20170716 813) nil "Espresso Tutti Colori port for Emacs" single ((:commit . "e79c5c14732b7e34aab75dbcc968839536536c59") (:url . "https://github.com/dgutov/espresso-theme"))]) (eslintd-fix . [(20180429 755) ((dash (2 12 0)) (emacs (24 3))) "use eslint_d to automatically fix js files" single ((:commit . "90e451af4daa190d6c0e29fb714b0501a7cce89a") (:url . "https://github.com/aaronjensen/eslintd-fix"))]) (eslint-fix . [(20180514 0) nil "Fix JavaScript files using ESLint" single ((:commit . "f81f3b47a47460611fbdbdae1d23275ec78f2f8d") (:keywords "tools" "javascript" "eslint" "lint" "formatting" "style") (:url . "https://github.com/codesuki/eslint-fix"))]) (eshell-z . [(20170116 2038) ((cl-lib (0 5))) "cd to frequent directory in eshell" single ((:commit . "c9334cbc1552234df3437f35d98e32f4d18446b8") (:keywords "convenience") (:url . "https://github.com/xuchunyang/eshell-z"))]) (eshell-up . [(20170425 1037) ((emacs (24))) "Quickly go to a specific parent directory in eshell" single ((:commit . "9c100bae5c3020e8d9307e4332d3b64e7dc28519") (:keywords "eshell") (:url . "https://github.com/peterwvj/eshell-up"))]) (eshell-prompt-extras . [(20180109 2234) nil "Display extra information for your eshell prompt." single ((:commit . "1d8825dcc005b488c6366d0b3015fc6686194eea") (:keywords "eshell" "prompt") (:url . "https://github.com/hiddenlotus/eshell-prompt-extras"))]) (eshell-git-prompt . [(20170909 752) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 11 0))) "Some Eshell prompt for Git users" single ((:commit . "b6bb2d7bd4e393b4170b29891cfefb72ae020aab") (:keywords "eshell" "git") (:url . "https://github.com/xuchunyang/eshell-git-prompt"))]) (eshell-fringe-status . [(20170117 1516) nil "Show last status in fringe" single ((:commit . "adc6997c68e39c0d52a2af1b2fd5cf2057783797") (:url . "http://projects.ryuslash.org/eshell-fringe-status/"))]) (eshell-fixed-prompt . [(20170804 635) ((emacs (25)) (s (1 11 0))) "Restrict eshell to a single fixed prompt" single ((:commit . "4351b214de6d4e8e45279930448e2f93b491848e"))]) (eshell-did-you-mean . [(20150915 1252) ((emacs (24 1)) (cl-lib (0 5))) "command not found (\"did you mean…\" feature) in Eshell" single ((:commit . "7cb6ef8e2274d0a50a9e114d412307a6543533d5") (:keywords "eshell") (:url . "https://github.com/xuchunyang/eshell-did-you-mean"))]) (eshell-bookmark . [(20170922 814) ((emacs (24 3))) "Integrate bookmarks with eshell." single ((:commit . "deda4b848b2fb979dbe73ead2cb866610e3596ed") (:keywords "convenience" "files") (:url . "https://github.com/Fuco1/eshell-bookmark"))]) (eshell-autojump . [(20150927 24) nil "autojump command for Eshell" single ((:commit . "c6a8b81a16576df9875e721fbbfe6690d04e7e43") (:url . "http://github.com/coldnew/eshell-autojump"))]) (esh-help . [(20170829 2111) ((dash (1 4 0))) "Add some help functions and support for Eshell" single ((:commit . "8a8a9d4d9852f8bd96da3b94e95ff57097ac8ec6") (:keywords "eshell" "extensions") (:url . "https://github.com/tom-tan/esh-help/"))]) (esh-buf-stack . [(20140107 218) nil "Add a buffer stack feature to Eshell" single ((:commit . "ce0ea5aadca3150eaa9d2e6ec20296add4e99176") (:keywords "eshell" "extensions"))]) (esh-autosuggest . [(20171223 1855) ((emacs (24 4)) (company (0 9 4))) "History autosuggestions for eshell" single ((:commit . "2fd996c1a29b21e60854a3c90d7d4fc3d5b0aded") (:keywords "completion" "company" "matching" "convenience" "abbrev") (:url . "http://github.com/dieggsy/esh-autosuggest"))]) (esa . [(20180403 825) ((cl-lib (0 5))) "Interface to esa.io" single ((:commit . "417e0ac55abe9b17e0b7165d0df26bc018aff42e") (:keywords "tools" "esa") (:url . "https://github.com/nabinno/esa.el"))]) (es-windows . [(20140211 104) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single ((:commit . "239e30408cb1adb4bc8bd63e2df34711fa910b4f") (:url . "https://github.com/sabof/es-windows"))]) (es-mode . [(20180212 1425) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0)) (s (1 11 0)) (request (0 3 0))) "A major mode for editing and executing Elasticsearch queries" tar ((:commit . "c5ad728ce3fc2c513108e0ada2cd0c08ab94f870") (:keywords "elasticsearch") (:url . "http://www.github.com/dakrone/es-mode"))]) (es-lib . [(20141111 1030) ((cl-lib (0 3))) "A collection of emacs utilities" tar ((:commit . "753b27363e39c10edc9e4e452bdbbbe4d190df4a") (:url . "https://github.com/sabof/es-lib"))]) (ert-runner . [(20180215 857) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:commit . "0de42343a9de834320397d169c81725b2827e41f") (:keywords "test") (:url . "http://github.com/rejeep/ert-runner.el"))]) (ert-modeline . [(20140115 215) ((s (1 3 1)) (dash (1 2 0)) (emacs (24 1)) (projectile (0 9 1))) "displays ert test results in the modeline." single ((:commit . "e7be2b81191afb437b70368a819770f8f750e4af") (:keywords "tools" "tests" "convenience"))]) (ert-junit . [(20180511 1548) ((ert (0))) "JUnit XML reports from ert results" single ((:commit . "3d3521284db1d4da59a3b303c957835c742ec36e") (:keywords "tools" "test" "unittest" "ert") (:url . "http://bitbucket.org/olanilsson/ert-junit"))]) (ert-expectations . [(20121009 34) nil "The simplest unit test framework in the world" single ((:commit . "aed70e002c4305b66aed7f6d0d48e9addd2dc1e6") (:keywords "test" "unittest" "ert" "expectations") (:url . "http://www.emacswiki.org/emacs/download/ert-expectations.el"))]) (ert-async . [(20151011 659) nil "Async support for ERT" single ((:commit . "f64a7ed5b0d2900c9a3d8cc33294bf8a79bc8526") (:keywords "test") (:url . "http://github.com/rejeep/ert-async.el"))]) (eros . [(20180414 2318) ((emacs (24 4))) "Evaluation Result OverlayS for Emacs Lisp" single ((:commit . "dd8910279226259e100dab798b073a52f9b4233a") (:keywords "convenience" "lisp") (:url . "https://github.com/xiongtx/eros"))]) (erlang . [(20180618 557) ((emacs (24 1))) "Erlang major mode" tar ((:commit . "fc12f6935028bf03a46892fc833aaa117d2cbc9e"))]) (ergoemacs-status . [(20160317 2238) ((powerline (2 3)) (mode-icons (0 1 0))) "Adaptive Status Bar / Mode Line" single ((:commit . "d952cc2361adf6eb4d6af60950ad4ab699c81320"))]) (ergoemacs-mode . [(20180709 645) ((emacs (24 1)) (undo-tree (0 6 5)) (cl-lib (0 5))) "Emacs mode based on common modern interface and ergonomics." tar ((:commit . "a5d46653fd3a521276630c81bf75d3e8d224e5cb") (:keywords "convenience") (:url . "https://github.com/ergoemacs/ergoemacs-mode"))]) (erefactor . [(20160121 159) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single ((:commit . "bf68085e5635eb94fd85709f8e1355c1f5534745") (:keywords "extensions" "tools" "maint") (:url . "https://github.com/mhayashi1120/Emacs-erefactor"))]) (eredis . [(20180221 1313) nil "eredis, a Redis client in emacs lisp" single ((:commit . "8a96034805fe0664132ce2e12deb9936503af2d4") (:url . "http://code.google.com/p/eredis/"))]) (ereader . [(20170809 2201) ((emacs (24 4)) (dash (2 12 1)) (s (1 10 0)) (xml+ (0 0 0))) "Major mode for reading ebooks with org-mode integration" tar ((:commit . "f3bbd3f13195f8fba3e3c880aab0e4c60430dcf3") (:keywords "epub" "ebook") (:url . "https://github.com/bddean/emacs-ereader"))]) (ercn . [(20150523 803) nil "Flexible ERC notifications" single ((:commit . "79a4df5609046ae2e2e3375998287be6dda80615") (:url . "http://www.github.com/leathekd/ercn"))]) (erc-yt . [(20150426 549) ((dash (2 10 0))) "An erc module to display youtube links nicely" single ((:commit . "43e7d49325b17a3217a6ffb4a9daf75c5ff4e6f8") (:keywords "multimedia"))]) (erc-youtube . [(20150603 1436) nil "Show info about a YouTube URL in an ERC buffer." single ((:commit . "97054ba8475b442e2aa81e5a291f668b7f28697f") (:keywords "multimedia"))]) (erc-view-log . [(20140227 1239) nil "Major mode for viewing ERC logs" single ((:commit . "c5a25f0cbca84ed2e4f72068c02b66bd0ea3b266") (:keywords "erc" "viewer" "logs" "colors") (:url . "http://github.com/Niluge-KiWi/erc-view-log/raw/master/erc-view-log.el"))]) (erc-twitch . [(20170426 2306) ((json (1 3)) (erc (5 0))) "Support for Twitch emotes for ERC." single ((:commit . "53c6af0cb72e56d897d30a40e7e5066668d6b5ec") (:keywords "twitch" "erc" "emotes") (:url . "https://github.com/vibhavp/erc-twitch"))]) (erc-tweet . [(20150920 558) nil "shows text of a tweet when an url is posted in erc buffers" single ((:commit . "91fed61e139fa788d66a7358f0d50acc896414b8") (:keywords "extensions"))]) (erc-track-score . [(20130328 515) nil "Add score support to tracked channel buffers" single ((:commit . "5b27531ea6b1a4c4b703b270dfa9128cb5bfdaa3") (:url . "http://julien.danjou.info/erc-track-score.html"))]) (erc-terminal-notifier . [(20140115 224) nil "OSX notifications via the terminal-notifier gem for Emacs ERC." single ((:commit . "a3dacb935845e4a20031212bbd82b2170f68d2a8") (:keywords "erc" "terminal-notifier" "nick") (:url . "http://github.com/julienXX/"))]) (erc-status-sidebar . [(20171223 1324) ((emacs (24 5)) (seq (2 3))) "a hexchat-like activity overview for ERC channels" single ((:commit . "ea4189a1dbfe60117359c36e681ad7c389e2968c") (:url . "https://github.com/drewbarbs/erc-status-sidebar"))]) (erc-social-graph . [(20150508 504) nil "A social network graph module for ERC." single ((:commit . "e6ef3416a1c5064054bf054d9f0c1c7bf54a9cd0") (:keywords "erc" "graph") (:url . "https://github.com/vibhavp/erc-social-graph"))]) (erc-scrolltoplace . [(20180607 2306) ((emacs (24 0)) (switch-buffer-functions (0 0 1))) "An Erc module to scrolltobottom better with keep-place" single ((:commit . "feb0fbf1fd4bdf220ae2d31ea7c066d8e62089f9") (:keywords "erc" "module" "comm" "scrolltobottom" "keep-place") (:url . "http://gitlab.com/jgkamat/erc-scrolltoplace"))]) (erc-image . [(20180522 724) nil "Show received image urls in the ERC buffer" single ((:commit . "82fb3871f02e24b1e880770b9a3d187aab43d0f0") (:keywords "multimedia"))]) (erc-hl-nicks . [(20180415 1246) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((:commit . "756c4438a8245ccd3e389bf6c9850ee8453783ec") (:url . "http://www.github.com/leathekd/erc-hl-nicks"))]) (erc-hipchatify . [(20170314 937) ((emacs (24 4)) (s (1 10 0)) (alert (1 2)) (request (0 2 0))) "Provide emoticons and html rendering for HipChat" single ((:keywords "erc" "bitlbee" "hipchat" "multimedia") (:url . "https://bitbucket.org/seanfarley/erc-hipchatify"))]) (erc-crypt . [(20161228 739) ((cl-lib (0 5))) "Symmetric Encryption for ERC" single ((:commit . "731f9264a5bf08a8fc0b5ce69e72058c86f873a5") (:keywords "comm") (:url . "https://github.com/atomontage/erc-crypt"))]) (erc-colorize . [(20170107 539) nil "Per user colorization of whole message" single ((:commit . "d026a016dcb9d63d9ac66d30627a92a8f1681bbd") (:keywords "erc" "convenience") (:url . "https://github.com/thisirs/erc-colorize.git"))]) (eproject . [(20180312 942) ((helm (1 6 4))) "assign files to projects, programatically" tar ((:commit . "068218d2cf2138cb2e8fc29b57e773a0097a7e8b") (:keywords "programming" "projects"))]) (eprime-mode . [(20140513 1116) nil "An E-prime checking mode for Emacs" single ((:commit . "17a481af26496be91c07139a9bfc05cfe722506f") (:keywords "e-prime" "english" "grammar") (:url . "https://github.com/AndrewHynes/eprime-mode"))]) (epresent . [(20160410 1901) ((org (8)) (cl-lib (0 5))) "Simple presentation mode for Emacs Org-mode" single ((:commit . "6c8abedcf46ff08091fa2bba52eb905c6290057d") (:keywords "gui") (:url . "https://github.com/dakrone/epresent"))]) (epm . [(20161027 34) ((emacs (24 3)) (epl (0 8))) "Emacs Package Manager" tar ((:commit . "ab3d194fc4d11520d6b9bce4746d7242f3f1606a") (:url . "https://github.com/xuchunyang/epm"))]) (epl . [(20180205 1249) ((cl-lib (0 3))) "Emacs Package Library" single ((:commit . "78ab7a85c08222cd15582a298a364774e3282ce6") (:keywords "convenience") (:url . "http://github.com/cask/epl"))]) (epkg . [(20180627 1353) ((closql (0 4 0)) (dash (2 13 0)) (emacs (25 1))) "browse the Emacsmirror package database" tar ((:commit . "740b06cb11871f65b16cda602c5d8fc23138e99f") (:keywords "tools") (:url . "https://github.com/emacscollective/epkg"))]) (epic . [(20170209 1623) ((htmlize (1 47))) "Evernote Picker for Cocoa Emacs" single ((:commit . "a41826c330eb0ea061d58a08cc861b0c4ac8ec4e") (:keywords "evernote" "applescript") (:url . "https://github.com/yoshinari-nomura/epic"))]) (epc . [(20140609 2234) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar ((:commit . "e1bfa5ca163273859336e3cc89b4b6460f7f8cda") (:keywords "lisp" "rpc") (:url . "https://github.com/kiwanami/emacs-epc"))]) (eopengrok . [(20160903 2359) ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) "opengrok interface for emacs" single ((:commit . "78f734328aaf19c52720415c037708ece1944c4c") (:keywords "tools"))]) (envdir . [(20160221 1123) ((emacs (24)) (dash (2 10 0)) (f (0 17 2))) "Modify environment according to files in a specified directory" single ((:commit . "f29346c55ccf11d8c75628edc6d430ed63c36917") (:url . "https://github.com/proofit404/envdir-mode"))]) (ensime . [(20180615 630) ((scala-mode (0 23)) (sbt-mode (0 2)) (yasnippet (0 10 0)) (company (0 9 0)) (dash (2 12 1)) (s (1 11 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar ((:commit . "34eb11dac3ec9d1c554c2e55bf056ece6983add7") (:keywords "languages") (:url . "https://github.com/ensime/ensime-emacs"))]) (enotify . [(20130407 648) nil "A networked notification system for emacs" tar ((:commit . "7fd2f48ef4ff32c8f013c634ea2dd6b1d1409f80"))]) (eno . [(20160110 234) ((dash (2 12 1)) (edit-at-point (1 0))) "Goto/copy/cut any word/symbol/line in view, similar to ace-jump/easymotion" single ((:commit . "40075bb1ed9e62f42c5799f3d3721734742ed417") (:url . "http://github.com/enoson/eno.el"))]) (enlive . [(20170725 717) nil "query html document with css selectors" single ((:commit . "604a8ca272b6889f114e2b5a13adb5b1dc4bae86") (:keywords "css" "selector" "query") (:url . "http://github.com/zweifisch/enlive"))]) (enh-ruby-mode . [(20180403 1251) ((emacs (24))) "Major mode for editing Ruby files" tar ((:commit . "fd50e71913e4dc714f71020701ab398a18b524b6") (:keywords "languages" "elisp" "ruby") (:url . "http://github.com/zenspider/Enhanced-Ruby-Mode"))]) (engine-mode . [(20180401 946) ((cl-lib (0 5))) "Define and query search engines from within Emacs." single ((:commit . "fd5a235b2c93b95143d676e6b654e388d7cdd956") (:url . "https://github.com/hrs/engine-mode"))]) (encourage-mode . [(20151128 105) ((emacs (24 4))) "Encourages you in your work. :D" single ((:commit . "99edacf2d94d168d3da0609860dc7253db7c9815") (:keywords "fun") (:url . "https://github.com/halbtuerke/encourage-mode.el"))]) (enclose . [(20121008 914) nil "Enclose cursor within punctuation pairs." tar ((:commit . "2747653e84af39017f503064bc66ed1812a77259"))]) (emr . [(20180708 1011) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1)) (clang-format (0)) (iedit (0 97))) "Emacs refactoring system." tar ((:commit . "247f31f01716d179ec624ad741175a2cfb8c07ea") (:keywords "tools" "convenience" "refactoring"))]) (empos . [(20151011 1216) nil "Locate bibtex citations from within emacs" single ((:commit . "7b99ad30e56937adb7e6349777e5a2045597d564") (:keywords "citations" "reference" "bibtex" "reftex") (:url . "http://github.com/dimalik/empos/"))]) (emojify-logos . [(20171125 214) ((emojify (0 4))) "Add logos to emojify" tar ((:commit . "96c74383a7c69e839ba41de3507154ca4ad564a1") (:url . "https://github.com/mxgoldstein/emojify-logos"))]) (emojify . [(20180611 838) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar ((:commit . "38ae28d95b58e9fb86a3495a2dda3e5de254c4fc") (:keywords "multimedia" "convenience") (:url . "https://github.com/iqbalansari/emacs-emojify"))]) (emoji-recall . [(20160723 1508) ((emacs (24))) "How many emoji can you recall from memory?" tar ((:commit . "d9122f8fb1467309260109a1985cd14f18fdf631") (:keywords "game") (:url . "https://github.com/lujun9972/emoji-recall.el"))]) (emoji-fontset . [(20160726 1224) nil "Set font face for Emoji." single ((:commit . "10be897fa5165fd40fd35a89e38c759e008fa775") (:keywords "emoji" "font" "config"))]) (emoji-display . [(20140117 213) nil "emoji displaying module" single ((:commit . "bb4217f6400151a9cfa6d4524b8427f01feb5193") (:keywords "emoji") (:url . "https://github.com/ikazuhiro/emoji-display"))]) (emoji-cheat-sheet-plus . [(20150617 631) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar ((:commit . "96a003127d646a2683d81ca906a17eace0a6413e") (:keywords "emacs" "emoji") (:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus"))]) (emms-state . [(20160504 105) ((emms (0))) "Display track description and playing time in the mode line" single ((:commit . "77930300222333b71eafd495cc1fee3a3585eb23") (:keywords "emms") (:url . "https://github.com/alezost/emms-state.el"))]) (emms-soundcloud . [(20131221 345) ((emms (20131016)) (json (1 2))) "EMMS source for Soundcloud audio sharing platform" single ((:commit . "87e5cbf9609d1f26c24dc834fdeb78b33d453c2b") (:keywords "emms" "soundcloud") (:url . "http://github.com/osener/emms-soundcloud"))]) (emms-player-simple-mpv . [(20180316 849) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar ((:commit . "101d120ccdee1c2c213fd2f0423c858b21649c00") (:keywords "emms" "mpv") (:url . "https://github.com/momomo5717/emms-player-simple-mpv"))]) (emms-player-mpv-jp-radios . [(20180325 417) ((emacs (24)) (cl-lib (0 5)) (emms (4 0)) (emms-player-simple-mpv (0 1 7))) "EMMS players and stream lists of Japan radio stations" tar ((:commit . "f6b37f5878c741124d5fca43c5b80af873541edd") (:keywords "emms" "mpv" "radio") (:url . "https://github.com/momomo5717/emms-player-mpv-jp-radios"))]) (emms-player-mpv . [(20180503 1427) ((emms (0))) "mpv support for EMMS" single ((:commit . "9c9ffc6f00a737a6db6377681a88e5292ebcf86b") (:keywords "multimedia" "emms" "mpv") (:url . "https://github.com/dochang/emms-player-mpv/"))]) (emms-mode-line-cycle . [(20160221 320) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single ((:commit . "2c2f395e484a1d345050ddd61ff5fab71a92a6bc") (:keywords "emms" "mode-line") (:url . "https://github.com/momomo5717/emms-mode-line-cycle"))]) (emms-mark-ext . [(20130528 2027) ((emms (3 0))) "Extra functions for emms-mark-mode and emms-tag-edit-mode" single ((:commit . "ec68129e3e9e469e5bf160c6a1b7030e322f3541") (:keywords "convenience" "multimedia") (:url . "https://github.com/vapniks/emms-mark-ext"))]) (emms-info-mediainfo . [(20131223 500) ((emms (0))) "Info-method for EMMS using medianfo" single ((:commit . "bce16eae9eacd38719fea62a9755225a888da59d") (:keywords "multimedia" "processes"))]) (emms-bilibili . [(20180102 2018) ((emacs (25)) (cl-lib (0 5))) "Play Bilibili in EMMS." single ((:commit . "294bca3dfc42fe3a55fb326ab39bc0fcfc8c5090") (:keywords "emms" "bilibili") (:url . "https://github.com/stardiviner/emms-bilibili"))]) (emms . [(20180708 1823) ((cl-lib (0 5))) "The Emacs Multimedia System" tar ((:commit . "9b702f38e3486d67cb67194e98ea72dda25be1af") (:keywords "emms" "mp3" "mpeg" "multimedia") (:url . "http://www.gnu.org/software/emms/"))]) (emmet-mode . [(20180612 2041) nil "Unofficial Emmet's support for emacs" single ((:commit . "1acb821e0142136344ccf40c1e5fb664d7db2e70") (:keywords "convenience") (:url . "https://github.com/smihica/emmet-mode"))]) (emlib . [(20161126 723) ((dash (2 13 0)) (cl-lib (0 5))) "A Machine Learning library for Emacs" tar ((:commit . "dea2af00f551ea580c641d86dd69219f7d4f3685") (:keywords "data" "ai" "neural networks" "ml") (:url . "https://github.com/narendraj9/emlib.git"))]) (embrace . [(20171031 1133) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" single ((:commit . "dd5da196e5bcc5e6d87e1937eca0c21da4334ef2") (:keywords "extensions"))]) (ember-yasnippets . [(20160526 958) ((yasnippet (0 8 0))) "Snippets for Ember.js development" tar ((:commit . "3b5bd01569646237bf1b540d097e12f9118b67f4") (:keywords "tools" "abbrev" "languages"))]) (ember-mode . [(20171208 559) ((cl-lib (0 5))) "Ember navigation mode for emacs" single ((:commit . "755256782478cb724edd8f111225d7c8d342f90c") (:keywords "ember" "ember.js" "emberjs"))]) (emaps . [(20180712 1216) nil "utilities for working with keymaps." single ((:commit . "823b8f72e6459c9f1a5dd62451ee4005ef71d955") (:keywords "convenience" "keyboard" "keymap" "utility") (:url . "https://github.com/GuiltyDolphin/emaps"))]) (emamux-ruby-test . [(20130812 939) ((emamux (0 1)) (projectile (0 9 1))) "Ruby test with emamux" single ((:commit . "23b73c650573b340351a919da3da416acfc2ac84") (:url . "https://github.com/syohex/emamux-ruby-test"))]) (emamux . [(20170226 1937) ((emacs (24 3))) "Interact with tmux" single ((:commit . "39f57786b2cdd3844888df42d71c7bd251f07158") (:url . "https://github.com/syohex/emacs-emamux"))]) (emacsshot . [(20161018 743) nil "Snapshot a frame or window from within Emacs" tar ((:commit . "11ace77ab718292d05b82d93178380aff591468b") (:keywords "convenience") (:url . "https://github.com/marcowahl/emacsshot"))]) (emacsql-sqlite . [(20180128 1252) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar ((:commit . "6f1e375a2ebb558138b73d2a63f2077da1028f92") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql-psql . [(20171218 1827) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for PostgreSQL via psql" tar ((:commit . "6f1e375a2ebb558138b73d2a63f2077da1028f92") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql-mysql . [(20171218 1827) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for MySQL" single ((:commit . "6f1e375a2ebb558138b73d2a63f2077da1028f92") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql . [(20180712 1052) ((emacs (25 1))) "high-level SQL database front-end" tar ((:commit . "6f1e375a2ebb558138b73d2a63f2077da1028f92") (:url . "https://github.com/skeeto/emacsql"))]) (emacsist-view . [(20160426 523) nil "Mode for viewing emacsist.com" single ((:commit . "f67761259ed779a9bc95c9a4e0474522990c5c6b") (:keywords "convenience" "usability") (:url . "https://github.com/lujun9972/emacsist-view"))]) (emacsc . [(20161028 1006) nil "helper for emacsc(1)" tar ((:commit . "421e0c567358769e32f670ae8e949d99abae0c28") (:keywords "tools") (:url . "https://github.com/knu/emacsc"))]) (emacsagist . [(20140331 1130) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single ((:commit . "aba342ba59c254a88017f25e9fb7a8cd6f2fda83") (:keywords "tools") (:url . "http://github.com/echosa/emacsagist"))]) (emacs-setup . [(20120727 726) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar ((:commit . "c783ec13e3b39093fffb6f6d64dccdce8ce4d375"))]) (elx . [(20180614 1957) ((emacs (26))) "extract information from Emacs Lisp libraries" single ((:commit . "10a21c35915e249d5487aa3ced70fcfb749a9d0c") (:keywords "docs" "libraries" "packages") (:url . "https://github.com/emacscollective/elx"))]) (elwm . [(20150817 307) ((dash (1 1 0))) "Minimalistic window manager for emacs" single ((:commit . "c33b183f006ad476c3a44dab316f580f8b369930") (:keywords "docs") (:url . "https://github.com/Fuco1/elwm"))]) (elvish-mode . [(20170913 1939) ((emacs (24 3))) "Defines a major mode for Elvish" single ((:commit . "9cf31b453ac79b011b84e83ca11c964c4e647649") (:url . "https://github.com/ALSchwalm/elvish-mode"))]) (elscreen-separate-buffer-list . [(20161106 1958) ((emacs (24 4)) (elscreen (1 4 6))) "Separate buffer list manager for elscreen" single ((:commit . "7652d827aa1b8c1b04303c5b4b0bda5e8f85565e") (:keywords "elscreen"))]) (elscreen-multi-term . [(20151021 1933) ((emacs (24 4)) (elscreen (1 4 6)) (multi-term (1 3))) "Multi term for elscreen" single ((:commit . "7b6048a0dd80f69460a62bbc6f1af8856141a5ea") (:keywords "elscreen" "multi term"))]) (elscreen-mew . [(20160504 1135) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:commit . "c90a23441d836da14a1cb12788432308ba58e2b6") (:url . "https://github.com/masutaka/elscreen-mew"))]) (elscreen-fr . [(20160920 253) ((elscreen (0)) (seq (1 11))) "Use frame title as screen tab" single ((:commit . "b9c11f80d277086d5d5bf88623e15fc7adbbbe3c") (:url . "http://github.com/rocher/elscreen-fr"))]) (elscreen-buffer-group . [(20170808 1825) ((emacs (24 4)) (elscreen (0)) (cl-lib (0 5))) "elscreen buffer group" single ((:commit . "a3cd4d7eae3cca87bede4b39a46d3c0641f8cd06") (:keywords "buffer") (:url . "https://github.com/jeffgran/elscreen-buffer-group"))]) (elscreen . [(20180320 1902) ((emacs (24))) "Emacs window session manager" tar ((:commit . "02164afab2c5fbff6e4aa7c59e0daedc6c504772") (:keywords "window" "convenience") (:url . "https://github.com/knu/elscreen"))]) (elquery . [(20180513 1912) ((emacs (25 1)) (s (1 11 0)) (dash (2 13 0))) "The HTML library for elisp." single ((:commit . "a0d135e3230fc56fc88d790bbc3d87f53de5741e") (:keywords "html" "hypermedia" "tools" "webscale") (:url . "https://github.com/AdamNiederer/elquery"))]) (elpygen . [(20171225 936) ((emacs (25)) (yasnippet (0 8 0))) "Generate a Python function/method using a symbol under point" single ((:commit . "21929c997a05968f9eefe52b85a76ceaab3b0d81") (:keywords "python" "languages" "tools") (:url . "https://github.com/vkazanov/elpygen"))]) (elpy . [(20180720 155) ((company (0 9 2)) (emacs (24 4)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar ((:commit . "db0ee080424ef39b4cd2782a3dbd0afccaaafd04"))]) (elpa-mirror . [(20180228 1636) ((emacs (24 4))) "Create local package repository so package upgrade never breaks" single ((:commit . "6ca78e3fb69ef582da1a01f1d193e07ae8223142") (:keywords "cloud" "mirror" "elpa") (:url . "http://github.com/redguardtoo/elpa-mirror"))]) (elpa-clone . [(20170502 514) ((emacs (24 4)) (cl-lib (0))) "Clone ELPA archive" single ((:commit . "92f4c9d3570ad002575a90d0cc4a522c203a1110") (:keywords "comm" "elpa" "clone" "mirror") (:url . "https://github.com/dochang/elpa-clone"))]) (elpa-audit . [(20141023 631) nil "Handy functions for inspecting and comparing package archives" single ((:commit . "727da50e626977351aff2675b6540a36818bbbe6") (:keywords "maint") (:url . "https://github.com/purcell/elpa-audit"))]) (eloud . [(20160731 857) ((emacs (24 4))) "A lightweight, interactive screen reader" single ((:commit . "82c97918585bd2a749251ae87d7732ca9d856c16") (:keywords "extensions") (:url . "https://github.com/smythp/eloud"))]) (elogcat . [(20151120 1641) ((s (1 9 0)) (dash (2 10 0))) "logcat interface" single ((:commit . "4f311b7a07565b0d060334bc68edb36f2bff703f") (:keywords "tools"))]) (elog . [(20160724 1555) ((eieio (1 3))) "logging library extended from logito" single ((:commit . "a67237d9813c7591614d95e2ef31cc5e5ed3f31b") (:keywords "lisp" "tool" "log"))]) (elnode . [(20140203 1506) ((web (0 1 4)) (dash (1 1 0)) (noflet (0 0 7)) (s (1 5 0)) (creole (0 8 14)) (fakir (0 1 6)) (db (0 0 5)) (kv (0 0 17))) "The Emacs webserver." tar ((:commit . "3f2bf225853e40a2a10386ee5ae0bd6ba5d44ce9"))]) (elmine . [(20170511 20) ((s (1 10 0))) "Redmine API access via elisp." single ((:commit . "432d2f2f7cb5b533f25b993d1001abcadcebe8ed") (:keywords "tools") (:url . "http://github.com/leoc/elmine"))]) (elmacro . [(20180628 711) ((s (1 11 0)) (dash (2 13 0))) "Convert keyboard macros to emacs lisp" single ((:commit . "89b9b0feabafd01fee48111d67131c4c9b5fed9a") (:keywords "macro" "elisp" "convenience") (:url . "https://github.com/Silex/elmacro"))]) (elm-yasnippets . [(20160331 2224) ((yasnippet (0 8 0))) "Yasnippets for Elm" tar ((:commit . "45a11a0cef0c36633fb3477d3dc4167e82779ba4") (:keywords "snippets"))]) (elm-mode . [(20180114 9) ((f (0 17)) (let-alist (1 0 4)) (seq (2 2)) (s (1 7 0)) (emacs (24 4)) (dash (2 13 0))) "Major mode for Elm" tar ((:commit . "09c6e62e14a2c9afaad03a867c7a268b6bc68ab0") (:url . "https://github.com/jcollard/elm-mode"))]) (elixir-yasnippets . [(20150417 539) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar ((:commit . "980ca7626c14ef0573bec0035ec7942796062783"))]) (elixir-mode . [(20180711 545) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar ((:commit . "90323cd7669eb472ee1f97b9d070056ebe225d15") (:keywords "languages" "elixir") (:url . "https://github.com/elixir-lang/emacs-elixir"))]) (elisp-slime-nav . [(20160128 1109) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ((:commit . "34938422929800839e2f935aca890cd4a229ca99") (:keywords "navigation" "slime" "elisp" "emacs-lisp") (:url . "https://github.com/purcell/elisp-slime-nav"))]) (elisp-sandbox . [(20131116 1042) nil "Evaluate EmacsLisp expressions in a sandbox" single ((:commit . "d894d68934ef09c42f72ac4e1173a0bedc23f139") (:keywords "lisp") (:url . "https://github.com/joelmccracken/elisp-sandbox"))]) (elisp-refs . [(20180715 1602) ((dash (2 12 0)) (loop (1 2)) (s (1 11 0))) "find callers of elisp functions or macros" single ((:commit . "7faa17293b8fc9e4b5c98a0dbe53bf3c2705a3f2") (:keywords "lisp"))]) (elisp-lint . [(20180224 1242) ((emacs (24))) "basic linting for Emacs Lisp" single ((:commit . "04b0d36ec0e4dc1bb54c2bf4c2d16b2af8cf6a39") (:keywords "lisp" "maint" "tools") (:url . "http://github.com/gonewest818/elisp-lint/"))]) (elisp-format . [(20160508 252) nil "Format elisp code" single ((:commit . "03cc293eb2f78ec58fc1d84279af06816a04b979") (:url . "https://github.com/Yuki-Inoue/elisp-format"))]) (elisp-docstring-mode . [(20170304 815) nil "Major mode for editing elisp docstrings." single ((:commit . "f512e509dd690f65133e55563ebbfd2dede5034f") (:keywords "languages"))]) (elisp-depend . [(20161230 750) nil "Parse depend libraries of elisp file." single ((:commit . "e4b201ac7dcee4489d58800c299fd04aaa61d07a"))]) (elisp-def . [(20180410 224) ((dash (2 12 0)) (f (0 19 0)) (s (1 11 0)) (emacs (24 3))) "macro-aware go-to-definition for elisp" single ((:commit . "ff0730b8110f776862b29bf0b66e396fab2aaafb") (:keywords "lisp"))]) (elhome . [(20161025 1342) ((initsplit (20120630))) "A framework for a \"home\" Emacs configuration" tar ((:commit . "e789e806469af3e9705f72298683c21f6c3a516d") (:keywords "lisp") (:url . "http://github.com/demyanrogozhin/elhome"))]) (elgrep . [(20180302 527) ((emacs (25 1))) "Searching files for regular expressions" single ((:commit . "5e982024250e75fe02aee358a542ae3ed2a472d5") (:keywords "tools" "matching" "files" "unix") (:url . "https://github.com/TobiasZawada/elgrep"))]) (elfeed-web . [(20180513 524) ((simple-httpd (1 4 3)) (elfeed (1 4 0)) (emacs (24 1))) "web interface to Elfeed" tar ((:commit . "a6fc231e47f1071cd4d1363926868761f7f0bcd8"))]) (elfeed-protocol . [(20180409 813) ((emacs (24 4)) (elfeed (2 1 1)) (cl-lib (0 5))) "Provide owncloud/ttrss protocols for elfeed" tar ((:commit . "611a1f57373e3692abf5122652ea7f6f96d3f6ec") (:keywords "news") (:url . "https://github.com/fasheng/elfeed-protocol"))]) (elfeed-org . [(20180129 507) ((elfeed (1 1 1)) (org (8 2 7)) (dash (2 10 0)) (s (1 9 0)) (cl-lib (0 5))) "Configure elfeed with one or more org-mode files" single ((:commit . "b9d09a554127244d4807a3d2d90e062df63b2fd5") (:keywords "news") (:url . "https://github.com/remyhonig/elfeed-org"))]) (elfeed-goodies . [(20171126 2251) ((popwin (1 0 0)) (powerline (2 2)) (elfeed (2 0 0)) (cl-lib (0 5)) (noflet (0 0 10)) (ace-jump-mode (2 0))) "Elfeed goodies" tar ((:commit . "fc0c3e72f9fcd7bbf5237f6f2323bc666e8240b4") (:url . "https://github.com/algernon/elfeed-goodies"))]) (elfeed . [(20180713 529) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar ((:commit . "a6fc231e47f1071cd4d1363926868761f7f0bcd8"))]) (elf-mode . [(20161009 48) ((emacs (24 3))) "Show symbols in binaries" single ((:commit . "cd280d683cd3341d8bb31af6db7e3b74a133e6ab") (:keywords "matching") (:url . "https://github.com/abo-abo/elf-mode"))]) (elein . [(20120120 316) nil "running leiningen commands from emacs" single ((:commit . "d4c0c0491dbb7c90e953d7a16172107c37103605") (:keywords "tools" "processes") (:url . "https://github.com/remvee/elein"))]) (electric-spacing . [(20161209 1157) nil "Insert operators with surrounding spaces smartly" single ((:commit . "9d0f8a213133f2619a4e9dfbba3b00d4348c07b0"))]) (electric-operator . [(20180627 1012) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" tar ((:commit . "35db75d5c2dbed1eeab4e4126ccb84714136a307") (:keywords "electric") (:url . "https://github.com/davidshepherd7/electric-operator"))]) (electric-case . [(20150417 412) nil "insert camelCase, snake_case words without \"Shift\"ing" single ((:commit . "bac64e772107e3dc721a9819f63b9ebdc28a81f7") (:url . "http://hins11.yu-yake.com/"))]) (eldoc-overlay . [(20171219 140) ((emacs (24 3)) (inline-docs (1 0 1)) (quick-peek (1 0))) "Display eldoc with contextual documentation overlay." single ((:commit . "a391396f4cdf30a2f27a4c426b58b44ab3d0f0d0") (:keywords "documentation" "eldoc" "overlay") (:url . "https://github.com/stardiviner/eldoc-overlay"))]) (eldoc-eval . [(20180607 457) nil "Enable eldoc support when minibuffer is in use." single ((:commit . "f59a1ae7ecfa97ef659c7adb93e0673419acc485"))]) (elcouch . [(20180529 57) ((emacs (25 1)) (json-mode (1 0 0)) (libelcouch (0 7 0))) "View and manipulate CouchDB databases" single ((:commit . "608fe254a7ee69c43c69b905ef708189dc3e3192") (:keywords "data" "tools") (:url . "https://gitlab.petton.fr/DamienCassou/elcouch"))]) (elcord . [(20180411 1207) ((emacs (25))) "Allows you to integrate Rich Presence from Discord" tar ((:commit . "0cef4ca13b00d79507292d5591be8ffb7df5a9ca") (:keywords "games") (:url . "https://github.com/Mstrodl/elcord"))]) (elcontext . [(20180526 604) ((ht (2 3)) (hydra (0 14 0)) (emacs (24 3)) (f (0 20 0)) (osx-location (0 4)) (uuidgen (0 3))) "Create context specific actions" tar ((:commit . "f434ffc655e6349a4dd52285ff68a9194bcfc949") (:keywords "calendar" "convenience") (:url . "https://github.com/rollacaster/elcontext"))]) (elbank . [(20180316 643) ((emacs (25)) (seq (2 16))) "Personal finances reporting application" tar ((:commit . "fa9bc7dec0a8fd489e90b9f178719344cc8d315a") (:keywords "tools" "personal-finances"))]) (el2org . [(20180311 855) ((emacs (25 1))) "Convert elisp file to org file" single ((:commit . "81f1c97db8911f5bdf92c729630ab509de4ec73f") (:keywords "convenience") (:url . "https://github.com/tumashu/el2org"))]) (el2markdown . [(20170630 1158) nil "Convert commentary section of elisp files to markdown." single ((:commit . "368d99313683cd943c99feaffca356be60bdb636") (:url . "https://github.com/Lindydancer/el2markdown"))]) (el-x . [(20140111 1401) nil "main entry point for el-x package" tar ((:commit . "e7c333d4fc31a90f4dca951efe21129164b42605") (:keywords "lisp"))]) (el-spy . [(20131226 1208) nil "Mocking framework for Emacs lisp. It also support spy, proxy." single ((:commit . "b1dead9d1877660856ada22d906ac4e54695aec7") (:keywords "test") (:url . "https://github.com/uk-ar/el-spy"))]) (el-sprunge . [(20140106 1739) ((web-server (20140105 2246)) (htmlize (20130207 1202)) (emacs (24 3))) "Command line paste server with Emacs highlighting" tar ((:commit . "37855ec60aeb4d565c49a4d711edc7341e9a22cb"))]) (el-spice . [(20180128 921) nil "Extra spice for emacs lisp programming" tar ((:commit . "4e0852ebf5d8e9cbb3eaaa6ae9c53d126b53f58c") (:keywords "languages" "extensions") (:url . "https://github.com/vedang/el-spice"))]) (el-spec . [(20121018 4) nil "ruby's rspec like syntax test frame work" single ((:commit . "1dbc465401d4aea5560318c4f13ff30920a0718d") (:keywords "test") (:url . "https://github.com/uk-ar/el-spec"))]) (el-pocket . [(20170922 549) ((web (0 5 2)) (emacs (24))) "Read and write to Pocket (getpocket.com)" single ((:commit . "a80abfb67efe68ada1d7d0a73aecee57e763baaa") (:keywords "emacs" "pocket" "bookmarks") (:url . "http://github.com/pterygota/el-pocket"))]) (el-patch . [(20180722 1732) ((emacs (25))) "Future-proof your Elisp." single ((:commit . "80ab5c40e543dd84a398d00040f753984b81c26f") (:keywords "extensions") (:url . "https://github.com/raxod502/el-patch"))]) (el-mock . [(20170824 1254) nil "Tiny Mock and Stub framework in Emacs Lisp" single ((:commit . "5df1d3a956544f1d3ad0bcd81daf47fff33ab8cc") (:keywords "lisp" "testing" "unittest") (:url . "http://github.com/rejeep/el-mock.el"))]) (el-init-viewer . [(20150303 28) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single ((:commit . "dbcb4418fe342dfd7da805f2d7caf1def68db7f9") (:url . "https://github.com/HKey/el-init-viewer"))]) (el-init . [(20150728 220) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single ((:commit . "6b45551b8ed473c8a0c897b743b0378a3501556c") (:url . "https://github.com/HKey/el-init"))]) (el-get . [(20180610 1821) nil "Manage the external elisp bits and pieces you depend upon" tar ((:commit . "0262dc77956e68e2c9355341526fd458e82de790") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki") (:url . "http://www.emacswiki.org/emacs/el-get"))]) (el-fly-indent-mode . [(20180421 1943) ((emacs (25))) "Indent Emacs Lisp on the fly" single ((:commit . "4917f486a7be7482dedfea0a7ac3d01cab4ce21c") (:keywords "lisp" "languages") (:url . "https://github.com/jiahaowork/el-fly-indent-mode.el"))]) (el-autoyas . [(20120918 617) nil "Automatically create Emacs-Lisp Yasnippets" tar ((:commit . "bde0251ecb504f585dfa27c205c8e312655310cc") (:keywords "emacs" "lisp" "mode" "yasnippet") (:url . "https://github.com/mlf176f2/el-autoyas.el"))]) (ejc-sql . [(20180701 1105) ((emacs (24 4)) (clomacs (0 0 3)) (dash (2 12 1)) (auto-complete (1 5 1)) (spinner (1 7 1)) (direx (1 0 0))) "Emacs SQL client uses Clojure JDBC." tar ((:commit . "f957bb5e1e9e1aab0c7f1770f5e8144b9c26c93f") (:keywords "sql" "jdbc") (:url . "https://github.com/kostafey/ejc-sql"))]) (eink-theme . [(20170717 807) nil "E Ink color theme" single ((:commit . "4c990bb3428f725735fa1f733ef4c5ad61f632b0") (:url . "http://github.com/maio/eink-emacs"))]) (ein-mumamo . [(20150301 1628) ((ein (0 4))) "Multiple major mode support for Emacs IPython Notebook" single ((:commit . "028fefec499598add1a87b92ed991891f38f0c7b"))]) (ein . [(20180626 1257) ((websocket (1 7)) (auto-complete (1 4 0)) (request (0 3)) (deferred (0 5)) (request-deferred (0 2 0)) (cl-generic (0 3)) (dash (2 13 0)) (s (1 11 0)) (skewer-mode (1 6 2))) "Emacs IPython Notebook" tar ((:commit . "f7b0a207bec5ef99b4361c1e9f8e338d70d34ab6"))]) (eimp . [(20120826 1339) nil "Emacs Image Manipulation Package" single ((:commit . "2e7536fe6d8f7faf1bad7a8ae37faba0162c3b4f") (:keywords "files" "frames"))]) (eide . [(20180626 1259) nil "IDE interface" tar ((:commit . "6bd4c3b67a532527b3514c72bf2d7371172b8a93"))]) (ego . [(20180228 1704) ((emacs (24 5)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (simple-httpd (1 4 5))) "a static site generator based on org mode, forked from org-page." tar ((:commit . "719809679c1a60887735db41abae53b61f08ef59"))]) (eglot . [(20180722 1107) ((emacs (26 1)) (jsonrpc (1 0 0))) "Client for Language Server Protocol (LSP) servers" single ((:commit . "8d61ecaa8c38a02322c281ac7072e2884d63012f") (:keywords "convenience" "languages") (:url . "https://github.com/joaotavora/eglot"))]) (egison-mode . [(20160603 103) nil "Egison editing mode" single ((:commit . "efacac91760aec07749f244cd18ea677f8e0c647") (:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el"))]) (egg . [(20180713 218) nil "Emacs Got Git - Emacs interface to Git" tar ((:commit . "5bf9879eec067e25a60f2363137c9e69f7b5cc68") (:keywords "git" "version control" "release management"))]) (eg . [(20170830 115) ((cl-lib (0 5)) (emacs (24 3))) "Norton Guide reader" single ((:commit . "1c7f1613d2aaae728ef540305f6ba030616f86bd") (:keywords "docs") (:url . "https://github.com/davep/eg.el"))]) (efire . [(20151009 1331) ((circe (1 2))) "Use campfire from Emacs" single ((:commit . "91a644662afb352475efad0b377713656f131e5c") (:keywords "convenience" "tools") (:url . "https://github.com/capitaomorte/efire"))]) (edts . [(20171030 9) ((auto-complete (1 3 1)) (auto-highlight-symbol (1 53)) (dash (2 13)) (erlang (2 4 1)) (f (0 19 0)) (popup (0 4)) (s (1 11 0))) "Erlang Development Tool Suite" tar ((:commit . "6ef4bdf571235ee1b078db321402270cabff7fda"))]) (edn . [(20160215 419) ((cl-lib (0 3)) (emacs (24 1)) (peg (0 6))) "Support for reading and writing the edn data format from elisp" single ((:commit . "be9e32d1b49e35247b263b0243df7cfdc8d413ab") (:keywords "edn" "clojure") (:url . "https://www.github.com/expez/edn.el"))]) (editorconfig-domain-specific . [(20180505 224) ((cl-lib (0 5)) (editorconfig (0 6 0))) "Apply brace style and other \"domain-specific\" EditorConfig properties" single ((:commit . "e9824160fb2e466afa755240ee3ab7cc5657fb04") (:keywords "editorconfig" "util") (:url . "https://github.com/lassik/editorconfig-emacs-domain-specific"))]) (editorconfig-custom-majormode . [(20180507 1942) ((editorconfig (0 6 0))) "Decide major-mode and mmm-mode from EditorConfig" single ((:commit . "ae613f0a56364afbbab19d4377c108406d5cfc7c") (:keywords "editorconfig" "util") (:url . "https://github.com/10sr/editorconfig-custom-major-mode-el"))]) (editorconfig-charset-extras . [(20180222 2057) ((editorconfig (0 6 0))) "Extra EditorConfig Charset Support" single ((:commit . "ddf60923c6f4841cb593b2ea04c9c710a01d262f") (:keywords "tools") (:url . "https://github.com/10sr/editorconfig-charset-extras-el"))]) (editorconfig . [(20180708 228) ((cl-lib (0 5))) "EditorConfig Emacs Plugin" tar ((:commit . "a4776878379ea10760e70bedc811562684f178c6") (:url . "https://github.com/editorconfig/editorconfig-emacs#readme"))]) (edit-server-htmlize . [(20130329 1548) ((edit-server (1 9))) "(de)HTMLization hooks for edit-server.el" single ((:commit . "e7f8dadfabe869c77ca241cd6fbd4c52bd908392") (:url . "https://github.com/frobtech/edit-server-htmlize"))]) (edit-server . [(20180120 752) nil "server that responds to edit requests from Chrome" single ((:commit . "ac80a6e3340ad0340bc0655969320b0b100a2c0e") (:url . "https://github.com/stsquad/emacs_chrome"))]) (edit-list . [(20100930 743) nil "edit a single list" single ((:commit . "f460d3f9e208a4e606fe6ded307f1b011916ca71") (:url . "http://mwolson.org/static/dist/elisp/edit-list.el"))]) (edit-indirect-region-latex . [(20161128 2245) ((emacs (24 3)) (ht (2 2)) (edit-indirect (0 1 4))) "Edit LaTeX regions in separate buffers, e.g. for English grammar checks" single ((:commit . "05043f2c0c9838947d3ca4b51b695deb7c47612e") (:url . "https://github.com/niitsuma/edit-indirect-region-latex"))]) (edit-indirect . [(20180422 1107) ((emacs (24 3))) "Edit regions in separate buffers" single ((:commit . "de645d8144e8a08f039a9c88185121ec81d957ef") (:url . "https://github.com/Fanael/edit-indirect"))]) (edit-color-stamp . [(20130529 1033) ((es-lib (0 2)) (cl-lib (1 0))) "Edit a hex color stamp, using a QT or the internal color picker" tar ((:commit . "32dc1ca5bcf3dcf83fad5e39b55dc5b77becb3d3") (:url . "https://github.com/sabof/edit-color-stamp"))]) (edit-at-point . [(20150716 624) nil "edit(copy,cut..) current things(word,symbol..) under cursor" single ((:commit . "3b800c11685102e1eab62ec71c5fc1589ebb81a7") (:url . "http://github.com/enoson/edit-at-point.el"))]) (edebug-x . [(20130615 2325) nil "Extensions for Edebug" single ((:commit . "a2c2c42553d3bcbd5ac11898554865acbed1bc46") (:keywords "extensions") (:url . "https://github.com/ScottyB/edebug-x"))]) (ede-php-autoload-drupal . [(20170316 1458) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Drupal support for ede-php-autoload" single ((:commit . "54a04241d94fabc4f4d16ae4dc8ba4f0c6e3b435") (:keywords "programming" "php" "drupal"))]) (ede-php-autoload-composer-installers . [(20170221 1226) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Composer installers support for ede-php-autoload" single ((:commit . "7840439802c7d11ee086bbf465657f3da12f9f66") (:keywords "programming" "php") (:url . "https://github.com/xendk/ede-php-autoload-composer-installers"))]) (ede-php-autoload . [(20170428 933) nil "Simple EDE PHP Project" tar ((:commit . "65e502602dbc623257a820245d41f94cf2e1f07d") (:keywords "php" "project" "ede") (:url . "https://github.com/stevenremot/ede-php-autoload"))]) (ede-compdb . [(20150920 1333) ((ede (1 2)) (semantic (2 2)) (cl-lib (0 4))) "Support for compilation database projects in EDE" single ((:commit . "d6d8466cd62876fc90adeff5875a1a584fd846cd") (:keywords "development" "ninja" "build" "cedet" "ede"))]) (edbi-sqlite . [(20160221 1123) ((emacs (24)) (edbi (0 1 3))) "Open sqlite files with edbi" single ((:commit . "52cb9ca1af7691b592f2cfd2f007847e7a4ccd5f") (:url . "https://github.com/proofit404/edbi-sqlite"))]) (edbi-minor-mode . [(20160706 747) ((edbi (0 1 3))) "Use edbi with regular SQL files." single ((:commit . "566a2141a6eb9d9d5d7e1bd7c251d1c5e8f0d2ec") (:url . "https://github.com/proofit404/edbi-minor-mode"))]) (edbi-django . [(20180627 300) ((emacs (25)) (pythonic (0 1 0)) (edbi (0 1 3))) "Run edbi with django settings" single ((:commit . "5fe3fe82c8691af91dfc24ad3dc591ca228ec875") (:url . "https://github.com/proofit404/edbi-django"))]) (edbi-database-url . [(20160221 1123) ((emacs (24)) (edbi (0 1 3))) "Run edbi with database url" single ((:commit . "d56c580268cd93651998c4c6b1c5558e6b6ca90f") (:url . "https://github.com/proofit404/edbi-database-url"))]) (edbi . [(20160224 1741) ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) "Emacs Database Interface" tar ((:commit . "6f50aaf4bde75255221f2292c7a4ad3fa9d918c0"))]) (ecukes . [(20171216 408) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar ((:commit . "3a77ba9f1064c2bca47b401974c009e65727c46e"))]) (eclipse-theme . [(20160430 322) nil "Theme based on Eclipse circa 2010" single ((:commit . "dc54d9312d97210823b922038076e2b1b132eff2") (:keywords "themes") (:url . "https://github.com/abo-abo/eclipse-theme"))]) (eclim . [(20171113 1754) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (0 10 0))) "An interface to the Eclipse IDE." tar ((:commit . "6396ad1cd25c0a197109343ec1cce5d5080acdff"))]) (ecb . [(20170728 1221) nil "a code browser for Emacs" tar ((:commit . "1330a44cf3c171781083b0b926ab7622f64e6e81") (:keywords "browser" "code" "programming" "tools"))]) (ebib . [(20180428 1401) ((dash (2 5 0)) (seq (2 15)) (parsebib (2 3)) (emacs (24 4))) "a BibTeX database manager" tar ((:commit . "212dea4a52f04eaa1d13a895fffea04f5884f12b") (:keywords "text" "bibtex"))]) (ebf . [(20160211 958) ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5))) "brainfuck language transpiler to Emacs Lisp" tar ((:commit . "4cd9c26354d8be6571354b2954d21fba882e78a2") (:url . "http://github.com/rexim/ebf"))]) (ebal . [(20171231 2216) ((emacs (24 4)) (f (0 18 0))) "Emacs interface to Cabal and Stack" single ((:commit . "1740118125ae7aa6ba82d36e1fe0e69065a6fcaa") (:keywords "convenience" "cabal" "haskell") (:url . "https://github.com/mrkkrp/ebal"))]) (easy-repeat . [(20150516 148) ((emacs (24 4))) "Repeat easily" single ((:commit . "060f0e6801c82c40c06961dc0528a00e18947a8c") (:keywords "repeat" "convenience") (:url . "https://github.com/xuchunyang/easy-repeat.el"))]) (easy-kill-extras . [(20161028 504) ((easy-kill (0 9 4))) "Extra functions for easy-kill." tar ((:commit . "e60a74d7121eff7c263098aea2901cc05a5f6acd") (:keywords "killing" "convenience") (:url . "https://github.com/knu/easy-kill-extras.el"))]) (easy-kill . [(20151030 2229) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single ((:commit . "e2b667f651a3531164d24ea4cbcd8c34fba0e17f") (:keywords "killing" "convenience") (:url . "https://github.com/leoliu/easy-kill"))]) (easy-jekyll . [(20180513 1107) ((emacs (24 4))) "Major mode managing jekyll blogs" single ((:commit . "84c19d0380617ce2e40a2b42ce9bedf65e52779d") (:url . "https://github.com/masasam/emacs-easy-jekyll"))]) (easy-hugo . [(20180719 20) ((emacs (24 4)) (popup (0 5 3))) "Write blogs made with hugo by markdown or org-mode" single ((:commit . "e25f78ca1fe3e3aceb2ba0da549b61ba21f9908c") (:url . "https://github.com/masasam/emacs-easy-hugo"))]) (easy-escape . [(20161209 744) nil "Improve readability of escape characters in regular expressions" single ((:commit . "63fa5fcf9a53b7d3c1e872081e65afad5a722ba8") (:keywords "convenience" "lisp" "tools") (:url . "https://github.com/cpitclaudel/easy-escape"))]) (easy-after-load . [(20170817 531) nil "eval-after-load for all files in a directory" single ((:commit . "29e20145da49ac9ea40463c552130777408040de") (:url . "https://github.com/pd/easy-after-load"))]) (eacl . [(20180607 658) ((emacs (24 3)) (ivy (0 9 1))) "Auto-complete line(s) by grepping project" single ((:commit . "ccf1401b1acff67fe445c95e8be7b09e8c3ae5d8") (:keywords "abbrev" "convenience" "matching") (:url . "http://github.com/redguardtoo/eacl"))]) (e2wm-term . [(20141009 608) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single ((:commit . "65b5ac88043d5c4048920a048f3599904ca55981") (:keywords "tools" "window manager") (:url . "https://github.com/aki2o/e2wm-term"))]) (e2wm-sww . [(20140524 158) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single ((:commit . "1063f9854bd34db5ac771cd1036cecc89834729d") (:keywords "tools" "window manager") (:url . "https://github.com/aki2o/e2wm-sww"))]) (e2wm-svg-clock . [(20150106 506) ((e2wm (20130225 1602)) (svg-clock (0 4))) "e2wm plugin for svg-clock" single ((:commit . "d425925e3afffcbe2ff74edc80b714e4319d4c94") (:keywords "convenience" "e2wm") (:url . "https://github.com/myuhe/e2wm-svg-clock.el"))]) (e2wm-pkgex4pl . [(20140525 347) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single ((:commit . "7ea994450727190c4f3cb46cb429ba41b692ecc0") (:keywords "tools" "window manager" "perl") (:url . "https://github.com/aki2o/e2wm-pkgex4pl"))]) (e2wm-direx . [(20170509 601) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single ((:commit . "b47f19d15436cc28233a812a1150689f61d11046") (:keywords "tools" "window manager" "convenience") (:url . "https://github.com/aki2o/e2wm-direx"))]) (e2wm-bookmark . [(20151122 2121) ((e2wm (1 2))) "Bookmark plugin for e2wm.el" single ((:commit . "bad816b6d8049984d69bcd277b7d325fb84d55eb") (:keywords "convenience"))]) (e2wm-R . [(20151230 126) ((e2wm (1 3)) (inlineR (1 0)) (ess (15 3))) "some e2wm plugin and perspective for GNU R" single ((:commit . "4350601ee1a96bf89777b3f09f1b79b88e2e6e4d") (:keywords "convenience" "e2wm") (:url . "https://github.com/myuhe/e2wm-R.el"))]) (e2wm . [(20170214 1636) ((window-layout (1 4))) "simple window manager for emacs" tar ((:commit . "4353d3394c77a49f8f0291c239858c8c5e877549") (:keywords "tools" "window manager"))]) (e2ansi . [(20180403 1215) ((face-explorer (0 0 3))) "Syntax highlighting support for `less', powered by Emacs." tar ((:commit . "f886e687d50ff58063a92d40623f2400fa913af0") (:keywords "faces" "languages") (:url . "https://github.com/Lindydancer/e2ansi"))]) (dynamic-spaces . [(20171027 1151) nil "When editing, don't move text separated by spaces" single ((:commit . "97ae8480c257ba573ca3d06dbf602f9b23c41d38") (:keywords "convenience") (:url . "https://github.com/Lindydancer/dynamic-spaces"))]) (dynamic-ruler . [(20160602 108) nil "Displays a dynamic ruler at point." single ((:commit . "c9c0de6fe5721f06b50e01d9b4684b519c71b367") (:keywords "ruler" "tools" "convenience") (:url . "http://rocher.github.io/dynamic-ruler"))]) (dynamic-fonts . [(20140731 526) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single ((:commit . "ab0c65accbdb59acaed5b263327e22ec019b3e82") (:keywords "faces" "frames") (:url . "http://github.com/rolandwalker/dynamic-fonts"))]) (dylan-mode . [(20160405 1514) nil "Major mode for editing Dylan programs." tar ((:commit . "7e8ba16bf125f0066d3e1caeefaba94a6d32ac72"))]) (dyalog-mode . [(20180605 1413) ((cl-lib (0 2)) (emacs (24))) "Major mode for editing Dyalog APL source code" tar ((:keywords "languages") (:url . "https://bitbucket.org/harsman/dyalog-mode/"))]) (dut-mode . [(20170729 1411) ((emacs (24))) "Major mode for the Dut programming language" single ((:commit . "9235c7acaa6690942e9de8b7acd1e4be0c859dc1") (:keywords "languages" "gut") (:url . "https://github.com/dut-lang/dut-mode"))]) (duplicate-thing . [(20120515 948) nil "Duplicate current line & selection" single ((:commit . "f6ed0232fd0653621afe450d53775a32a9d0e328") (:keywords "command" "duplicate" "line" "selection"))]) (dummyparens . [(20141009 324) nil "parenthesis auto-pairing and wrapping" single ((:commit . "9798ef1d0eaa24e4fe66f8aa6022a8c62714cc89") (:keywords "dummyparens" "auto-pair" "wrapping") (:url . "https://github.com/snosov1/dummyparens"))]) (dumb-jump . [(20180615 2114) ((emacs (24 3)) (f (0 20 0)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." single ((:commit . "323fe66b8cf0b25bbee882900a056097ebe26e62") (:keywords "programming"))]) (dumb-diff . [(20171211 1322) ((emacs (24 3))) "fast arbitrary diffs" single ((:commit . "1a2331d283049b71a07c1b06b1e0627a950d55f4") (:keywords "programming" "diff"))]) (ducpel . [(20140702 454) ((cl-lib (0 5))) "Logic game with sokoban elements" tar ((:commit . "b53b935ab95c02b82ccf38f63c89e39e99477a55") (:keywords "games") (:url . "https://github.com/alezost/ducpel"))]) (dts-mode . [(20161103 523) nil "Major mode for Devicetree source code" single ((:commit . "9ee0854446dcc6c53d2b8d2941051768dba50344") (:keywords "languages"))]) (dtrt-indent . [(20180628 1438) nil "Adapt to foreign indentation offsets" tar ((:commit . "084dac7ab36a89d2a7d6cb8f443b1eccbfd189e2") (:keywords "convenience" "files" "languages" "c"))]) (dtrace-script-mode . [(20150213 2223) nil "DTrace code editing commands for Emacs" single ((:commit . "801af1ef16075d31a19830ebb8404bbf3a322f10"))]) (dsvn . [(20130120 1257) nil "Subversion interface" single ((:commit . "17bce692e9bd5a43373d5cb1d66da50e1acb903b") (:keywords "docs"))]) (drupal-spell . [(20130520 955) nil "Aspell extra dictionary for Drupal" tar ((:commit . "cddf1dbc71fb4c5c4c50317db6830467fa97cff0") (:keywords "wp") (:url . "https://github.com/arnested/drupal-spell"))]) (drupal-mode . [(20171120 1509) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ((:commit . "47fda0a38a5b197f4606137d9c3b7d44aaeaa886") (:keywords "programming" "php" "drupal") (:url . "https://github.com/arnested/drupal-mode"))]) (dropbox . [(20170502 1722) ((json (1 2)) (oauth (1 0 3))) "Emacs backend for dropbox" single ((:commit . "d85bbf6caa4203d6088ea29f5c057c1e9bcacd85") (:keywords "dropbox"))]) (drone . [(20161106 118) nil "Launch your drone test suite if drone.yml is present" single ((:commit . "1d4ee037ad3208847a4235426edf0c4a3e7b1899") (:keywords "drone" "tests" "ci") (:url . "https://github.com/olymk2/emacs-drone"))]) (drill-instructor-AZIK-force . [(20151122 2114) ((popup (0 5))) "Support AZIK input" tar ((:commit . "008cea202dc31d7d6fb1e7d8e6334d516403b7a5"))]) (drawille . [(20160418 1138) ((cl-lib (0 5))) "Drawille implementation in elisp" tar ((:commit . "d914845725719d8293e2f0dea3c9c7e0a1e0e62a") (:keywords "graphics") (:url . "https://github.com/sshbio/elisp-drawille"))]) (drag-stuff . [(20161107 2349) nil "Drag stuff (lines, words, region, etc...) around" tar ((:commit . "6d06d846cd37c052d79acd0f372c13006aa7e7c8"))]) (draft-mode . [(20140609 756) nil "Rough drafting for Emacs." single ((:commit . "4779fb32daf53746459da2def7e08004492d4f18") (:keywords "draft" "drafting") (:url . "https://github.com/gaudecker/draft-mode"))]) (dracula-theme . [(20180710 624) ((emacs (24))) "Dracula Theme" single ((:commit . "a1c9888b7876ace60a536d27fb290e788bffc9cb") (:url . "https://github.com/dracula/emacs"))]) (dr-racket-like-unicode . [(20161021 511) ((emacs (24 1))) "DrRacket-style unicode input" single ((:commit . "4953f1c8a68472e157a0dcd0a7e35a4ec2577133") (:keywords "i18n" "tools"))]) (dpaste_de . [(20131015 525) ((web (0 3 7))) "Emacs mode to paste to dpaste.de" single ((:commit . "f0c39e8864299f735642f7d9fa490689398ce39d") (:keywords "pastebin"))]) (dpaste . [(20160303 1312) nil "Emacs integration for dpaste.com" single ((:commit . "5ebabb466a6ae70882549855b6b2194fc32189f8") (:keywords "paste" "pastie" "pastebin" "dpaste" "python"))]) (downplay-mode . [(20151125 1209) nil "focus attention on a region of the buffer" single ((:commit . "4a2c3addc73c8ca3816345c3c11c08af265baedb") (:url . "https://github.com/tobias/downplay-mode/"))]) (download-region . [(20180123 1733) ((cl-lib (0 3))) "Simple in-buffer download manager" single ((:commit . "bbba3ecd80818d5d940d41fe89a6e2ec5dd2c53c") (:url . "http://hins11.yu-yake.com/"))]) (dotnet . [(20170827 838) nil "Interact with dotnet CLI tool" single ((:commit . "e22fd23bf2bfab980d4802b10c4d872b800f90d4") (:keywords ".net" "tools") (:url . "https://github.com/julienXX/dotnet.el"))]) (dotenv-mode . [(20180207 1114) ((emacs (24 3))) "Major mode for .env files" single ((:commit . "f4c52bcd5313379b9f2460db7f7a33119dfa96ea") (:url . "https://github.com/preetpalS/emacs-dotenv-mode"))]) (dot-mode . [(20180312 1600) ((emacs (24 3))) "minor mode to repeat typing or commands" single ((:commit . "6ca22b73bcdae2363ee9641b822a60685df16a3e") (:keywords "convenience") (:url . "https://github.com/wyrickre/dot-mode"))]) (doom-themes . [(20180720 438) ((emacs (24 4)) (all-the-icons (1 0 0)) (cl-lib (0 5))) "an opinionated pack of modern color-themes" tar ((:commit . "75d43068733201b8c9c45f9e637ceaab2ff565a4") (:keywords "dark" "light" "blue" "atom" "one" "theme" "neotree" "icons" "faces" "nova") (:url . "https://github.com/hlissner/emacs-doom-theme"))]) (doom-modeline . [(20180712 2015) ((emacs (25 1)) (all-the-icons (1 0 0)) (projectile (0 10 0)) (shrink-path (0 2 0)) (eldoc-eval (0 1)) (dash (2 11 0))) "A minimal modeline from DOOM." single ((:commit . "8af6cb74f6f94ec863076966fd3b2d85ce386b02") (:keywords "faces") (:url . "https://github.com/seagle0128/doom-modeline"))]) (doom . [(20180301 1508) ((cl-lib (0 5))) "DOM implementation and manipulation library" single ((:commit . "e59040aefc92dd9b3134eb623624307fb9e4327b") (:keywords "xml" "dom") (:url . "http://www.github.com/kensanata/doom.el/"))]) (doneburn-theme . [(20180502 1004) nil "A light theme based on Bozhidar Batsov's Zenburn" single ((:commit . "dffe0d177765bc978607455864625bcf3413597a") (:keywords "faces" "themes") (:url . "http://github.com/manuel-uberti/doneburn-emacs"))]) (dollaro . [(20151123 502) ((s (1 6 0))) "simple text templates" single ((:commit . "500127f0172ac7a1eec627e026b59136580a74ac") (:keywords "tools" "convenience"))]) (dokuwiki-mode . [(20170223 501) nil "Major mode for DokuWiki document" single ((:commit . "e4e116f6fcc373e3f5937c1a7daa5c2c9c6d3fa1") (:keywords "hypermedia" "text" "dokuwiki") (:url . "https://github.com/kai2nenobu/emacs-dokuwiki-mode"))]) (dokuwiki . [(20180101 1659) ((emacs (24 3)) (xml-rpc (1 6 8))) "Edit Remote DokuWiki Pages Using XML-RPC" single ((:commit . "594c4d4904dcc2796bbbd2c0845d9e7c09ccf6f7") (:keywords "convenience") (:url . "http://www.github.com/accidentalrebel/emacs-dokuwiki"))]) (dockerfile-mode . [(20180628 959) ((emacs (24)) (s (1 12))) "Major mode for editing Docker's Dockerfiles" single ((:commit . "64733f64ea9be1e5e534e590846869b75c62ed1f") (:url . "https://github.com/spotify/dockerfile-mode"))]) (docker-tramp . [(20170206 1925) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar ((:commit . "8e2b671eff7a81af43b76d9dfcf94ddaa8333a23") (:keywords "docker" "convenience") (:url . "https://github.com/emacs-pe/docker-tramp.el"))]) (docker-compose-mode . [(20180324 1052) ((emacs (24 3)) (dash (2 12 0)) (yaml-mode (0 0 12))) "Major mode for editing docker-compose files" single ((:commit . "c9f131d2c90d652435d407fd36c40feebfed1dad") (:keywords "convenience") (:url . "https://github.com/meqif/docker-compose-mode"))]) (docker-api . [(20160525 20) ((dash (2 12 1)) (request (0 2 0)) (s (1 11 0))) "Emacs interface to the Docker API" tar ((:commit . "206144346b7fa4165223349cfeb64a75d47ddd1b") (:url . "https://github.com/Silex/docker-api.el"))]) (docker . [(20180710 743) ((emacs (24 5)) (dash (2 14 1)) (docker-tramp (0 1)) (magit-popup (2 12 3)) (s (1 12 0)) (tablist (0 70)) (json-mode (1 7 0))) "Emacs interface to Docker" tar ((:commit . "7aee62326f8304fc5e3fc9de84bd56afe3572ed9") (:keywords "filename" "convenience") (:url . "https://github.com/Silex/docker.el"))]) (docean . [(20180605 1044) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "Interact with DigitalOcean from Emacs." single ((:commit . "bbe2298fd21f7876fc2d5c52a69b931ff59df979") (:keywords "convenience") (:url . "https://github.com/emacs-pe/docean.el"))]) (docbook-snippets . [(20150714 925) ((yasnippet (0 8 0))) "Yasnippets for DocBook" tar ((:commit . "b06297fdec039a541aaa6312cb328a11062cfab4") (:keywords "snippets" "docbook") (:url . "https://github.com/jhradilek/emacs-docbook-snippets"))]) (dna-mode . [(20170804 114) nil "a major mode for editing dna sequences" tar ((:commit . "471d374de22c33eaddd8e41dd8ae29753fab2f6a") (:keywords "dna" "emacs" "editing") (:url . "http://www.mahalito.net/~harley/elisp/dna-mode.el"))]) (dmenu . [(20180118 445) ((cl-lib (0 5))) "simulate the dmenu command line program" single ((:commit . "6e492cd4ee4fb39ecda92776707fc270f54d25e7") (:keywords "convenience" "usability"))]) (dkmisc . [(20131110 315) ((emacs (24 1))) "Miscellaneous functions required by dk* packages." tar ((:commit . "fe3d49c6f8322b6f89466361acd97585bdfe0608"))]) (dklrt . [(20131110 541) ((dkmisc (0 50)) (ledger-mode (20130908 1357)) (emacs (24 1))) "Ledger Recurring Transactions." tar ((:commit . "5d6c99f8018335256ab934b4c1049708ae2d48ba"))]) (dkl . [(20161004 1707) nil "Display keyboard layout." tar ((:commit . "6b4584f86037bda3383960c678d51f340229fb91") (:keywords "input" "keyboard" "layout") (:url . "https://github.com/flexibeast/dkl"))]) (dkdo . [(20131110 319) ((dkmisc (0 50)) (emacs (24 1))) "Do List major mode based on org-mode." tar ((:commit . "fd6bb105e8331fafb6385c5238c988c4c5bbe2da"))]) (djangonaut . [(20180710 1445) ((emacs (25 2)) (magit-popup (2 6 0)) (pythonic (0 1 0)) (f (0 20 0)) (s (1 12 0))) "Minor mode to interact with Django projects" single ((:commit . "61a1ace3562c7352fd1665ceccc6b39be23daa80") (:url . "https://github.com/proofit404/djangonaut"))]) (django-theme . [(20131022 202) nil "Custom face theme for Emacs" single ((:commit . "86c8142b3eb1addd94a43aa6f1d98dab06401af0") (:url . "http://github/anrzejsliwa/django-theme"))]) (django-snippets . [(20131229 811) ((yasnippet (0 8 0))) "Yasnippets for django" tar ((:commit . "a71b8dd984e7f724b8321246e5c353a4ae5c986e") (:url . "https://github.com/myfreeweb/django-mode"))]) (django-mode . [(20170522 14) ((projectile (0)) (s (0)) (helm-make (0))) "Major mode for Django web framework." tar ((:commit . "a71b8dd984e7f724b8321246e5c353a4ae5c986e") (:keywords "languages"))]) (django-manage . [(20160818 1912) ((hydra (0 13 2))) "Django minor mode for commanding manage.py" single ((:commit . "876fb2cb627d465adfdc905841279784bcdd7ee8") (:keywords "languages"))]) (dizzee . [(20171201 116) nil "A more pleasant way to manage your project's subprocesses in Emacs." tar ((:commit . "e3cf1c2ea5d0fc00747524b6f3c5b905d0a8c8e1"))]) (dix-evil . [(20170105 623) ((dix (0 3 0)) (evil (1 0 7))) "optional evil-integration with dix.el" single ((:commit . "bcc7fd7aef5d25171978c386c620e09d0ba8d2f8") (:keywords "languages") (:url . "http://wiki.apertium.org/wiki/Emacs"))]) (dix . [(20170224 615) ((cl-lib (0 5))) "minor mode for editing Apertium XML dictionary files" tar ((:commit . "bcc7fd7aef5d25171978c386c620e09d0ba8d2f8") (:keywords "languages") (:url . "http://wiki.apertium.org/wiki/Emacs"))]) (ditz-mode . [(20150729 240) nil "Emacs interface to Ditz issue tracking system" single ((:keywords "tools"))]) (distinguished-theme . [(20151216 1215) nil "A dark and elegant theme for emacs." single ((:commit . "9b1d25ac59465a5016d187ea84b7614c95a29b3b") (:url . "https://github.com/Lokaltog/distinguished-theme"))]) (distel-completion-lib . [(20160816 406) nil "Completion library for Erlang/Distel" single ((:commit . "0cf9190b54540c41ee812f5b6d98305fb263d969") (:keywords "erlang" "distel" "completion") (:url . "github.com/sebastiw/distel-completion"))]) (display-theme . [(20140115 756) ((emacs (24))) "display current theme(s) at mode-line" single ((:commit . "b180b3be7a74ae4799a14e7e4bc2fe10e3ff7a15") (:keywords "tools") (:url . "https://github.com/kawabata/emacs-display-theme/"))]) (dispass . [(20140202 731) ((dash (1 0 0))) "Emacs wrapper for DisPass" single ((:commit . "b6e8f89040ebaaf0e7609b04bc27a8979f0ae861") (:keywords "processes") (:url . "http://projects.ryuslash.org/dispass.el/"))]) (disk . [(20171115 2331) nil "simplified find-file, revert-file, save-buffer interface" single ((:commit . "283e54e3be7d08f959076240b2ab324e25632137") (:keywords "convenience") (:url . "http://www.emacswiki.org/emacs/DiskKey"))]) (discover-my-major . [(20180605 2211) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single ((:commit . "c592e5e67454f0d1b68669ac0c270073164b16b3") (:keywords "discover" "help" "major-mode" "keys") (:url . "https://framagit.org/steckerhalter/discover-my-major"))]) (discover-js2-refactor . [(20140129 752) ((js2-refactor (20131221 501)) (discover (20140103 1339))) "Adds discover context menu for js2-refactor" single ((:commit . "3812abf61f39f3e73a9f3daefa6fed4f21a429ba") (:keywords "js2-refactor" "discover"))]) (discover-clj-refactor . [(20150328 759) ((clj-refactor (0 14 0)) (discover (0 3))) "Adds discover context menu for clj-refactor" single ((:commit . "3fbd5c1162739e606d7cf5d4f5d7426547d99647") (:keywords "clj-refactor" "discover" "convenience"))]) (discover . [(20140103 1339) ((makey (0 3))) "discover more of Emacs" single ((:commit . "7b0044bbb3b3bd5d811fdfb0f5ac6ec8de1239df"))]) (discourse . [(20160911 119) ((cl-lib (0 5)) (request (0 2)) (s (1 11 0))) "discourse api" single ((:commit . "a86c7e608851e186fe12e892a573994f08c8e65e") (:keywords "lisp" "discourse") (:url . "https://github.com/lujun9972/discourse-api"))]) (disaster . [(20171016 1452) nil "Disassemble C/C++ code under cursor in Emacs" single ((:commit . "10a785facc60d89d78e0d5177985ab1af1741bb4") (:keywords "tools") (:url . "https://github.com/jart/disaster"))]) (disable-mouse . [(20171226 1715) nil "Disable mouse commands globally" single ((:commit . "541363bd6353b8b05375552bab884a6315ea545c") (:keywords "mouse") (:url . "https://github.com/purcell/disable-mouse"))]) (dirtree-prosjekt . [(20140129 104) ((prosjekt (0 3)) (dirtree (0 1))) "dirtree integration for prosjekt." single ((:commit . "a864a8be5842223043702395f311e3350c28e9db") (:url . "https://github.com/abingham/prosjekt"))]) (dirtree . [(20140129 32) ((tree-mode (1 1 1 1)) (windata (0))) "Directory tree views" single ((:commit . "ba55f1e716e386fdd37cb8e7f48616e405dc7251"))]) (direx-grep . [(20140515 806) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single ((:commit . "1109a512a80b2673a70b18b8568514049017faad") (:keywords "convenience") (:url . "https://github.com/aki2o/direx-grep"))]) (direx . [(20170422 627) nil "Simple Directory Explorer" tar ((:commit . "a79bfdb5980cf6ed7bfb3b41ddc471a7b6c0ede4") (:keywords "convenience"))]) (direnv . [(20180513 123) ((emacs (24 4)) (dash (2 12 0)) (with-editor (2 5 10))) "direnv support" single ((:commit . "6cf079fe8171bdf4bebefe02e8353d7f13847ebd") (:keywords "direnv" "environment" "processes" "unix" "tools") (:url . "https://github.com/wbolster/emacs-direnv"))]) (diredful . [(20160529 1317) nil "colorful file names in dired buffers" single ((:commit . "c08e163d9d6c62f7b07e94d54c96c2e364e67e0e") (:keywords "dired" "colors" "extension" "widget") (:url . "https://github.com/thamer/diredful"))]) (diredfl . [(20180210 1814) ((emacs (24))) "Extra font lock rules for a more colourful dired" single ((:commit . "9b2a89951cee8bdf5c0cb67f9c3ad6ac73abf9cb") (:keywords "faces") (:url . "https://github.com/purcell/diredfl"))]) (dired-toggle-sudo . [(20151109 206) nil "Browse directory with sudo privileges." single ((:commit . "02449dbda4e168f99fe5352c9628df5d39e11483") (:keywords "emacs" "dired"))]) (dired-toggle . [(20140907 1349) nil "provide a simple way to toggle dired buffer for current directory" single ((:commit . "84efb9ec9c327e4da53cdb7cda5b51dcd0ede0e5") (:keywords "dired" "toggle") (:url . "https://github.com/fasheng/dired-toggle"))]) (dired-subtree . [(20170910 1521) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Insert subdirectories in a tree-like fashion" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-single . [(20170804 544) nil "Reuse the current dired buffer to visit a directory" single ((:commit . "0dcc645de6397bf12c33229de67a503e4490c618") (:keywords "dired" "reuse" "buffer"))]) (dired-sidebar . [(20180709 2204) ((emacs (25 1)) (dired-subtree (0 0 1))) "Tree browser leveraging dired" single ((:commit . "e40075bbb43c4012b49fea2b40dbef1d3be3d82e") (:keywords "dired" "files" "tools") (:url . "https://github.com/jojojames/dired-sidebar"))]) (dired-rsync . [(20180625 1448) ((s (1 12 0)) (dash (2 0 0)) (emacs (24))) "Allow rsync from dired buffers" single ((:commit . "1eb7488f36528166992fe50a89dbbfa6d8a0e58b") (:url . "https://github.com/stsquad/dired-rsync"))]) (dired-recent . [(20180527 1259) ((emacs (24))) "Dired visited paths history" single ((:commit . "22104c87593f24ec513dfdf97fc4c8c91defec33") (:keywords "files") (:url . "https://github.com/vifon/dired-recent"))]) (dired-ranger . [(20180401 1506) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Implementation of useful ranger features for dired" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-rainbow . [(20171202 1448) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Extended file highlighting according to its type" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-quick-sort . [(20161208 1312) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." single ((:commit . "1845f978d313f750a5b70b832457ed803c4ffbdb") (:keywords "convenience" "files") (:url . "https://gitlab.com/xuhdev/dired-quick-sort#dired-quick-sort"))]) (dired-open . [(20160205 1213) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Open files from dired using using custom actions" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-narrow . [(20170309 329) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Live-narrowing of search results for dired" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-launch . [(20180607 1141) nil "Use dired as a launcher" single ((:commit . "ad45940f76ef2f6c3bb55e998829b311de191dae") (:keywords "dired" "launch") (:url . "https://github.com/thomp/dired-launch"))]) (dired-k . [(20170313 803) ((emacs (24 3))) "highlight dired buffer by file size, modified time, git status" tar ((:commit . "c50e8f73358060a448bff66db2d330b52bbeffc1") (:url . "https://github.com/syohex/emacs-dired-k"))]) (dired-imenu . [(20140109 810) nil "imenu binding for dired mode" single ((:commit . "610e21fe0988c85931d34894d3eee2442c79ab0a") (:keywords "dired" "imenu") (:url . "https://github.com/DamienCassou/dired-imenu"))]) (dired-icon . [(20170222 2126) ((emacs (24 3))) "A minor mode to display a list of associated icons in dired buffers." tar ((:commit . "f60e10757a5011235b519231ad35974ff25963ed") (:keywords "dired" "files") (:url . "https://gitlab.com/xuhdev/dired-icon"))]) (dired-hide-dotfiles . [(20170314 1339) ((emacs (25 1))) "Hide dotfiles in dired" single ((:commit . "b715f643ec805b3b8aca334595e6589320f04a49") (:keywords "files") (:url . "https://github.com/mattiasb/dired-hide-dotfiles"))]) (dired-hacks-utils . [(20160527 1436) ((dash (2 5 0))) "Utilities and helpers for dired-hacks collection" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-filter . [(20171010 204) ((dash (2 10 0)) (dired-hacks-utils (0 0 1)) (f (0 17 0)) (cl-lib (0 3))) "Ibuffer-like filtering for dired" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-filetype-face . [(20160822 655) nil "Set different faces for different filetypes in dired" single ((:commit . "72b3c88e8b82b3f8681d940757f7b2992bd80793") (:keywords "dired" "filetype" "face") (:url . "https://github.com/jixiuf/dired-filetype-face"))]) (dired-fdclone . [(20180402 2308) nil "dired functions and settings to mimic FDclone" single ((:commit . "903d7a736d240ef7352989a4e5d0ff9129c2ee3c") (:keywords "unix" "directories" "dired") (:url . "https://github.com/knu/dired-fdclone.el"))]) (dired-explorer . [(20180606 1921) ((cl-lib (0 5))) "minor-mode provides Explorer like select file at dired." single ((:commit . "3ade0a31b5340271d05e9bf443f2504960f6c6dd") (:keywords "dired" "explorer"))]) (dired-efap . [(20140122 856) nil "Edit Filename At Point in a dired buffer" single ((:commit . "624757b2e54d9a13e2183118d6c113e37684b90c") (:keywords "dired" "environment" "files" "renaming") (:url . "https://github.com/juan-leon/dired-efap"))]) (dired-dups . [(20130527 1425) nil "Find duplicate files and display them in a dired buffer" single ((:commit . "694ad128c822c59348ced16c4a0c1356d43da47a") (:keywords "unix") (:url . "https://github.com/vapniks/dired-dups"))]) (dired-collapse . [(20180724 944) ((dash (2 10 0)) (f (0 19 0)) (dired-hacks-utils (0 0 1))) "Collapse unique nested paths in dired listing" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-avfs . [(20161012 404) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "AVFS support for dired" single ((:commit . "3fd347a0823312e966872bd0d26d9a75b2898c9c") (:keywords "files"))]) (dired-atool . [(20180302 2340) ((emacs (24))) "Pack/unpack files with atool on dired." single ((:commit . "b92e0106827d34fa686e189c7e9a537a3a947a8b") (:keywords "files") (:url . "https://github.com/HKey/dired-atool"))]) (dircmp . [(20141204 956) nil "Compare and sync directories." tar ((:commit . "558ee0b601c2de9d247612085aafe2926f56a09f") (:keywords "unix" "tools") (:url . "https://github.com/matthewlmcclure/dircmp-mode"))]) (dionysos . [(20160810 356) ((libmpdee (2 1 0)) (alert (1 2)) (s (1 11 0)) (dash (2 12 1)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Dionysos, a music player for Emacs" tar ((:commit . "0aac21caadabc5a7f09e18a9dcb02f3dec26588b") (:keywords "music") (:url . "https://github.com/nlamirault/dionysos"))]) (dimmer . [(20180217 2011) ((emacs (25))) "visually highlight the selected buffer" single ((:commit . "d033fdda154e688e45cca35902dbff9915351b98") (:keywords "faces" "editing") (:url . "https://github.com/gonewest818/dimmer.el"))]) (diminish . [(20170419 1036) nil "Diminished modes are minor modes with no modeline display" single ((:commit . "565a983a39d2e2cffab5df13b34f3b6116723208") (:keywords "extensions" "diminish" "minor" "codeprose") (:url . "https://github.com/myrjola/diminish.el"))]) (dim-autoload . [(20180318 1327) nil "dim or hide autoload cookie lines" single ((:commit . "788320fe089fafbdf1cb09d2ab4d29d64a804e21") (:keywords "convenience") (:url . "https://github.com/tarsius/dim-autoload"))]) (dim . [(20160818 249) ((emacs (24 4))) "Change mode-line names of major/minor modes" single ((:commit . "79b81724b951fedffdd3113f473c18990af837a9") (:keywords "convenience") (:url . "https://github.com/alezost/dim.el"))]) (digitalocean-helm . [(20180610 46) ((emacs (24 3)) (helm (2 5)) (digitalocean (0 1))) "Create and manipulate digitalocean droplets" single ((:commit . "b125c9882eded7d73ec109d152b26625f333440b") (:keywords "processes" "tools") (:url . "https://gitlab.com/olymk2/digitalocean-api"))]) (digitalocean . [(20180603 225) ((request (2 5)) (emacs (24 4))) "Create and manipulate digitalocean droplets" single ((:commit . "1cac663c4bcb7f8325783954df6c0caf3dc20f6e") (:keywords "processes" "tools") (:url . "https://github.com/olymk2/emacs-digitalocean"))]) (digit-groups . [(20160816 1926) ((dash (2 11 0))) "Highlight place-value positions in numbers" single ((:url . "http://bitbucket.com/adamsmd/digit-groups"))]) (digistar-mode . [(20160218 1155) nil "major mode for Digistar scripts" single ((:commit . "15288b1e1a04b79b5ab7097fdd26d48b2ff41076") (:keywords "languages"))]) (diffview . [(20150928 2211) nil "View diffs in side-by-side format" single ((:commit . "031b70913e755c5e55222680f80185032a7d1728") (:keywords "convenience" "diff") (:url . "https://github.com/mgalgs/diffview-mode"))]) (diffscuss-mode . [(20141014 1657) nil "Major mode for diffscuss files." single ((:commit . "e0aacd8b3d9f886f27222c1397f0655e849e0af7") (:keywords "tools"))]) (difflib . [(20171227 718) ((emacs (24 4)) (cl-generic (0 3)) (ht (2 2)) (s (1 12 0))) "Helpers for computing deltas between sequences." single ((:commit . "b08850251812d71e62fd6956081299590acdf37b") (:keywords "matching" "tools" "string") (:url . "http://github.com/dieggsy/difflib.el"))]) (diff-hl . [(20180201 355) ((cl-lib (0 2)) (emacs (24 3))) "Highlight uncommitted changes using VC" tar ((:commit . "154c64affe7bdd16da814d198277d29bd1b6bb2a") (:keywords "vc" "diff") (:url . "https://github.com/dgutov/diff-hl"))]) (dictionary . [(20140717 2029) ((connection (1 10)) (link (1 10))) "Client for rfc2229 dictionary servers" single ((:commit . "a23b8f4a422d0de69a006ed010eff5795319db98") (:keywords "interface" "dictionary"))]) (dictcc . [(20171213 1334) ((emacs (24 4)) (cl-lib (0 5)) (ivy (0 10 0))) "Look up translations on dict.cc" single ((:commit . "7b988413f7719820cd846827525142a23f401e50") (:keywords "convenience"))]) (dic-lookup-w3m . [(20170803 354) ((w3m (20120723 324)) (stem (20120826))) "look up dictionaries on the Internet" tar ((:commit . "79aca5eb9c78e67cb85a386060d48113caad5ec3") (:keywords "emacs-w3m" "w3m" "dictionary"))]) (diary-manager . [(20180626 1058) ((emacs (25))) "Simple personal diary." single ((:commit . "ab7fd57de75354a9208470b45ab7bb17a26b95f4") (:keywords "extensions") (:url . "https://github.com/raxod502/diary-manager"))]) (dhall-mode . [(20180715 213) ((emacs (24 4))) "a major mode for dhall configuration language" single ((:commit . "5aa24b844ee0371024b7b65d1682984d3c1d82bf") (:keywords "languages") (:url . "https://github.com/psibi/dhall-mode"))]) (dfmt . [(20170728 323) nil "Emacs Interface to D indenting/formatting tool dfmt." single ((:commit . "21b9094e907b7ac53f5ecb4ff4539613a9d12434") (:keywords "tools" "convenience" "languages" "dlang") (:url . "https://github.com/qsimpleq/elisp-dfmt"))]) (devdocs . [(20170731 150) nil "Launch DevDocs search" single ((:commit . "a2d51e824f0cc48a9dd611cc740bc8b86143e611") (:url . "https://github.com/xuchunyang/DevDocs.el"))]) (desktop-registry . [(20140119 1343) nil "Keep a central registry of desktop files" single ((:commit . "244c2e7f9f0a1050aa8a47ad0b38f4e4584682dd") (:keywords "convenience") (:url . "http://projects.ryuslash.org/desktop-registry/"))]) (desktop-environment . [(20180423 153) ((emacs (25 1))) "Helps you control your GNU/Linux computer" single ((:commit . "62fbceded526b8e35c90803bcf80e33ebfe8473a") (:url . "https://gitlab.petton.fr/DamienCassou/desktop-environment"))]) (desktop+ . [(20170107 1332) ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) "Handle special buffers when saving & restoring sessions" single ((:commit . "88055cee526a000056201898499cebbd35e3ea76") (:url . "https://github.com/ffevotte/desktop-plus"))]) (describe-number . [(20151031 1755) ((yabin (1 1))) "Describe arbitrarily large number at point." single ((:commit . "40618345a37831804b29589849a785ef5aa5ac24") (:keywords "describe" "value" "help") (:url . "https://github.com/netromdk/describe-number"))]) (demo-it . [(20180403 2032) nil "Create demonstrations" tar ((:commit . "4f74e6f1bb6519587303e20fe59470853b1a0352") (:keywords "demonstration" "presentation" "test"))]) (demangle-mode . [(20180515 1945) ((cl-lib (0 1)) (emacs (24))) "Automatically demangle C++ symbols" single ((:commit . "a34b062c8a08d35fe2b9ee66e92f6f9626aae9a3") (:keywords "c" "tools") (:url . "https://github.com/liblit/demangle-mode"))]) (delim-kill . [(20100516 2320) nil "Kill text between delimiters." single ((:commit . "1dbe47344f2d2cbc8c54beedf0cf0bf10fd203c1") (:keywords "convenience" "languages") (:url . "http://github.com/thomas11/delim-kill/tree/master"))]) (deft . [(20180619 857) nil "quickly browse, filter, and edit plain text notes" single ((:commit . "24ac778ab8c8247f7677dd20dd301f6eba85bd8d") (:keywords "plain text" "notes" "simplenote" "notational velocity") (:url . "https://jblevins.org/projects/deft/"))]) (defproject . [(20151201 1419) ((emacs (24))) "Manager dir-locals and project specific variables" single ((:commit . "674d48a5e34cb4bba76faa38ee901322ec649086") (:keywords "convenience") (:url . "https://github.com/kotfic/defproject"))]) (define-word . [(20180706 1329) ((emacs (24 3))) "display the definition of word at point." single ((:commit . "637cd29837d4bd5567e17a11a479fd2edfb0e2c1") (:keywords "dictionary" "convenience") (:url . "https://github.com/abo-abo/define-word"))]) (deferred . [(20170901 630) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" single ((:commit . "2239671d94b38d92e9b28d4e12fd79814cfb9c16") (:keywords "deferred" "async") (:url . "https://github.com/kiwanami/emacs-deferred"))]) (default-text-scale . [(20180520 2349) nil "Easily adjust the font size in all frames" single ((:commit . "512d701df5e2079cad33329184fd7683c3b0b0af") (:keywords "frames" "faces") (:url . "https://github.com/purcell/default-text-scale"))]) (dedukti-mode . [(20171103 512) nil "Major mode for Dedukti files" single ((:commit . "d7c3505a1046187de3c3aeb144455078d514594e") (:keywords "languages" "dedukti") (:url . "https://github.com/rafoo/dedukti-mode"))]) (dedicated . [(20090428 1231) nil "A very simple minor mode for dedicated buffers" single ((:commit . "8275fb672f9cc4ba6682ebda0ef91db827e32992") (:keywords "dedicated" "buffer"))]) (decl . [(20171212 658) ((dash (2 5 0)) (emacs (24 3)) (cl-lib (0 3))) "Library for organizing code declaratively" single ((:commit . "ff7f8a4f1225cbdf141c86172104e67a4cf58c86") (:url . "https://github.com/preetpalS/decl.el"))]) (decide . [(20180316 1101) nil "rolling dice and other random things" single ((:commit . "257f0e39ac60ca375942950b44eeaee04cb9d961"))]) (debug-print . [(20140125 1619) ((emacs (24))) "A nice printf debugging environment by the way Gauche do" single ((:commit . "d817fd9ea2d3f8d2c1ace4d8af155684f3a99dc5") (:keywords "extensions" "lisp" "tools" "maint") (:url . "https://github.com/kenoss/debug-print"))]) (debpaste . [(20160113 1547) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single ((:commit . "6f2a400665062468ebd03a2ce1de2a73d9084958") (:keywords "paste") (:url . "http://github.com/alezost/debpaste.el"))]) (deadgrep . [(20180724 1612) ((emacs (25 1)) (dash (2 12 0)) (s (1 11 0)) (spinner (1 7 3)) (projectile (0 14 0))) "fast, friendly searching with ripgrep" single ((:commit . "cb72836153d4692834e3b7b6e8b63d5b5e927e34") (:keywords "tools") (:url . "https://github.com/Wilfred/deadgrep"))]) (ddskk . [(20180706 2232) ((ccc (1 43)) (cdb (20141201 754))) "Simple Kana to Kanji conversion program." tar ((:commit . "b05c610e27b86e71fb4e8d67292ef6a696dd5992"))]) (db-pg . [(20130131 1102) ((pg (0 12)) (db (0 0 6))) "A PostgreSQL adapter for emacs-db" single ((:commit . "7d5ab86b74b05fe003b3b434d4835f37f3f3eded") (:keywords "data" "comm" "database" "postgresql"))]) (db . [(20140421 1411) ((kv (0 0 11))) "A database for EmacsLisp" single ((:commit . "b3a423fb8e72f9013009cbe033d654df2ce31438") (:keywords "data" "lisp"))]) (dayone . [(20160105 440) ((uuid (0 0 3)) (mustache (0 22)) (ht (1 5))) "Utility script for Day One" tar ((:commit . "ab628274f0806451f23bce16f62a6a11cbf91a2b") (:keywords "day one" "tools" "convenience") (:url . "https://github.com/mori-dev/emacs-dayone"))]) (datomic-snippets . [(20180116 752) ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) "Yasnippets for Datomic" tar ((:commit . "731fbd31b814ef1521bd7eb1558eeab6a4c2e01b"))]) (datetime-format . [(20160612 1015) nil "Datetime functions" single ((:commit . "e6427538b547cbe02e1bd6ed4b765c73620bdae8") (:keywords "datetime" "calendar") (:url . "https://github.com/zonuexe/emacs-datetime"))]) (datetime . [(20180325 1004) ((emacs (24 1)) (extmap (1 0))) "Parsing, formatting and matching timestamps" tar ((:commit . "d8674ac11f9ebb702e5bbac10a4a6e5542958ef5") (:keywords "lisp" "i18n") (:url . "https://github.com/doublep/datetime"))]) (date-field . [(20141128 1705) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single ((:commit . "11c9170d1f7b343233f7716d4c0a62be024c1654") (:keywords "widgets") (:url . "https://github.com/aki2o/emacs-date-field"))]) (date-at-point . [(20150308 543) nil "Add `date' to `thing-at-point' function" single ((:commit . "38df823d05df08ec0748a4185113fae5f99090e9") (:keywords "convenience") (:url . "https://github.com/alezost/date-at-point.el"))]) (dashboard . [(20180704 2325) ((emacs (24 4)) (page-break-lines (0 11))) "A startup screen extracted from Spacemacs" tar ((:commit . "763d5a036b0aef4e8e9e658a8d7cc65f842bb622") (:keywords "startup" "screen" "tools") (:url . "https://github.com/rakanalh/emacs-dashboard"))]) (dash-functional . [(20180107 818) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:commit . "a55452a38438208d48a4a6187f80dd14d76cd967") (:keywords "lisp" "functions" "combinators"))]) (dash-at-point . [(20180710 656) nil "Search the word at point with Dash" single ((:commit . "4d795a23a8428c421d5107f1b005c9d8e0d1816c") (:url . "https://github.com/stanaka/dash-at-point"))]) (dash . [(20180413 30) nil "A modern list library for Emacs" single ((:commit . "a55452a38438208d48a4a6187f80dd14d76cd967") (:keywords "lists"))]) (dart-mode . [(20180721 2225) ((emacs (24 5)) (cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (s (1 10))) "Major mode for editing Dart files" single ((:commit . "9c9a63ed7bbf2b9d3521ead8c302489789552f9d") (:keywords "language") (:url . "https://github.com/nex3/dart-mode"))]) (darktooth-theme . [(20180721 2039) ((autothemer (0 2))) "From the darkness... it watches" single ((:commit . "aae3b890941510d632790a74c092d5fdd5b8b599") (:url . "http://github.com/emacsfodder/emacs-theme-darktooth"))]) (darkokai-theme . [(20180513 1857) nil "A darker variant on Monokai." single ((:commit . "bd5efef1edd42664bb731abd398d5d71a5d2d145") (:url . "http://github.com/sjrmanning/darkokai"))]) (darkmine-theme . [(20160405 2324) nil "Yet another emacs dark color theme." single ((:commit . "7f7e82ca03bcad52911fa41fb3e204e32d6ee63e") (:url . "https://github.com/pierre-lecocq/darkmine-theme"))]) (darkburn-theme . [(20170423 952) nil "A not-so-low contrast color theme for Emacs." single ((:commit . "0af794ff7fac19778ac8a7efb92455c6f6c2158f") (:url . "http://github.com/gorauskas/darkburn-theme"))]) (dark-souls . [(20140314 428) nil "Prepare to die" single ((:commit . "94122b1215423e58dcf18584a2bd022029d54d4b") (:keywords "games") (:url . "http://github.com/tomjakubowski/dark-souls.el"))]) (dark-mint-theme . [(20160301 2242) nil "dark & minty fresh theme" single ((:commit . "95c30a26de31549cd341184ba9ab2be8fdc67eba"))]) (dark-krystal-theme . [(20170808 600) ((emacs (24 0))) "an Emacs 24 theme based on Dark Krystal (tmTheme)" single ((:commit . "79084b99665dc9ffb0ec62cc092349a5ecebebbc") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (darcula-theme . [(20171227 1045) nil "Inspired by IntelliJ's Darcula theme" single ((:commit . "d9b82b58ded9014985be6658f4ab17e26ed9e93e") (:keywords "faces") (:url . "https://gitlab.com/fommil/emacs-darcula-theme"))]) (darcsum . [(20140315 2110) nil "a pcl-cvs like interface for managing darcs patches" tar ((:commit . "00c252b51cb24c25fb74f529960ebd631514a4c1") (:keywords "completion" "convenience" "tools" "vc"))]) (dante . [(20180515 1312) ((dash (2 12 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (haskell-mode (13 14)) (s (1 11 0)) (lcr (1 0))) "Development mode for Haskell" single ((:commit . "0fd72ef60fe01aafbd11720cf3df2e7015847ff4") (:keywords "haskell" "tools") (:url . "https://github.com/jyp/dante"))]) (danneskjold-theme . [(20180708 724) nil "Beautiful high-contrast Emacs theme." tar ((:commit . "abc8c7fbe7ab071b8260e3355051304bb36adbd7"))]) (dakrone-theme . [(20170801 1233) nil "dakrone's custom dark theme" single ((:commit . "232ad1be5f3572dcbdf528f1655109aa355a6937") (:keywords "color" "themes") (:url . "https://github.com/dakrone/dakrone-theme"))]) (dakrone-light-theme . [(20170808 1440) nil "dakrone's custom light theme" single ((:commit . "06f198dc8b4ca7421990b30a23d89c8e0b8c5de4") (:keywords "color" "themes" "faces") (:url . "https://github.com/dakrone/dakrone-light-theme"))]) (daemons . [(20180610 810) ((emacs (25 1))) "UI for managing init system daemons (services)" tar ((:commit . "dcf42cb3178d7245d6d49de346d5e2b44e5b7498") (:keywords "unix" "convenience") (:url . "https://github.com/cbowdon/daemons.el"))]) (dad-joke . [(20170927 2358) ((emacs (24))) "Get/display dad jokes" single ((:commit . "bee47e7b746b403228fa7d7361cb095de19ac9ba") (:keywords "games") (:url . "https://github.com/davep/dad-joke.el"))]) (dactyl-mode . [(20140906 1025) nil "Major mode for editing Pentadactyl config files" single ((:commit . "cc55fe6b987271d9647492b8df4c812d884f661f") (:keywords "languages" "vim") (:url . "https://github.com/luxbock/dactyl-mode"))]) (d-mode . [(20180502 710) ((emacs (24 3))) "D Programming Language major mode for (X)Emacs" single ((:commit . "026fceb78e13d67778d72d90ba83f337d0144707") (:keywords "d" "programming" "language" "emacs" "cc-mode"))]) (czech-holidays . [(20160113 952) nil "Adds a list of Czech public holidays to Emacs calendar" single ((:commit . "d136fa09a152b3cd80db6d55c7b4ddfe07b90fbf") (:keywords "calendar"))]) (cython-mode . [(20180213 854) nil "Major mode for editing Cython files" single ((:commit . "cffb63d39c74c2c3ee0e3cc077c5a770b1818c21"))]) (cypher-mode . [(20151110 342) nil "major mode for editing cypher scripts" single ((:commit . "ce8543d7877c736c574a17b49874c9dcdc7a06d6") (:keywords "cypher" "graph") (:url . "http://github.com/fxbois/cypher-mode"))]) (cyphejor . [(20171231 2218) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single ((:commit . "df449180d28691c9bdbef7bcb25aee75b2af50ca") (:keywords "mode-line" "major-mode") (:url . "https://github.com/mrkkrp/cyphejor"))]) (cycle-themes . [(20150402 2009) ((cl-lib (0 5))) "A global minor mode to make switching themes easier" single ((:commit . "6e125d11fdbc6b78fc9f219eb2609a5e29815898") (:keywords "themes" "utility" "global minor mode") (:url . "http://github.com/toroidal-code/cycle-themes.el"))]) (cycle-resize . [(20160521 857) nil "Cycle resize the current window horizontally or vertically" single ((:commit . "7d255d6fe85f12c967a0f7fcfcf18633be194c88") (:url . "https://github.com/pierre-lecocq/cycle-resize"))]) (cycbuf . [(20131203 1237) nil "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el" single ((:commit . "1079b41c3eb27d65b66d4399959bb6253f84858e") (:keywords "files" "convenience" "buffer switching") (:url . "https://github.com/martinp26/cycbuf"))]) (cyberpunk-theme . [(20180608 2209) nil "Cyberpunk Color Theme" single ((:commit . "f8967e46b8bdb3eaf7b72474f2d70997dc1152e9") (:keywords "color" "theme" "cyberpunk"))]) (cwl-mode . [(20171205 145) ((yaml-mode (0 0 13)) (emacs (24 4))) "A major mode for editing CWL" single ((:commit . "bdeb9c0734126f940db80bfb8b1dc735dab671c7") (:keywords "languages" "cwl" "common workflow language") (:url . "https://github.com/tom-tan/cwl-mode"))]) (cursor-test . [(20131207 932) ((emacs (24))) "testing library for cursor position in emacs." single ((:commit . "e09956e048b88fd2ee8dd90b5678baed8b04d31b") (:url . "https://github.com/ainame/cursor-test.el"))]) (cuda-mode . [(20151213 1921) nil "NVIDIA CUDA Major Mode" single ((:commit . "9ae9eacfdba3559b5456342d0d03296290df8ff5") (:keywords "c" "languages"))]) (cucumber-goto-step . [(20131209 2119) ((pcre2el (1 5))) "Jump to cucumber step definition" single ((:commit . "f2713ffb26ebe1b757d1f2ea80e900b55e5895aa") (:url . "http://orthogonal.me"))]) (cubicle-mode . [(20171009 1257) nil "Major mode for the Cubicle model checker" single ((:commit . "c2fba597da83b9ddc1195f1c8710d5330db24735"))]) (cubicaltt . [(20171108 602) ((emacs (24 1)) (cl-lib (0 5))) "Mode for cubical type theory" single ((:commit . "452d973fae544861090fbdea51f4f5da653fb394") (:keywords "languages") (:url . "https://github.com/mortberg/cubicaltt"))]) (ctxmenu . [(20140303 1342) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar ((:commit . "5c2376859562b98c07c985d2b483658e4c0e888e") (:keywords "popup") (:url . "https://github.com/aki2o/emacs-ctxmenu"))]) (ctl-mode . [(20151202 206) nil "Major mode for editing GrADS script files" single ((:commit . "1a13051db21b999c7682a015b33a03096ff9d891") (:keywords "grads" "script" "major-mode"))]) (ctags-update . [(20170728 58) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ((:commit . "783bf91eba1cd27cbb739067a24e15e5e04564e6") (:keywords "exuberant-ctags" "etags") (:url . "https://github.com/jixiuf/ctags-update"))]) (ctable . [(20171005 1711) nil "Table component for Emacs Lisp" single ((:commit . "b8830d1ca95abb100a81bc32011bd17d5ecba000") (:keywords "table") (:url . "https://github.com/kiwanami/emacs-ctable"))]) (csv . [(20161113 710) nil "Functions for reading and parsing CSV files." single ((:commit . "aa1dfa1263565d5fac3879c21d8ddf5f8915e411") (:keywords "extensions" "data" "csv"))]) (cssh . [(20150810 1009) nil "clusterssh implementation for emacs" single ((:commit . "2fe2754235225a59b63f08b130cfd4352e2e1c3f") (:keywords "clusterssh" "ssh" "cssh") (:url . "http://tapoueh.org/emacs/cssh.html"))]) (css-eldoc . [(20150124 1923) nil "an eldoc-mode plugin for CSS source code" tar ((:commit . "c558ac4c470742c98a37290e6b409db28183df30"))]) (css-comb . [(20160415 2259) nil "Sort CSS properties in a particular order using CSS Comb" single ((:commit . "6fa45e5af8a8bd3af6c1154cde3540e32c4206ee") (:url . "https://github.com/channikhabra/css-comb.el"))]) (css-autoprefixer . [(20180311 900) ((emacs (24))) "Adds autoprefix to CSS" single ((:commit . "386a5defc8543a3b87820f1761c075c7d1d93b38") (:keywords "convenience" "usability" "css") (:url . "https://github.com/kkweon/emacs-css-autoprefixer"))]) (csound-mode . [(20180505 1225) ((emacs (25)) (shut-up (0 3 2)) (multi (2 0 1))) "A major mode for interacting and coding Csound" tar ((:commit . "5137de36e49b41ec428f35d9bfa08b5cc82e066c") (:url . "https://github.com/hlolli/csound-mode"))]) (csharp-mode . [(20180708 652) nil "C# mode derived mode" single ((:commit . "5e47b7764b3f4c97c260a902e8072d444dbd0f1b") (:keywords "c#" "languages" "oop" "mode") (:url . "https://github.com/josteink/csharp-mode"))]) (csgo-conf-mode . [(20161209 819) nil "CS:GO Configuration files syntax highlighting" single ((:commit . "57e7224f87a3ccc76b5564cc95fa0ff43bb6807c") (:keywords "languages") (:url . "https://github.com/wynro/emacs-csgo-conf-mode"))]) (crystal-mode . [(20180606 755) ((emacs (24 4))) "Major mode for editing Crystal files" single ((:commit . "ae87526d13be07e6817809ac9795657db0092c9d") (:keywords "languages" "crystal") (:url . "https://github.com/crystal-lang-tools/emacs-crystal-mode"))]) (cryptsy-public-api . [(20141008 528) ((json (1 2))) "Library for working with the Cryptsy public API" single ((:commit . "795c204452f880c0087663e7c35faf26ea34af4d") (:keywords "cryptsy" "bitcoin" "litecoin" "dogecoin"))]) (cryptol-mode . [(20180321 1108) nil "Cryptol major mode for Emacs" single ((:commit . "91f8ad617e5db2fad57a7be1da211f22f3b51550") (:keywords "cryptol" "cryptography") (:url . "http://github.com/thoughtpolice/cryptol-mode"))]) (crux . [(20180611 2355) ((seq (1 11))) "A Collection of Ridiculously Useful eXtensions" single ((:commit . "c79985f69b7cd96edb505199bd751f71ce6d4e58") (:keywords "convenience") (:url . "https://github.com/bbatsov/crux"))]) (crm-custom . [(20160116 1606) ((cl-lib (0 5))) "Alternate `completing-read-multiple' that uses `completing-read'" single ((:commit . "f1aaccf64306a5f99d9bf7ba815d7ea41c15518d") (:keywords "completion" "minibuffer" "multiple elements") (:url . "https://github.com/DarwinAwardWinner/crm-custom"))]) (cricbuzz . [(20171227 1607) ((enlive (0 0 1)) (f (0 19 0)) (dash (2 13 0)) (s (1 11 0))) "Cricket scores from cricbuzz in emacs" single ((:commit . "557f75f10525e7a4d50e83010b9ed07fbf9df889") (:keywords "cricket" "score") (:url . "https://github.com/lepisma/cricbuzz.el"))]) (creole-mode . [(20130721 1750) nil "a markup mode for creole" single ((:commit . "b5e79b2ec5f19fb5aacf689b5febc3e0b61515c4") (:keywords "hypermedia" "wp") (:url . "https://github.com/nicferrier/creole-mode"))]) (creole . [(20140924 800) ((noflet (0 0 3)) (kv (0 0 17))) "A parser for the Creole Wiki language" single ((:commit . "7d5cffe93857f6c75ca09ac79c0e47b8d4410e53") (:keywords "lisp" "creole" "wiki"))]) (creds . [(20140510 1006) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar ((:commit . "b059397a7d59481f05fbb1bb9c8d3c2c69226482"))]) (creamsody-theme . [(20170222 258) ((autothemer (0 2))) "Straight from the soda fountain." single ((:commit . "32fa3f4e461da92700523b1b20e7b28974c19a26") (:url . "http://github.com/emacsfodder/emacs-theme-creamsody"))]) (crappy-jsp-mode . [(20140311 231) nil "A pretty crappy major-mode for jsp." single ((:commit . "6c45ab92b452411cc0fab9bcee2f456276b4fc40") (:keywords "jsp" "major" "mode"))]) (cquery . [(20180619 1953) ((emacs (25 1)) (lsp-mode (3 4)) (dash (0 13))) "cquery client for lsp-mode" tar ((:commit . "fd881d5db6bc555b22993e8d3e517d30a56ea763") (:keywords "languages" "lsp" "c++") (:url . "https://github.com/jacobdufault/cquery"))]) (cql-mode . [(20160720 2039) ((emacs (24))) "Major mode for editting CQLs" single ((:commit . "2529ade55c125a89d8215f096a74733a90611c5d") (:keywords "cql" "cassandra") (:url . "https://github.com/Yuki-Inoue/cql-mode"))]) (cpputils-cmake . [(20170819 259) nil "Easy realtime C++ syntax check and IntelliSense with CMake." single ((:commit . "4fa37dd075c716f98b67b96f3b6e022730df1c1b") (:keywords "cmake" "intellisense" "flymake" "flycheck") (:url . "http://github.com/redguardtoo/cpputils-cmake"))]) (cpanfile-mode . [(20161001 10) ((emacs (24 4))) "Major mode for cpanfiles" single ((:commit . "eda675703525198df1f76ddf250bffa40217ec5d") (:keywords "perl") (:url . "https://github.com/zakame/cpanfile-mode"))]) (cp5022x . [(20120323 1635) nil "cp50220, cp50221, cp50222 coding system" single ((:commit . "ea7327dd75e54539576916f592ae1be98179ae35") (:keywords "languages" "cp50220" "cp50221" "cp50222" "cp51932" "cp932"))]) (coverlay . [(20180518 1555) ((emacs (24 1)) (cl-lib (0 5))) "Test coverage overlays" single ((:commit . "8205a845d58755dd7640b2e2b5991bf842998935") (:keywords "coverage" "overlay") (:url . "https://github.com/twada/coverlay.el"))]) (coverage . [(20180226 2057) ((ov (1 0)) (cl-lib (0 5))) "Code coverage line highlighting" single ((:commit . "c73d984168955ca0f47f44b0464aa45282df42b6") (:keywords "coverage" "metrics" "simplecov" "ruby" "rspec") (:url . "https://github.com/trezona-lecomte/coverage"))]) (cov . [(20180415 1331) ((emacs (24 4)) (f (0 18 2)) (s (1 11 0)) (elquery (0))) "Show coverage stats in the fringe." single ((:commit . "7c72a949b9628296af97cc7e4df0af6c3824d66e") (:keywords "coverage" "gcov" "c") (:url . "https://github.com/AdamNiederer/cov"))]) (counsel-world-clock . [(20171201 2337) ((ivy (0 9 0)) (s (1 12 0))) "Display world clock using Ivy." single ((:commit . "04153fbb21e51b1cfd042bdfc6ed1e8355a1edd7") (:url . "https://github.com/kchenphy/counsel-world-clock"))]) (counsel-tramp . [(20180311 2327) ((emacs (24 3)) (counsel (0 10))) "Tramp ivy interface for ssh, docker, vagrant" single ((:commit . "3f5ae75a6bde00bffeb2877b4ed4bd45610c0dfa") (:url . "https://github.com/masasam/emacs-counsel-tramp"))]) (counsel-spotify . [(20180319 2022) ((emacs (25)) (ivy (0 9 0))) "Control Spotify search and select music with Ivy." single ((:commit . "9033e207dccdfea7fe590d2e102d50fcd2bd22e3"))]) (counsel-pydoc . [(20171018 1342) ((emacs (24 3)) (ivy (0 9 1))) "run pydoc with counsel" single ((:commit . "1d8ff8ca3b9d69453cde423b1887fbb490a95c9e") (:keywords "completion" "matching") (:url . "https://github.com/co-dh/pydoc_utils"))]) (counsel-projectile . [(20180718 842) ((counsel (0 10 0)) (projectile (0 14 0))) "Ivy integration for Projectile" single ((:commit . "3aa0d8c1b127f2609c684c66b24c0974b507ddee") (:keywords "project" "convenience") (:url . "https://github.com/ericdanan/counsel-projectile"))]) (counsel-osx-app . [(20160821 109) ((ivy (0 8 0)) (emacs (24 3))) "launch osx applications via ivy interface" single ((:commit . "b1c54cbc033c4939966910d85ce035503079e108") (:url . "https://github.com/d12frosted/counsel-osx-app"))]) (counsel-org-clock . [(20180623 617) ((emacs (24 3)) (ivy (0 10 0)) (dash (2 0))) "Counsel commands for org-clock" single ((:commit . "960c919ed730f95b740cc6b3b9c17e0e1765d7d8") (:url . "https://github.com/akirak/counsel-org-clock"))]) (counsel-org-capture-string . [(20180724 2024) ((emacs (25 1)) (ivy (0 10))) "Counsel for org-capture-string" single ((:commit . "07d7ec668bdf301c4e0d2c439c26860cb2e35146") (:keywords "outlines") (:url . "https://github.com/akirak/counsel-org-capture-string"))]) (counsel-notmuch . [(20180713 1740) ((emacs (24)) (ivy (0 10 0)) (notmuch (0 21)) (s (1 12 0))) "Search emails in Notmuch asynchronously with Ivy" single ((:commit . "f4c864eca400abe0bb7420bcee80f2f8259ca0ff") (:keywords "mail") (:url . "https://github.com/fuxialexander/counsel-notmuch"))]) (counsel-gtags . [(20170326 559) ((emacs (24 3)) (counsel (0 8 0))) "ivy for GNU global" single ((:commit . "220ebb48419ee6891ecbf9ea8fe130b494b17ee2") (:url . "https://github.com/syohex/emacs-counsel-gtags"))]) (counsel-etags . [(20180605 613) ((emacs (24 4)) (counsel (0 9 1))) "Fast and complete Ctags/Etags solution using ivy" single ((:commit . "9437ce4e4adb7140df6af0a4528069b9e54de44b") (:keywords "tools" "convenience") (:url . "http://github.com/redguardtoo/counsel-etags"))]) (counsel-dash . [(20160729 829) ((emacs (24 4)) (dash (2 12 1)) (dash-functional (1 2 0)) (helm-dash (1 3 0)) (counsel (0 8 0))) "Browse dash docsets using Ivy" single ((:commit . "07fa74a94ff4da5b6c8c4810f5e143e701b480d2") (:keywords "dash" "ivy" "counsel") (:url . "https://github.com/nathankot/counsel-dash"))]) (counsel-css . [(20180302 236) ((emacs (24 4)) (counsel (0 7 0)) (cl-lib (0 5))) "stylesheet-selector-aware swiper" single ((:commit . "0536af00236cdce1ed08b40dd46c917e8b4b8869") (:keywords "convenience" "tools" "counsel" "swiper" "selector" "css" "less" "scss") (:url . "https://github.com/hlissner/emacs-counsel-css"))]) (counsel-codesearch . [(20180713 304) ((codesearch (1)) (counsel (0 10 0)) (emacs (24)) (ivy (0 10 0))) "Counsel interface for codesearch.el" single ((:commit . "cb9f3df541e84b4b13905c3ad3658cad2f34b0cf") (:keywords "tools") (:url . "https://github.com/abingham/emacs-counsel-codesearch"))]) (counsel-bbdb . [(20171129 1737) ((ivy (0 8 0)) (emacs (24 3))) "Quick search&input email from BBDB based on ivy" single ((:commit . "c86f4b9ef99c9db0b2c4196a300d61300dc2d0c1") (:keywords "mail" "abbrev" "convenience" "matching") (:url . "https://github.com/redguard/counsel-bbdb"))]) (counsel . [(20180723 854) ((emacs (24 3)) (swiper (0 9 0))) "Various completion functions using Ivy" single ((:commit . "93f4ea7f6951bc4b2f0b7a13fdfa7bd82013fb64") (:keywords "convenience" "matching" "tools") (:url . "https://github.com/abo-abo/swiper"))]) (cosmo . [(20170922 44) ((emacs (24 4))) "Cosmological Calculator" single ((:commit . "dd83b09a49a2843606b28279b674b2207040b36b") (:keywords "tools") (:url . "https://gitlab.com/montanari/cosmo-el"))]) (corral . [(20160502 1) nil "Quickly surround text with delimiters" single ((:commit . "e7ab6aa118e46b93d4933d1364bc273f57cd6911") (:url . "http://github.com/nivekuil/corral"))]) (coq-commenter . [(20170822 1609) ((dash (2 13 0)) (s (1 11 0)) (cl-lib (0 5))) "Coq commenting minor mode for proof" single ((:commit . "7fe9a2cc0ebdb0b1e54a24eb7971d757fb588ac3") (:keywords "comment" "coq" "proof") (:url . "http://github.com/ailrun/coq-commenter"))]) (copyit-pandoc . [(20160624 1328) ((emacs (24)) (copyit (0 0 1)) (pandoc (0 0 1))) "Copy it, yank anything!" single ((:commit . "f50d033b129d467fb517a351adf3f16cabd82a62") (:keywords "convinience" "yank" "clipboard") (:url . "https://github.com/zonuexe/emacs-copyit"))]) (copyit . [(20161126 429) ((emacs (24)) (cl-lib (0 5)) (s (1 9 0))) "Copy it, yank anything!" single ((:commit . "f50d033b129d467fb517a351adf3f16cabd82a62") (:keywords "convenience" "yank" "clipboard") (:url . "https://github.com/zonuexe/emacs-copyit"))]) (copy-file-on-save . [(20180604 719) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17)) (s (1 7 0))) "Copy file on save, automatic deployment it." single ((:commit . "5af6d5fcc35ddf9050eada96fd5f334bf0661b62") (:keywords "files" "comm" "deploy") (:url . "https://github.com/emacs-php/emacs-auto-deployment"))]) (copy-as-format . [(20171215 1616) ((cl-lib (0 5))) "Copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code" single ((:commit . "971957166fe64d914ec4be209b4f80efeeabbb19") (:keywords "github" "slack" "jira" "hipchat" "gitlab" "bitbucket" "org-mode" "pod" "rst" "asciidoc" "tools" "convenience") (:url . "https://github.com/sshaw/copy-as-format"))]) (control-mode . [(20160624 1010) nil "A \"control\" mode, similar to vim's \"normal\" mode" single ((:commit . "72d6179b60adc438aada74083b2bf4264b575de3") (:keywords "convenience" "emulations") (:url . "https://github.com/stephendavidmarsh/control-mode"))]) (contrast-color . [(20160903 1107) ((emacs (24 3)) (cl-lib (0 5))) "Pick best contrast color for you" single ((:commit . "c5fb77a211ebbef3185ada37bea7420534c33f94") (:keywords "color" "convenience") (:url . "https://github.com/yuutayamada/contrast-color-el"))]) (contextual-menubar . [(20180204 2309) nil "display the menubar only on a graphical display" single ((:commit . "f76f55232ac07df76ef9a334a0c527dfab97c40b") (:url . "https://github.com/aaronjensen/contextual-menubar"))]) (contextual . [(20160131 1037) ((emacs (24)) (dash (2 12 1)) (cl-lib (0 5))) "Contextual profile management system" single ((:commit . "9e009614fb72ef14964d7107abd44de5aed21659") (:keywords "convenience" "tools") (:url . "https://github.com/lshift-de/contextual"))]) (connection . [(20140717 2029) nil "TCP-based client connection" single ((:commit . "a23b8f4a422d0de69a006ed010eff5795319db98") (:keywords "network"))]) (conllu-mode . [(20180722 454) ((emacs (25)) (parsec (0 1)) (cl-lib (0 5))) "editing mode for CoNLL-U files" tar ((:commit . "fa2769b010c6e600711a04f083d1573505c61c2e") (:keywords "extensions") (:url . "https://github.com/odanoburu/conllu-mode"))]) (conkeror-minor-mode . [(20150114 804) nil "Mode for editing conkeror javascript files." single ((:commit . "476e81c27b056e21c192391fe674a2bf875466b0") (:keywords "programming" "tools") (:url . "http://github.com/Bruce-Connor/conkeror-minor-mode"))]) (confluence . [(20151020 1828) ((xml-rpc (1 6 4))) "Emacs mode for interacting with confluence wikis" tar ((:commit . "4518d270a07760644c4204985c83d234ece4738b") (:keywords "confluence" "wiki" "xmlrpc") (:url . "http://code.google.com/p/confluence-el/"))]) (config-parser . [(20160426 519) ((emacs (24 4))) "a library for parsing config file" single ((:commit . "85d559e7889d8f5b98b8794b79426ae25ec3caa5") (:keywords "convenience" "config") (:url . "https://github.com/lujun9972/el-config-parser"))]) (config-general-mode . [(20171024 1140) nil "Config::General config file mode" single ((:commit . "b4a8e6ba0bb027a77e4a0f701409f3e57bb2e4c0") (:keywords "files") (:url . "https://github.com/tlinden/config-general-mode"))]) (conda . [(20171122 716) ((emacs (24 4)) (pythonic (0 1 0)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "Work with your conda environments" single ((:commit . "0bba56d80bb959a20838a024b174d1cf1e2cfd07") (:keywords "python" "environment" "conda") (:url . "http://github.com/necaris/conda.el"))]) (concurrent . [(20161228 1930) ((emacs (24 3)) (deferred (0 5 0))) "Concurrent utility functions for emacs lisp" single ((:commit . "2239671d94b38d92e9b28d4e12fd79814cfb9c16") (:keywords "deferred" "async" "concurrent") (:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown"))]) (composer . [(20180415 743) ((emacs (24)) (s (1 9 0)) (f (0 17)) (request (0 2 0)) (seq (1 9)) (php-runtime (0 1 0))) "Interface to PHP Composer" single ((:commit . "1d43edd8079e84df5e1b46c65e6783cb3ff9debd") (:keywords "tools" "php" "dependency" "manager") (:url . "https://github.com/zonuexe/composer.el"))]) (composable . [(20170723 2347) ((emacs (24 4))) "composable editing" tar ((:commit . "ac981974f89607393cc61314aaa19672d45b0650") (:keywords "lisp"))]) (company-ycmd . [(20180520 353) ((ycmd (1 3)) (company (0 9 3)) (deferred (0 5 1)) (s (1 11 0)) (dash (2 13 0)) (let-alist (1 0 5)) (f (0 19 0))) "company-mode backend for ycmd" single ((:commit . "fe35b7f2e3d9370941b9e537c9bc578d814acce2") (:url . "https://github.com/abingham/emacs-ycmd"))]) (company-ycm . [(20140904 1117) ((ycm (0 1))) "company-ycm" single ((:commit . "4da8a14abcd0f4fa3235042ade2e12b5068c0601") (:keywords "abbrev"))]) (company-web . [(20180402 455) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar ((:commit . "f0cc9187c9c34f72ad71f5649a69c74f996bae9a") (:keywords "html" "company") (:url . "https://github.com/osv/company-web"))]) (company-try-hard . [(20150902 1506) ((emacs (24 3)) (company (0 8 0)) (dash (2 0))) "get all completions from company backends" single ((:commit . "70b94cfc40c576af404e743133979048e1bd2610") (:keywords "matching"))]) (company-terraform . [(20180703 533) ((emacs (24 4)) (company (0 8 12)) (terraform-mode (0 6))) "A company backend for terraform" tar ((:commit . "9c1146bfe23d4c461f4a59577faf4e46fcca7fe9") (:keywords "abbrev" "convenience" "terraform" "company") (:url . "https://github.com/rafalcieslak/emacs-company-terraform"))]) (company-tern . [(20161004 1147) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single ((:commit . "10ac058b065ae73c1f30e9fb7d969dd1a79387be") (:url . "https://github.com/proofit404/company-tern"))]) (company-suggest . [(20180527 931) ((company (0 9 0)) (emacs (25 1))) "Company-mode back-end for search engine suggests" single ((:commit . "e1fa663b48639c76d91d1f5ac3b23215aa3dabc3") (:keywords "completion" "convenience") (:url . "https://github.com/juergenhoetzel/company-suggest"))]) (company-statistics . [(20170210 1133) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" single ((:commit . "e62157d43b2c874d2edbd547c3bdfb05d0a7ae5c") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/company-mode/company-statistics"))]) (company-sourcekit . [(20170126 353) ((emacs (24 3)) (company (0 8 12)) (dash (2 12 1)) (dash-functional (1 2 0)) (sourcekit (0 2 0))) "company-mode completion backend for SourceKit" single ((:commit . "abf9bc5a0102eb666d3aa6d6bf22f6efcc852781") (:keywords "abbrev") (:url . "https://github.com/nathankot/company-sourcekit"))]) (company-solidity . [(20180407 1344) ((company (0 9 0)) (cl-lib (0 5 0)) (solidity-mode (0 1 8))) "Company-mode back-end for solidity-mode" single ((:commit . "32bfe4c8fe282c30ebf4f5cf1f9285f151c8e6d4") (:keywords "solidity" "completion" "company") (:url . "https://github.com/ethereum/emacs-solidity"))]) (company-shell . [(20170517 2241) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" single ((:commit . "6ae625f80d90e0779c79de38e8f83a336c1d00fa") (:keywords "company" "shell" "auto-completion") (:url . "https://github.com/Alexander-Miller/company-shell"))]) (company-rtags . [(20170924 2244) ((emacs (24 3)) (company (0 8 1)) (rtags (2 10))) "RTags back-end for company" single ((:commit . "9e2bbc5d562773506255143c22a52f4bc40f19e6") (:url . "http://rtags.net"))]) (company-restclient . [(20151202 401) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "company-mode completion back-end for restclient-mode" single ((:commit . "19d819b14b7cd186a840369060963a08377d052e") (:url . "https://github.com/iquiw/company-restclient"))]) (company-reftex . [(20180713 141) ((emacs (25 1)) (s (1 12)) (company (0 8))) "Company backend based on RefTeX." single ((:commit . "d96ce340851499452c8d4d64bee80a3d7f9e9275") (:keywords "bib" "tex" "company" "latex" "reftex" "references" "labels" "citations") (:url . "https://github.com/TheBB/company-reftex"))]) (company-racer . [(20171204 1910) ((emacs (24 4)) (cl-lib (0 5)) (company (0 8 0)) (deferred (0 3 1))) "Company integration for racer" single ((:commit . "a00381c9d416f375f783fcb6ae8d40669ce1f567") (:keywords "convenience") (:url . "https://github.com/emacs-pe/company-racer"))]) (company-quickhelp . [(20180525 303) ((emacs (24 3)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single ((:commit . "479676cade80a9f03802ca3d956591820ed5c537") (:keywords "company" "popup" "documentation" "quickhelp") (:url . "https://www.github.com/expez/company-quickhelp"))]) (company-qml . [(20170428 1008) ((qml-mode (0 1)) (company (0 8 12))) "Company backend for QML files" tar ((:commit . "4af4f32a7ad86d86bb9293fb0b675aec513b5736") (:keywords "extensions"))]) (company-prescient . [(20180626 1050) ((emacs (25 1)) (prescient (2 0)) (company (0 9 6))) "prescient.el + Company" single ((:commit . "a1464272d62f4054c314d1a3196f7b7673325752") (:keywords "extensions") (:url . "https://github.com/raxod502/prescient.el"))]) (company-posframe . [(20180610 1010) ((emacs (26 0)) (company (0 9 0)) (posframe (0 1 0))) "Use a posframe as company candidate menu" single ((:commit . "47861f501891d3c67958353c25f4dce13b386c3d") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/tumashu/company-posframe"))]) (company-pollen . [(20160812 810) ((company (0 9 0)) (pollen-mode (1 0))) "company-mode completion backend for pollen" single ((:commit . "df4eab5b490cb478a092e6bab6b07f9e2f9c6fad") (:keywords "languages" "pollen" "pollenpub" "company") (:url . "https://github.com/lijunsong/pollen-mode"))]) (company-plsense . [(20180117 1658) ((company (0 9 3)) (cl-lib (0 5 0)) (dash (2 12 0)) (s (1 12)) (emacs (24))) "Company backend for Perl" single ((:commit . "b48e3181e08ec597269621d621aa06636f02d883") (:url . "https://github.com/CeleritasCelery/company-plsense"))]) (company-php . [(20180510 1500) ((cl-lib (0 5)) (ac-php-core (1)) (company (0 9))) "company completion source for php" single ((:commit . "fac22638f957abf404bbee4e16d9d7b67fcd42d2") (:keywords "completion" "convenience" "intellisense") (:url . "https://github.com/xcwen/ac-php"))]) (company-nixos-options . [(20160215 57) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single ((:commit . "7007363e773a419203a69798fb0e0731b2eb0f73") (:keywords "unix") (:url . "http://www.github.com/travisbhartwell/nix-emacs/"))]) (company-ngram . [(20170129 1113) ((cl-lib (0 5)) (company (0 8 0))) "N-gram based completion" tar ((:commit . "09a68b802e64799e95f205b438d469bbd78cd2e6") (:url . "https://github.com/kshramt/company-ngram"))]) (company-nginx . [(20180603 1702) ((emacs (24))) "company-mode keywords support for nginx-mode" single ((:commit . "3074a5d322562f36867ef67bffeb25f1c0d8aca9") (:keywords "company" "nginx") (:url . "https://github.com/stardiviner/company-nginx"))]) (company-nand2tetris . [(20171201 1013) ((nand2tetris (1 1 0)) (company (0 5)) (cl-lib (0 5 0))) "Company backend for nand2tetris major mode" single ((:commit . "33acee34d24b1c6a87db833b7d23449cf858f64f") (:keywords "nand2tetris" "hdl" "company") (:url . "http://www.github.com/CestDiego/nand2tetris.el/"))]) (company-math . [(20171016 814) ((company (0 8 0)) (math-symbol-lists (1 2))) "Completion backends for unicode math symbols and latex tags" single ((:commit . "3481f03ebb6a613ff85b71ca8edd2d5842c49012") (:keywords "unicode" "symbols" "completion") (:url . "https://github.com/vspinu/company-math"))]) (company-lua . [(20171108 1506) ((company (0 8 12)) (s (1 10 0)) (f (0 17 0)) (lua-mode (20151025))) "Company backend for Lua" tar ((:commit . "29f6819de4d691e5fd0b62893a9f4fbc1c6fcb52"))]) (company-lsp . [(20180617 1033) ((emacs (25 1)) (lsp-mode (3 4)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." single ((:commit . "1cb1990dcd1feabf87a726a0b2a15c6f79eb5525") (:url . "https://github.com/tigersoldier/company-lsp"))]) (company-lean . [(20171102 754) ((emacs (24 3)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 10 0)) (f (0 19 0)) (company (0 9 3)) (lean-mode (3 3 0))) "A company backend for lean-mode" single ((:commit . "529b8fa535cfa090a6b62566794161556ffade80") (:keywords "languages") (:url . "https://github.com/leanprover/lean-mode"))]) (company-jedi . [(20151216 1921) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "company-mode completion back-end for Python JEDI" single ((:commit . "2f54e791e10f5dc0ff164bfe97f1878359fab6f6"))]) (company-irony-c-headers . [(20151018 209) ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) "Company mode backend for C/C++ header files with Irony" single ((:commit . "72c386aeb079fb261d9ec02e39211272f76bbd97") (:keywords "c" "company") (:url . "https://github.com/hotpxl/company-irony-c-headers"))]) (company-irony . [(20170905 1346) ((emacs (24 1)) (company (0 8 0)) (irony (1 1 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single ((:commit . "52aca45bcd0f2cb0648fcafa2bbb4f8ad4b2fee7") (:keywords "convenience") (:url . "https://github.com/Sarcasm/company-irony/"))]) (company-inf-ruby . [(20140805 1354) ((company (0 6 10)) (inf-ruby (2 2 7)) (emacs (24 1))) "company-mode completion back-end for inf-ruby" single ((:commit . "fe3e4863bc971fbb81edad447efad5795ead1b17") (:url . "https://github.com/company-mode/company-inf-ruby"))]) (company-go . [(20170825 943) ((company (0 8 0)) (go-mode (1 0 0))) "company-mode backend for Go (using gocode)" single ((:commit . "9d1e0378d35b0527c9aef0d17c0913fc38d88b81") (:keywords "languages"))]) (company-glsl . [(20171015 1049) ((company (0 9 4)) (glsl-mode (2 0)) (emacs (24 4))) "Support glsl in company-mode" single ((:commit . "a262c12c3bcd0807718c4edcaf2b054e30ef0e26") (:url . "https://github.com/guidoschmidt/company-glsl"))]) (company-ghci . [(20160310 1800) ((company (0 8 11)) (haskell-mode (13))) "company backend which uses the current ghci process." single ((:commit . "c2d74a41166e76de2e78c87f582ba3a1179b2aa6"))]) (company-ghc . [(20170918 133) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 4 0 0)) (emacs (24))) "company-mode ghc-mod backend" single ((:commit . "8b264b5c3c0e42c0d0c4e9315559896c9b0edfdc") (:keywords "haskell" "completion") (:url . "https://github.com/iquiw/company-ghc"))]) (company-flx . [(20180102 2118) ((emacs (24)) (company (0 8 12)) (flx (0 5))) "flx based fuzzy matching for company" single ((:commit . "16ca0d2f84e8e768bf2db8c5cfe421230a00bded") (:keywords "convenience" "company" "fuzzy" "flx") (:url . "https://github.com/PythonNut/company-flx"))]) (company-flow . [(20180225 1359) ((company (0 8 0)) (dash (2 13 0))) "Flow backend for company-mode" single ((:commit . "76ef585c70d2a3206c2eadf24ba61e59124c3a16") (:url . "https://github.com/aaronjensen/company-flow"))]) (company-erlang . [(20170122 2138) ((emacs (24 4)) (ivy-erlang-complete (0 1)) (company (0 9 2))) "company backend based on ivy-erlang-complete" single ((:commit . "bc0524a16f17b66c7397690e4ca0e004f09ea6c5") (:keywords "tools"))]) (company-emoji . [(20161230 1937) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" tar ((:commit . "8dc88ffe0773ef44321f245d39430c14a1bc2b82") (:keywords "emoji" "company") (:url . "https://github.com/dunn/company-emoji.git"))]) (company-emacs-eclim . [(20170104 743) ((eclim (0 3)) (company (0 7)) (cl-lib (0 5))) "company-mode backend for eclim" single ((:commit . "6396ad1cd25c0a197109343ec1cce5d5080acdff"))]) (company-edbi . [(20160221 1123) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single ((:commit . "ffaeff75d0457285d16d11db772881542a6026ad") (:url . "https://github.com/proofit404/company-edbi"))]) (company-distel . [(20161002 2339) ((distel-completion-lib (1 0 0))) "Erlang/distel completion backend for company-mode" single ((:commit . "0cf9190b54540c41ee812f5b6d98305fb263d969") (:keywords "erlang" "distel" "company") (:url . "github.com/sebastiw/distel-completion"))]) (company-dict . [(20180216 156) ((emacs (24 4)) (company (0 8 12)) (parent-mode (2 3))) "A backend that emulates ac-source-dictionary" single ((:commit . "7ab6331d8095e9b93c726da754102fd708c0002e") (:keywords "company" "dictionary" "ac-source-dictionary") (:url . "https://github.com/hlissner/emacs-company-dict"))]) (company-dcd . [(20170516 210) ((company (0 9)) (flycheck-dmd-dub (0 7)) (yasnippet (0 8)) (popwin (0 7)) (cl-lib (0 5)) (ivy (20160804 326))) "Company backend for Dlang using DCD." single ((:commit . "4832188a9e42287539a69c372fe1643166a6a7aa") (:keywords "languages") (:url . "http://github.com/tsukimizake/company-dcd"))]) (company-coq . [(20180307 510) ((company-math (1 1)) (company (0 8 12)) (yasnippet (0 11 0)) (dash (2 12 1)) (cl-lib (0 5))) "A collection of extensions for Proof General's Coq mode" tar ((:commit . "0271b2cbea7f056d143ed248a6f32a319d33534a"))]) (company-childframe . [(20180704 2246) ((emacs (26 0)) (company-posframe (0 1 0))) "Please use company-posframe instead." single ((:commit . "562eaa1e3a0c39dd36f10cda37a3724384fde1df") (:keywords "abbrev" "convenience" "matching") (:url . "https://github.com/company-mode/company-mode"))]) (company-cabal . [(20170917 617) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar ((:commit . "62112a7259e24bd6c08885629a185afe512b7d3d") (:url . "https://github.com/iquiw/company-cabal"))]) (company-c-headers . [(20170531 1330) ((emacs (24 1)) (company (0 8))) "Company mode backend for C/C++ header files" single ((:commit . "e959d43bebf0a524f7378669983a39ee1379cc21") (:keywords "development" "company"))]) (company-box . [(20180607 845) ((emacs (26 0 91)) (dash (2 13)) (dash-functional (1 2 0)) (company (0 9 6))) "Company front-end with icons" tar ((:commit . "6e047e6fd7226a1b8292a74985db82bbccc679c7") (:keywords "company" "completion" "front-end" "convenience") (:url . "https://github.com/sebastiencs/company-box"))]) (company-bibtex . [(20171104 2344) ((company (0 9 0)) (cl-lib (0 5)) (parsebib (1 0))) "Company completion for bibtex keys" single ((:commit . "da67faf3a6faba8e7f1b222dedfc5521b02c7655") (:keywords "company-mode" "bibtex") (:url . "https://github.com/gbgar/company-bibtex"))]) (company-axiom . [(20171024 1310) ((emacs (24)) (company (0 9)) (axiom-environment (20171021))) "A company-mode backend for the axiom-environment system" single ((:commit . "6842fb7f85df839acde395093647e2f91cf62fdd") (:keywords "axiom" "openaxiom" "fricas" "axiom-environment"))]) (company-auctex . [(20180330 1118) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Company-mode auto-completion for AUCTeX" single ((:commit . "f24de90a14c46fc3b924875c658b319c7f209aff") (:url . "https://github.com/alexeyr/company-auctex/"))]) (company-arduino . [(20160306 939) ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5)) (company-irony (0 1 0)) (company-c-headers (20140930)) (arduino-mode (1 0))) "company-mode for Arduino" single ((:commit . "d7e369702b8eee63e6dfdeba645ce28b6dc66fb1") (:keywords "convenience" "development" "company") (:url . "https://github.com/yuutayamada/company-arduino"))]) (company-ansible . [(20180701 1113) ((emacs (24 4)) (company (0 8 12))) "A company back-end for ansible" tar ((:commit . "c6dc714e3a15f89671ae5e8fe668858b20ef63e8") (:keywords "ansible") (:url . "https://github.com/krzysztof-magosa/company-ansible"))]) (company-anaconda . [(20180610 2321) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single ((:commit . "ef6cbe26af1ee526a38139ed21cec8569c1b989d") (:url . "https://github.com/proofit404/anaconda-mode"))]) (company . [(20180723 928) ((emacs (24 3))) "Modular text completion framework" tar ((:commit . "4d921fe0face2d89be2014d869b0f1e742dd4480") (:keywords "abbrev" "convenience" "matching") (:url . "http://company-mode.github.io/"))]) (common-lisp-snippets . [(20180226 723) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar ((:commit . "1ddf808311ba4d9e8444a1cb50bd5ee75e4111f6") (:keywords "snippets") (:url . "https://github.com/mrkkrp/common-lisp-snippets"))]) (commify . [(20161106 1534) ((s (1 9 0))) "Toggle grouping commas in numbers" single ((:commit . "78732c2fa6c1a10288b7436d7c561ec9ebdd41be") (:keywords "convenience" "editing" "numbers" "grouping" "commas") (:url . "https://github.com/ddoherty03/commify"))]) (commenter . [(20160219 827) ((emacs (24 4)) (let-alist (1 0 4))) "multiline-comment support package" single ((:commit . "6d1885419434ba779270c6fda0e30d390bb074bd") (:keywords "comment") (:url . "https://github.com/yuutayamada/commenter"))]) (comment-tags . [(20170910 1035) ((emacs (24 5))) "Highlight & navigate comment tags like 'TODO'." single ((:commit . "7d914097f0a03484af71e621db533737fc692f58") (:keywords "convenience" "comments" "tags") (:url . "https://github.com/vincekd/comment-tags"))]) (comment-dwim-2 . [(20170809 1354) nil "An all-in-one comment command to rule them all" single ((:commit . "8da8aba4cab4a0a1eef3aea2de219227526876e4") (:keywords "convenience") (:url . "https://github.com/remyferre/comment-dwim-2"))]) (commander . [(20140120 1052) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single ((:commit . "c93985dc318fe89e5a29abc21d19fb41e2fd14d2") (:keywords "cli" "argv") (:url . "http://github.com/rejeep/commander.el"))]) (command-queue . [(20160328 1025) ((emacs (24 3))) "shell command queue" single ((:commit . "f327c6f852592229a755ec6de0c62c6aeafd6659") (:url . "https://github.com/Yuki-Inoue/command-queue"))]) (command-log-mode . [(20160412 2147) nil "log keyboard commands to buffer" single ((:commit . "af600e6b4129c8115f464af576505ea8e789db27") (:keywords "help") (:url . "https://github.com/lewang/command-log-mode"))]) (comint-intercept . [(20170317 528) ((emacs (24 3))) "Intercept input in comint-mode" single ((:commit . "a329abf01fa8e0c6b02b46b29bcb421a21120dc5") (:keywords "processes" "terminals") (:url . "https://github.com/hying-caritas/comint-intercept"))]) (com-css-sort . [(20180607 1808) ((emacs (24 4)) (s (1 12 0))) "Common way of sorting the CSS attributes." single ((:commit . "1564c035039a053936d186b4db7a71b34db99200") (:url . "https://github.com/jcs090218/com-css-sort"))]) (column-enforce-mode . [(20171030 1200) nil "Highlight text that extends beyond a  column" single ((:commit . "2341a2b6a33d4b8b74c35062ec9cfe1bffd61944") (:url . "www.github.com/jordonbiondo/column-enforce-mode"))]) (colormaps . [(20171008 1524) ((emacs (25))) "Hex colormaps" single ((:commit . "19fbb64a6288d505b9cf45c9b5a3eed0bfb135e2") (:keywords "tools") (:url . "https://github.com/lepisma/colormaps.el"))]) (color-theme-x . [(20180226 1646) ((cl-lib (0 5))) "convert color themes to X11 resource settings" single ((:commit . "6c2264aa6c5d9a72caeae67ebaa4472090e70350") (:keywords "convenience" "faces" "frames") (:url . "https://github.com/ajsquared/color-theme-x"))]) (color-theme-solarized . [(20171024 825) ((color-theme (6 5 5))) "Solarized themes for Emacs" tar ((:commit . "f3ca8902ea056fb8e46cb09f09c96294e31cd4ee"))]) (color-theme-sanityinc-tomorrow . [(20180713 212) nil "A version of Chris Kempson's \"tomorrow\" themes" tar ((:commit . "0360984a8a170df8a1dc0870cf547c0e3c4b5b71") (:keywords "faces" "themes") (:url . "http://github.com/purcell/color-theme-sanityinc-tomorrow"))]) (color-theme-sanityinc-solarized . [(20160429 1903) nil "A version of Ethan Schoonover's Solarized themes" tar ((:commit . "6dd1d67a8e88a7bd586572cabe519b99a90fc3ee") (:keywords "themes") (:url . "http://github.com/purcell/color-theme-sanityinc-solarized"))]) (color-theme-modern . [(20161219 344) ((emacs (24))) "Reimplement colortheme with Emacs 24 theme framework." tar ((:commit . "42a79266f1d7b473e9328e67a455e505e6c3eff5") (:url . "https://github.com/emacs-jp/replace-colorthemes/"))]) (color-theme-buffer-local . [(20170125 2201) ((color-theme (0))) "Install color-themes by buffer." single ((:commit . "e606dec66f16a06140b9aad625a4fd52bca4f936") (:keywords "faces") (:url . "http://github.com/vic/color-theme-buffer-local"))]) (color-theme-approximate . [(20140227 2036) nil "Makes Emacs theme works on terminal transparently" single ((:commit . "f54301ca39bc5d2ffb000f233f8114184a3e7d71"))]) (color-theme . [(20080305 34) nil "install color themes" tar ((:commit . "eeb07560b30aaf7934dfd21f5c2518a479905cd9") (:keywords "faces") (:url . "http://www.emacswiki.org/cgi-bin/wiki.pl?ColorTheme"))]) (color-moccur . [(20141222 1635) nil "multi-buffer occur (grep) mode" single ((:commit . "4f1c59ffd1ccc2ab1a171cd6b721e8cb9e002fb7") (:keywords "convenience") (:url . "http://www.bookshelf.jp/elc/color-moccur.el"))]) (color-identifiers-mode . [(20180504 926) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single ((:commit . "60ae3ab0fdffe0efae7e08950d7b2a96f4ea49e2") (:keywords "faces" "languages") (:url . "https://github.com/ankurdave/color-identifiers-mode"))]) (colonoscopy-theme . [(20170808 609) ((emacs (24 0))) "an Emacs 24 theme based on Colonoscopy (tmTheme)" single ((:commit . "64bbb322b13dae91ce9f1e3581f836f94f800ead") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (colemak-evil . [(20171015 1607) ((evil (20170323 1140))) "Colemak-friendly keybindings for Evil." single ((:commit . "192c779281ae1fbf2405dcdb55b3c5b2a1d0b3d1") (:url . "https://github.com/patbl/colemak-evil"))]) (coin-ticker . [(20170611 27) ((request (0 3 0)) (emacs (25))) "Show a cryptocurrency price ticker" single ((:commit . "9efab90fe4e6f29464af14e0d8fd1e20c0147b80") (:keywords "news") (:url . "https://github.com/eklitzke/coin-ticker-mode"))]) (coffee-mode . [(20170324 240) ((emacs (24 3))) "Major mode for CoffeeScript code" single ((:commit . "86ab8aae8662e8eff54d3013010b9c693b16eac5") (:keywords "coffeescript" "major" "mode") (:url . "http://github.com/defunkt/coffee-mode"))]) (coffee-fof . [(20131012 530) ((coffee-mode (0 4 1))) "A coffee-mode configuration for `ff-find-other-file'." single ((:commit . "211529594bc074721c6cbc4edb73a63cc05f89ac") (:keywords "coffee-mode") (:url . "http://github.com/yasuyk/coffee-fof"))]) (codic . [(20150926 427) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar ((:commit . "52bbb6997ef4ab9fb7fea43bbfff7f04671aa557") (:url . "https://github.com/syohex/emacs-codic"))]) (codesearch . [(20180508 822) ((elog (0 1))) "Core support for managing codesearch tools" tar ((:commit . "b6452c87d8405f37a65ce9320e59422733580bbe") (:keywords "tools" "development" "search") (:url . "https://github.com/abingham/emacs-codesearch"))]) (codebug . [(20140929 1437) nil "Interact with codebug" single ((:commit . "ac0e4331ba94ccb5203fa492570e1ca6b90c3d52") (:url . "http://www.shanedowling.com/"))]) (code-library . [(20160426 518) ((gist (1 3 1))) "use org-mode to collect code snippets" single ((:commit . "32d59c5c845d6dbdda18f9bd1c03a58d55417fc5") (:keywords "lisp" "code"))]) (code-archive . [(20180705 1913) ((emacs (24 3))) "git supported code archive and reference for org-mode" single ((:commit . "efa3b66503a840fa4aa0005f7740e1da97be4f8a") (:url . "https://github.com/mschuldt/code-archive"))]) (cobra-mode . [(20140116 1316) nil "Major mode for .NET-based Cobra language" single ((:commit . "acd6e53f6286af5176471d01f25257e5ddb6dd01") (:keywords "languages") (:url . "http://github.com/Nekroze/cobra-mode"))]) (cobalt . [(20180304 355) ((emacs (24))) "Easily use the Cobalt.rs static site generator" single ((:commit . "634ace275697e188746ca22a30ff94380ec756be") (:keywords "convenience") (:url . "https://github.com/cobalt-org/cobalt.el"))]) (cnfonts . [(20171205 111) ((emacs (24))) "A simple Chinese fonts config tool" tar ((:commit . "4583e30d5058773606b830072df38a038d40203a") (:keywords "convenience" "chinese" "font") (:url . "https://github.com/tumashu/cnfonts"))]) (cmm-mode . [(20150224 2346) nil "Major mode for C-- source code" single ((:commit . "c3ad514dff3eb30434f6b20d953276d4c00de1ee"))]) (cmd-to-echo . [(20161203 1333) ((emacs (24 4)) (s (1 11 0)) (shell-split-string (20151224 208))) "Show the output of long-running commands in the echo area" single ((:commit . "e0e874fc0e1ad6d291e39ed76023445297ad438a"))]) (cmake-project . [(20171121 315) nil "Integrates CMake build process with Emacs" single ((:commit . "d3f408f226eff3f77f7e00dd519f4efc78fd292d") (:keywords "c" "cmake" "languages" "tools") (:url . "http://github.com/alamaison/emacs-cmake-project"))]) (cmake-mode . [(20180709 726) nil "major-mode for editing CMake sources" single ((:commit . "4a749b245929a65847413aed7ade80d4e5e24e5b"))]) (cmake-ide . [(20180713 813) ((emacs (24 4)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0)) (s (1 11 0))) "Calls CMake to find out include paths and other compiler flags" single ((:commit . "0fa6258692908c4c461d46827db0be6cf0a5d5b1") (:keywords "languages") (:url . "http://github.com/atilaneves/cmake-ide"))]) (cmake-font-lock . [(20170117 1225) ((cmake-mode (0 0))) "Advanced, type aware, highlight support for CMake" single ((:commit . "8be491b4b13338078e524e2fe6213c93e18a101e") (:keywords "faces" "languages") (:url . "https://github.com/Lindydancer/cmake-font-lock"))]) (cm-mode . [(20170203 1307) ((cl-lib (0 5))) "Minor mode for CriticMarkup" single ((:commit . "276d49c859822265070ae5dfbb403fd7d8d06436") (:keywords "text" "markdown"))]) (clues-theme . [(20161213 327) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single ((:commit . "abd61f2b7f3e98de58ca26e6d1230e70c6406cc7") (:url . "https://github.com/emacsfodder/emacs-clues-theme"))]) (cloud-to-butt-erc . [(20130627 1608) nil "Replace 'the cloud' with 'my butt'" single ((:commit . "6710c03d1bc91736435cbfe845924940cae34e5c") (:url . "http://www.github.com/leathekd/cloud-to-butt-erc"))]) (closure-lint-mode . [(20101118 1324) nil "minor mode for the Closure Linter" single ((:commit . "bc3d2fd5c35580bf1b8af43b12484c95a343b4b5") (:keywords "tools" "closure" "javascript" "lint" "flymake") (:url . "https://github.com/r0man/closure-lint-mode"))]) (closql . [(20180714 1208) ((emacs (25 1)) (emacsql-sqlite (2 0 3))) "store EIEIO objects using EmacSQL" single ((:commit . "d481b73de5a0127f70eba8fc91aff58e689a8bc0") (:keywords "extensions") (:url . "https://github.com/emacscollective/closql"))]) (clomacs . [(20180722 757) ((emacs (24 3)) (cider (0 16 0)) (s (1 12 0)) (simple-httpd (1 4 6))) "Simplifies Emacs Lisp interaction with Clojure." single ((:commit . "be07dc637553b86b6d5cfbbe7dcb4acaf897135e") (:keywords "clojure" "interaction") (:url . "https://github.com/clojure-emacs/clomacs"))]) (clojure-snippets . [(20180314 608) ((yasnippet (0 10 0))) "Yasnippets for clojure" tar ((:commit . "6068dca90467a0f4ebc2cd39338a173d6f5ddc04"))]) (clojure-quick-repls . [(20150814 36) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single ((:commit . "730311dd3ac4e0aceb0204f818b422017873467f") (:keywords "languages" "clojure" "cider" "clojurescript") (:url . "https://github.com/symfrog/clojure-quick-repls"))]) (clojure-mode-extra-font-locking . [(20180114 911) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:commit . "e9da8797e577651b96875228e3804ef11b3c9ff0") (:keywords "languages" "lisp") (:url . "http://github.com/clojure-emacs/clojure-mode"))]) (clojure-mode . [(20180709 648) ((emacs (25 1))) "Major mode for Clojure code" single ((:commit . "e9da8797e577651b96875228e3804ef11b3c9ff0") (:keywords "languages" "clojure" "clojurescript" "lisp") (:url . "http://github.com/clojure-emacs/clojure-mode"))]) (clojure-cheatsheet . [(20180201 4) ((helm (1 7 7)) (cider (0 9 0))) "The Clojure Cheatsheet for Emacs" single ((:commit . "85c382317a56bbdfac03ae95999c28fc0cde65d7") (:keywords "clojure" "cider" "cheatsheet" "helm") (:url . "https://github.com/clojure-emacs/clojure-cheatsheet"))]) (clojars . [(20161109 1448) ((request-deferred (0 2 0))) "clojars.org search interface" single ((:commit . "8f4ca8a283d4e9acaab912bb7217ffb5800b01a7") (:keywords "docs" "help" "tools") (:url . "https://github.com/joshuamiller/clojars.el"))]) (clocker . [(20160125 1505) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single ((:commit . "4a4831ed4e42e18976edd16b844cb16cb78f3c17") (:keywords "org"))]) (cloc . [(20170728 1124) ((cl-lib (0 5))) "count lines of code over emacs buffers" single ((:commit . "f30f0472e465cc8d433d2473e9d3b8dfe2c94491") (:keywords "cloc" "count" "source" "code" "lines") (:url . "https://github.com/cosmicexplorer/cloc-emacs"))]) (clmemo . [(20160326 923) nil "Change Log MEMO" tar ((:commit . "846a81b984d71edf8278a4d9f9b886e44d5b8365") (:keywords "convenience") (:url . "https://github.com/ataka/clmemo"))]) (cljsbuild-mode . [(20160402 1000) nil "A minor mode for the ClojureScript 'lein cljsbuild' command" single ((:commit . "fa2315660cb3ce944b5e16c679dcf5afd6a97f4c") (:keywords "clojure" "clojurescript" "leiningen" "compilation") (:url . "http://github.com/kototama/cljsbuild-mode"))]) (cljr-helm . [(20160913 128) ((clj-refactor (0 13 0)) (helm-core (1 7 7)) (cl-lib (0 5))) "Wraps clojure refactor commands with helm" single ((:commit . "f2fc7b698a56e4a44d5dfbc6a55d77a93c0fa9a4") (:keywords "helm" "clojure" "refactor") (:url . "https://github.com/philjackson/cljr-helm"))]) (clj-refactor . [(20180708 57) ((emacs (24 4)) (s (1 8 0)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 6 1)) (cider (0 17 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of clojure refactoring functions" tar ((:commit . "443f0860d1d1c209cf4baae998f55df0616a819f") (:keywords "convenience" "clojure" "cider"))]) (clips-mode . [(20170909 123) nil "Major mode for editing CLIPS code and REPL" tar ((:commit . "dd38e2822640a38f7d8bfec4f69d8dd24be27074"))]) (clippy . [(20161028 1254) ((pos-tip (1 0))) "Show tooltip with function documentation at point" single ((:commit . "ad4b5dba4cede6d4b21533186303d3d3e9a2510f") (:keywords "docs") (:url . "https://github.com/Fuco1/clippy.el"))]) (clipmon . [(20180129 254) nil "Clipboard monitor - watch system clipboard, add changes to kill ring/autoinsert" tar ((:commit . "95dc56c7ed84a654ec90f4740eb6df1050de8cf1") (:keywords "convenience") (:url . "https://github.com/bburns/clipmon"))]) (cliphist . [(20171112 2138) ((emacs (24 3)) (ivy (0 9 0))) "Read data from clipboard managers at Linux and Mac" tar ((:commit . "e454254f8bd9dbaea28e95c786d7297a2d4e920a") (:keywords "clipboard" "manager" "history") (:url . "http://github.com/redguardtoo/cliphist"))]) (click-mode . [(20180610 1744) ((emacs (24))) "Major mode for the Click Modular Router Project" single ((:commit . "b94ea8cce89cf0e753b2ab915202d49ffc470fb6") (:keywords "click" "router") (:url . "https://github.com/bmalehorn/click-mode"))]) (clevercss . [(20131228 1755) nil "A major mode for editing CleverCSS files" single ((:commit . "b8a3c0dd674367c62b1a1ffec84d88fe0c0219bc") (:keywords "languages" "css"))]) (clear-text . [(20160406 1343) nil "Make you use clear text" tar ((:commit . "b50669b6077d6948f72cb3c649281d206e0c2f2b") (:keywords "convenience") (:url . "https://github.com/xuchunyang/clear-text.el"))]) (clean-buffers . [(20160529 1559) ((cl-lib (0 5))) "clean useless buffers" single ((:commit . "1be6c54e3095761b6b64bf749faae3dfce94e72a") (:keywords "convenience" "usability" "buffers"))]) (clean-aindent-mode . [(20171017 1343) nil "Simple indent and unindent, trims indent white-space" single ((:commit . "a97bcae8f43a9ff64e95473e4ef0d8bafe829211") (:keywords "indentation" "whitespace" "backspace") (:url . "https://github.com/pmarinov/clean-aindent-mode"))]) (clang-format . [(20180406 814) ((cl-lib (0 3))) "Format code using clang-format" single ((:commit . "3620b76c6657a53d0c5033e6a05e6104541ebc7d") (:keywords "tools" "c"))]) (cl-lib-highlight . [(20140127 1312) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ((:commit . "fd1b308e6e989791d1df14438efa6b77d20f7c7e") (:url . "https://github.com/skeeto/cl-lib-highlight"))]) (cl-format . [(20160412 1745) nil "CL format routine." tar ((:commit . "4380cb8009c47cc6d9098b383082b93b1aefa460"))]) (citeproc . [(20180429 57) ((emacs (25)) (dash (2 13 0)) (s (1 12 0)) (f (0 18 0)) (queue (0 2)) (string-inflection (1 0)) (org (9))) "A CSL 1.0.1 Citation Processor" tar ((:commit . "44f147d228d2d652cdd404d31e987e14519c3eef") (:keywords "bib") (:url . "https://github.com/andras-simonyi/citeproc-el"))]) (circe-notifications . [(20180102 1518) ((emacs (24 4)) (circe (2 3)) (alert (1 2))) "Add desktop notifications to Circe." single ((:commit . "291149ac12877bbd062da993479d3533a26862b0") (:url . "https://github.com/eqyiel/circe-notifications"))]) (circe . [(20180525 531) ((cl-lib (0 5))) "Client for IRC in Emacs" tar ((:commit . "fedfa7eb8516a53fa70b6a1f4fce4b5ab66ea91f") (:url . "https://github.com/jorgenschaefer/circe"))]) (circadian . [(20180708 643) ((emacs (24 4))) "Theme-switching based on daytime" single ((:commit . "9894361dcd6ffb6d4629b4cbbabda2153699eb8e") (:keywords "themes") (:url . "https://github.com/GuidoSchmidt/circadian"))]) (cinspect . [(20150715 1933) ((emacs (24)) (cl-lib (0 5)) (deferred (0 3 1)) (python-environment (0 0 2))) "Use cinspect to look at the CPython source of builtins and other C objects!" single ((:commit . "4e199a90f89b335cccda1518aa0963e0a1d4fbab") (:keywords "python") (:url . "https://github.com/inlinestyle/cinspect-mode"))]) (cil-mode . [(20160622 730) nil "Common Intermediate Language mode" single ((:commit . "a78a88ca9a66a82f069329a96e34b67478ae2d9b") (:keywords "languages") (:url . "https://github.com/ForNeVeR/cil-mode"))]) (ciel . [(20170330 526) ((emacs (24))) "A command that is clone of \"ci\" in vim." single ((:commit . "8c73f78d60ef52d3c395a9629963a63439b8a83e") (:keywords "convinience") (:url . "https://github.com/cs14095/ciel.el"))]) (cider-spy . [(20160313 740) ((emacs (24 4)) (cider (0 10 0)) (dash (2 5 0)) (cl-lib (0 5)) (noflet (0 0 15))) "Spy on CIDER to get info" single ((:commit . "0224608d240e9900e588b6df049c2a87c24fc936") (:keywords "languages" "clojure" "cider" "nrepl") (:url . "http://www.github.com/jonpither/cider-spy"))]) (cider-hydra . [(20161018 2254) ((cider (0 14 0)) (hydra (0 13 0))) "Hydras for CIDER." single ((:commit . "6bb341143fe16f12be2262b2bcd003a246962676") (:keywords "convenience" "tools") (:url . "https://github.com/clojure-emacs/cider-hydra"))]) (cider-eval-sexp-fu . [(20160907 100) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexp." single ((:commit . "5687e7b33e17f2be40b036dac82da4a5bc6705fb") (:keywords "languages" "clojure" "cider"))]) (cider-decompile . [(20151121 2137) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" single ((:commit . "5d87035f3c3c14025e8f01c0c53d0ce2c8f56651") (:keywords "languages" "clojure" "cider") (:url . "http://www.github.com/clojure-emacs/cider-decompile"))]) (cider . [(20180724 1054) ((emacs (25)) (clojure-mode (5 7 0)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 7)) (seq (2 16)) (sesman (0 1 1))) "Clojure Interactive Development Environment that Rocks" tar ((:commit . "63b4fcac4da76ec8f2b44539e6c8c7095e1b3227") (:keywords "languages" "clojure" "cider") (:url . "http://www.github.com/clojure-emacs/cider"))]) (chyla-theme . [(20180302 858) nil "chyla.org - green color theme." single ((:commit . "ae5e7ecace2ab474151eb0ac5ef07fba2dc32f8a") (:url . "https://github.com/chyla/ChylaThemeForEmacs"))]) (chruby . [(20180114 852) ((cl-lib (0 5))) "Emacs integration for chruby" single ((:commit . "42bc6d521f832eca8e2ba210f30d03ad5529788f") (:keywords "languages") (:url . "https://github.com/plexus/chruby.el"))]) (chronos . [(20150602 829) nil "multiple simultaneous countdown / countup timers" tar ((:commit . "b360d9dae57aa553cf2a14ffa0756a51ad71de09") (:keywords "calendar") (:url . "http://github.com/dxknight/chronos"))]) (choice-program . [(20171004 931) ((emacs (25)) (cl-lib (1 0))) "parameter based program" tar ((:commit . "27607ec1fe241c58fbc1f861454a8e2ec1fd7b15") (:keywords "exec" "execution" "parameter" "option") (:url . "https://github.com/plandes/choice-program"))]) (chinese-yasdcv . [(20171014 1844) ((cl-lib (0 5)) (pyim (1 6 0))) "Yet another StarDict frontend" tar ((:commit . "5ab830daf1273d5a5cddcb94b56a9737f12d996f") (:keywords "convenience" "chinese" "dictionary") (:url . "https://github.com/tumashu/chinese-yasdcv"))]) (chinese-word-at-point . [(20170811 241) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single ((:commit . "8223d7439e005555b86995a005b225ae042f0538") (:keywords "convenience" "chinese") (:url . "https://github.com/xuchunyang/chinese-word-at-point.el"))]) (chinese-wbim . [(20150623 2050) nil "Enable Wubi Input Method in Emacs." tar ((:commit . "57ff61ff3895d77335709d24b40cefc4d10b0095"))]) (chinese-number . [(20161007 2209) nil "Convert numbers between Arabic and Chinese formats" single ((:commit . "7311c2a0c5eea5f016a90d733dfe75144c302fb2") (:url . "https://github.com/zhcosin/chinese-number"))]) (chinese-conv . [(20170807 1428) ((cl-lib (0 5))) "Conversion between Chinese Characters with opencc or cconv" single ((:commit . "b56815bbb163d642e97fa73093b5a7e87cc32574") (:url . "https://github.com/gucong/emacs-chinese-conv"))]) (chicken-scheme . [(20141116 1139) nil "Scheme-mode extensions for Chicken Scheme" single ((:commit . "19b0b08b5592063e852cae094b394c7d1f923639") (:url . "http://github.com/dleslie/chicken-scheme"))]) (cherry-blossom-theme . [(20150621 2042) ((emacs (24 0))) "a soothing color theme for Emacs24." single ((:commit . "eea7653e00f35973857ee23b27bc2fae5e753e50") (:url . "https://github.com/inlinestyle/emacs-cherry-blossom-theme"))]) (chef-mode . [(20180628 753) nil "minor mode for editing an opscode chef repository" single ((:commit . "048d691cb63981ae235763d4a6ced4af5c729924") (:keywords "chef" "knife"))]) (cheerilee . [(20160313 1135) ((xelb (0 1))) "Toolkit library" tar ((:commit . "41bd81b5b0bb657241ceda5be6af5e07254d7376") (:keywords "tools"))]) (chee . [(20171123 1433) ((dash (2 12 1)) (s (1 10 0)) (f (0 18 2))) "Interface to chee using dired and image-dired" tar ((:commit . "669ff9ee429f24c3c2d03b83d9cb9aec5f86bb8b") (:url . "https://github.com/eikek/chee/tree/release/0.3.0/emacs"))]) (checkbox . [(20141116 1658) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single ((:commit . "335afa4404adf72973195a580458927004664d98") (:keywords "convenience") (:url . "http://github.com/camdez/checkbox.el"))]) (cheatsheet . [(20170126 1350) ((emacs (24)) (cl-lib (0 5))) "create your own cheatsheet" single ((:commit . "e4f8e0110167ea16a17a74517d1f10cb7ff805b8") (:keywords "convenience" "usability") (:url . "http://github.com/darksmile/cheatsheet/"))]) (cheat-sh . [(20170802 418) ((emacs (24))) "Interact with cheat.sh" single ((:commit . "e90445124f3f145a047779e42d070a3c5e150f70") (:keywords "docs" "help") (:url . "https://github.com/davep/cheat-sh.el"))]) (chatwork . [(20170510 2142) nil "ChatWork client for Emacs" single ((:commit . "fea231d479f06bf40dbfcf45de143eecc9ed744c") (:keywords "web") (:url . "https://github.com/ataka/chatwork"))]) (charmap . [(20160309 146) nil "Unicode table for Emacs" single ((:commit . "bd4b3e466d7a9433cf35167e3a68ec74fe631bb2") (:keywords "unicode" "character" "ucs") (:url . "https://github.com/lateau/charmap"))]) (char-menu . [(20171231 2218) ((emacs (24 3)) (avy-menu (0 1))) "Create your own menu for fast insertion of arbitrary symbols" single ((:commit . "82f0422179737bcb9f93481aebaf1071d54fc859") (:keywords "convenience" "editing") (:url . "https://github.com/mrkkrp/char-menu"))]) (chapel-mode . [(20160504 108) nil "a CC Mode for Chapel derived from derived-mode-ex.el" single ((:commit . "6e095edd7639f5f0a81e14d6412410b49466697e") (:keywords "chapel" "languages" "oop"))]) (change-inner . [(20150707 844) ((expand-region (0 7))) "Change contents based on semantic units" single ((:commit . "52c543a4b9808c0d15b565fcdf646c9779de33e8") (:keywords "convenience" "extensions"))]) (challenger-deep-theme . [(20180525 918) ((emacs (24))) "challenger-deep Theme" single ((:commit . "62d05f01c3dc4653f46527448b3b2058daba86c0") (:url . "https://github.com/challenger-deep-theme/emacs"))]) (cg . [(20171123 301) nil "major mode for editing Constraint Grammar files" single ((:commit . "e19f3bf60b9c8dbcff053b008fa3ace17fc073fe") (:keywords "languages") (:url . "https://visl.sdu.dk/constraint_grammar.html"))]) (cftag-mode . [(20170811 2240) ((emacs (25))) "Emacs mode for editing tag-based CFML files" single ((:commit . "86e77dcbb583191a3e755bdc29534f33d82bfc56") (:url . "https://github.com/am2605/cftag-mode"))]) (cframe . [(20170917 1509) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "customize a frame and fast switch size and positions" single ((:commit . "bb99672502046e87c8f029ce98c637f762a4fc54") (:keywords "frame" "customize") (:url . "https://github.com/plandes/cframe"))]) (cfml-mode . [(20170903 1949) ((emacs (25)) (mmm-mode (0 5 4)) (cftag-mode (1 0 0))) "Emacs mode for editing CFML files" single ((:commit . "86e77dcbb583191a3e755bdc29534f33d82bfc56") (:url . "https://github.com/am2605/cfml-mode"))]) (cff . [(20160118 1218) ((cl-lib (0 5)) (emacs (24))) "Search of the C/C++ file header by the source and vice versa" single ((:commit . "b6ab2a28e64ef06f281ec74cfe3114e450644dfa") (:keywords "find-file") (:url . "https://github.com/fourier/cff"))]) (cfengine-code-style . [(20171115 1308) nil "C code style for CFEngine project." single ((:commit . "b69762797c89f0d6aea6b85c9340a6bcc791fff0") (:url . "https://github.com/cfengine/core"))]) (ceylon-mode . [(20180606 624) ((emacs (25))) "Major mode for editing Ceylon source code" single ((:commit . "948515672bc596dc118e8e3ede3ede5ec6a3c95a") (:keywords "languages" "ceylon") (:url . "https://github.com/lucaswerkmeister/ceylon-mode"))]) (cerbere . [(20140418 715) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar ((:commit . "dd2105c372b469954e665a5aa0c3766b4922ce6a") (:keywords "python" "go" "php" "tests" "tdd") (:url . "https://github.com/nlamirault/cerbere"))]) (centimacro . [(20140306 627) nil "Assign multiple macros as global key bindings" single ((:commit . "1b97a9b558ed9c49d5da1bfbf29b2506575c2742") (:keywords "macros") (:url . "https://github.com/abo-abo/centimacro"))]) (centered-window . [(20171127 149) ((emacs (24 4))) "Center the text when there's only one window" single ((:commit . "24f7c5be9def20879f46659082d497e67b55d7af") (:keywords "faces" "windows") (:url . "https://github.com/anler/centered-window-mode"))]) (centered-cursor-mode . [(20180112 755) nil "cursor stays vertically centered" single ((:commit . "00fb47d227f9e211ec1c58161a501a1550c3a60d") (:keywords "convenience") (:url . "https://github.com/andre-r/centered-cursor-mode.el"))]) (celestial-mode-line . [(20180518 122) ((emacs (24))) "Show lunar phase and sunrise/-set time in modeline" single ((:commit . "3f5794aca99b977f1592cf1ab4516ae7922196a1") (:keywords "extensions") (:url . "https://github.com/ecraven/celestial-mode-line"))]) (celery . [(20170225 124) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single ((:commit . "51197d74f5eaa8ae09144af7663a2f4277f07d16") (:keywords "celery" "convenience") (:url . "https://github.com/ardumont/emacs-celery"))]) (cedit . [(20141231 814) nil "paredit-like commands for c-like languages" single ((:commit . "0878d851b6307c162bfbddd2bb02789e5e27bc2c") (:url . "http://hins11.yu-yake.com/"))]) (cdnjs . [(20161031 822) ((dash (2 13 0)) (deferred (0 4)) (f (0 17 2)) (pkg-info (0 5))) "A front end for http://cdnjs.com" single ((:commit . "ce19880d3ec3d81e6c665d0b1dfea99cc7a3f908") (:keywords "tools") (:url . "https://github.com/yasuyk/cdnjs.el"))]) (cdlatex . [(20140707 426) nil "Fast input methods for LaTeX environments and math" single ((:commit . "ff534912b93fc2c7a6b191b1c8d6d699a46bbb01") (:keywords "tex"))]) (cdb . [(20151205 543) nil "constant database (cdb) reader for Emacs Lisp" single ((:commit . "b05c610e27b86e71fb4e8d67292ef6a696dd5992") (:keywords "cdb"))]) (cd-compile . [(20141108 1157) nil "run compile in a specific directory" single ((:commit . "10284ccae86afda4a37b09ba90acd1e2efedec9f"))]) (ccls . [(20180708 2207) ((emacs (25 1)) (lsp-mode (3 4)) (dash (0 13))) "ccls client for lsp-mode" tar ((:commit . "4c8f377f7aa957a33a0097dc212e765246f799db") (:keywords "languages" "lsp" "c++") (:url . "https://github.com/MaskRay/emacs-ccls"))]) (ccc . [(20151205 543) nil "buffer local cursor color control library" single ((:commit . "b05c610e27b86e71fb4e8d67292ef6a696dd5992") (:keywords "cursor") (:url . "https://github.com/skk-dev/ddskk/blob/master/READMEs/README.ccc.org"))]) (cbm . [(20171116 440) ((cl-lib (0 5))) "Switch to similar buffers." single ((:commit . "5b41c936ba9f6d170309a85ffebc9939c1050b31") (:keywords "buffers") (:url . "http://github.com/akermu/cbm.el"))]) (catmacs . [(20170826 457) ((emacs (24))) "Simple CAT interface for Yaesu Transceivers." single ((:commit . "65d3e0563abe6ff9577202cf2278074d4130fbdd") (:keywords "comm" "hardware") (:url . "https://bitbucket.org/pymaximus/catmacs"))]) (caskxy . [(20140513 839) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single ((:commit . "dc18dcab7ed526070ab76de071c9c5272e6ac40e") (:keywords "convenience") (:url . "https://github.com/aki2o/caskxy"))]) (cask-package-toolset . [(20170921 1556) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar ((:commit . "2c74cd827e88c7f8360581a841e45f0b794510e7") (:keywords "convenience" "tools") (:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el"))]) (cask-mode . [(20160410 749) ((emacs (24 3))) "major mode for editing Cask files" single ((:commit . "7c6719d3bb4fe552958634bd5a11abc56681f3a7"))]) (cask . [(20180626 1249) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (1 2))) "Cask: Project management for Emacs package development" tar ((:commit . "d731e96f40c34a0fd85db04977c9756d60bd221f") (:keywords "speed" "convenience") (:url . "http://github.com/cask/cask"))]) (caseformat . [(20160115 815) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (s (1 10 0))) "Format based letter case converter" single ((:commit . "92a31f6a7cae0b4e2af106cd6f2b0abe6c2d8921") (:keywords "convenience") (:url . "https://github.com/HKey/caseformat"))]) (caroline-theme . [(20160317 2220) ((emacs (24))) "A trip down to New Orleans..." single ((:commit . "222fd483db304509f9e422dc82883d808e023ceb") (:url . "https://github.com/xjackk/carolines-theme"))]) (cargo . [(20180521 408) ((emacs (24 3)) (rust-mode (0 2 0)) (markdown-mode (2 4))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar ((:commit . "10093586bdac7252e65e11851f26da8ba4720608") (:keywords "tools"))]) (carbon-now-sh . [(20180331 1035) ((emacs (24 4)) (dash (2 12 0))) "https://carbon.now.sh integration." single ((:commit . "71dee6bc4f2a2cb02b9b7b5e643c4c92b880e6a4") (:keywords "convenience") (:url . "https://github.com/veelenga/carbon-now-sh.el"))]) (capture . [(20130828 944) nil "screencasting with \"avconv\" or \"ffmpeg\"" tar ((:commit . "1bb26060311da76767f70096218313fc93b0c806"))]) (caml . [(20171209 1232) nil "OCaml code editing commands for Emacs" tar ((:commit . "cc2b15ee3f32d13031c980c302a55cf4d7a6875c") (:keywords "ocaml") (:url . "https://github.com/ocaml/ocaml/"))]) (camcorder . [(20160404 2134) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single ((:commit . "b13d939990e6709492efefc0945798adc1c0fcb9") (:keywords "multimedia" "screencast") (:url . "http://github.com/Bruce-Connor/camcorder.el"))]) (calmer-forest-theme . [(20130925 2210) nil "Darkish theme with green/orange tint" single ((:commit . "87ba7bae389084d13fe3bc34e0c923017eda6ba0") (:url . "https://github.com/caldwell/calmer-forest-theme"))]) (call-graph . [(20180509 635) ((emacs (25 1)) (cl-lib (0 6 1)) (hierarchy (0 7 0)) (tree-mode (1 0 0)) (ivy (0 10 0))) "Library to generate call graph for c/c++ functions" single ((:commit . "7e51c1eea59b13e6c1c099680492ebcd58893399") (:keywords "programming" "convenience") (:url . "https://github.com/beacoder/call-graph"))]) (calfw-org . [(20160302 1858) nil "calendar view for org-agenda" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar" "org"))]) (calfw-ical . [(20150703 119) nil "calendar view for ical format" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar"))]) (calfw-howm . [(20170703 1704) nil "calendar view for howm" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar"))]) (calfw-gcal . [(20120111 200) nil "edit Google calendar for calfw.el." tar ((:commit . "14aab20687d6cc9e6c5ddb9e11984c4e14c3d870") (:keywords "convenience" "calendar" "calfw.el") (:url . "https://github.com/myuhe/calfw-gcal.el"))]) (calfw-cal . [(20170320 506) nil "calendar view for emacs diary" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar"))]) (calfw . [(20180117 1645) nil "Calendar view framework on Emacs" single ((:commit . "03abce97620a4a7f7ec5f911e669da9031ab9088") (:keywords "calendar") (:url . "https://github.com/kiwanami/emacs-calfw"))]) (calendar-norway . [(20160827 1316) nil "Norwegian calendar" single ((:commit . "8501b2ee515e995f345365391b03f44c812cabdf") (:keywords "calendar" "norwegian" "localization"))]) (cal-china-x . [(20180211 1101) ((cl-lib (0 5))) "Chinese localization, lunar/horoscope/zodiac info and more..." tar ((:commit . "e9b309065829af3a9a0c526509bd64d9228fdced") (:url . "https://github.com/xwl/cal-china-x"))]) (cakecrumbs . [(20180222 1845) ((emacs (24 4))) "Show parents on header for HTML/Jade/Sass/Stylus" single ((:commit . "76cfbfacfaa9d2128fc9218338a0ba2bb47349ab") (:keywords "languages" "html" "jade" "pug" "sass" "scss" "stylus") (:url . "https://github.com/kuanyui/cakecrumbs.el"))]) (cake-inflector . [(20140415 158) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single ((:commit . "a1d338ec4840b1b1bc14f7f9298c07e2c1d2d8fc") (:url . "https://github.com/k1LoW/emacs-cake-inflector"))]) (cacoo . [(20120319 1659) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar ((:commit . "c9fa04fbe97639b24698709530361c2bb5f3273c"))]) (cache . [(20111019 1600) nil "implementation of a hash table whose key-value pairs expire" single ((:commit . "7499586b6c8224df9f5c5bc4dec96b008258d580"))]) (cabledolphin . [(20160204 138) ((emacs (24 4)) (seq (1 0))) "capture Emacs network traffic" single ((:commit . "fffc192cafa61558e924323d6da8166fe5f2a6f9") (:keywords "comm"))]) (c0-mode . [(20151110 1052) nil "Major mode for editing C0 files" tar ((:commit . "c214093c36864d6208fcb9e6a72413ed17ed5d60") (:keywords "c0" "languages") (:url . "http://c0.typesafety.net/"))]) (c-eldoc . [(20170917 1502) nil "helpful description of the arguments to C functions" single ((:commit . "79d09769362228058246f5e6fa183d121f7fb322") (:url . "http://github.com/nflath/c-eldoc"))]) (c-c-combo . [(20151223 1855) nil "Make stuff happen when you reach a target wpm" tar ((:commit . "a261a833499a7fdc29610863b3aafc74818770ba") (:url . "https://www.github.com/CestDiego/c-c-combo.el"))]) (button-lock . [(20150223 554) nil "Clickable text defined by regular expression" single ((:commit . "f9082feb329432fcf2ac49a95e64bed9fda24d58") (:keywords "mouse" "button" "hypermedia" "extensions") (:url . "http://github.com/rolandwalker/button-lock"))]) (buttercup . [(20180629 523) nil "Behavior-Driven Emacs Lisp Testing" tar ((:commit . "39d625ce53bb1e1b9b03d9c9c70aa81e94fcc66a"))]) (butler . [(20150811 1708) ((deferred (0 3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar ((:commit . "8ceb35737107572455cca9a61ff46b3ff78f1016"))]) (busybee-theme . [(20170719 228) nil "port of vim's mustang theme" single ((:commit . "66b2315b030582d0ebee605cf455d386d8c30fcd") (:url . "http://github.com/mswift42/busybee-theme"))]) (buster-snippets . [(20151125 210) ((yasnippet (0 8 0))) "Yasnippets for the Buster javascript testing framework" tar ((:commit . "bb8769dae132659858e74d52f3f4e8790399423a") (:keywords "snippets"))]) (buster-mode . [(20140928 513) nil "Minor mode to speed up development when writing tests with Buster.js" single ((:commit . "de6958ef8369400922618b8d1e99abfa91b97ac5") (:keywords "buster" "testing" "javascript"))]) (bury-successful-compilation . [(20150328 1728) nil "Bury the *compilation* buffer after successful compilation" single ((:commit . "52da2c07419beceab9b4d426d76adb3dcf2548d1") (:keywords "compilation"))]) (bundler . [(20160815 215) ((inf-ruby (2 1)) (cl-lib (0 5))) "Interact with Bundler from Emacs" single ((:commit . "f981f67c33b42243e57a78c358dffff70022b56b") (:keywords "bundler" "ruby") (:url . "http://github.com/endofunky/bundler.el"))]) (build-status . [(20171111 1147) ((cl-lib (0 5))) "Mode line build status indicator" single ((:commit . "ef44185d9dd748ea578d68398f3f729a8adb45b5") (:keywords "mode-line" "ci" "circleci" "travis-ci") (:url . "http://github.com/sshaw/build-status"))]) (build-helper . [(20161009 1055) ((projectile (0 9 0))) "Utilities to help build code" single ((:commit . "7a6fe71125a26ed1c492dab77cc688a7fe1d68ac") (:keywords "convenience") (:url . "http://github.com/afonso360/build-helper"))]) (bui . [(20171215 930) ((emacs (24 3)) (dash (2 11 0))) "Buffer interface library" tar ((:commit . "af1a237b4d1ed31780dd37bcbef51fc8ca9b0603") (:keywords "tools") (:url . "https://github.com/alezost/bui.el"))]) (bug-reference-github . [(20180128 514) nil "Set `bug-reference-url-format' in Github repos" tar ((:commit . "f570a0532bfb44f095b42cf68ab1f69799101137") (:keywords "programming" "tools") (:url . "https://github.com/arnested/bug-reference-github"))]) (bufshow . [(20130726 1138) ((emacs (24 1))) "A simple presentation tool for Emacs." single ((:commit . "d60a554e7239e6f7520d9c3436d5ecdbc9cf6957") (:url . "https://github.com/pjones/bufshow"))]) (buffer-watcher . [(20170913 139) ((f (0 16 2)) (cl-lib (0 5))) "Easily run shell scripts per filetype/directory when a buffer is saved" single ((:commit . "b32c67c8a5d724257d759f4c903d0dedc32246ef"))]) (buffer-utils . [(20140512 700) nil "Buffer-manipulation utility functions" single ((:commit . "685b13457e3a2085b7584e41365d2aa0779a1b6f") (:keywords "extensions") (:url . "http://github.com/rolandwalker/buffer-utils"))]) (buffer-sets . [(20170717 2040) ((cl-lib (0 5))) "Sets of Buffers for Buffer Management" single ((:commit . "4a4ccb0d6916c3e9fba737bb7b48e8aac921954e") (:keywords "buffer-management") (:url . "http://github.com/swflint/buffer-sets"))]) (buffer-move . [(20160615 1103) nil "easily swap buffers" single ((:commit . "cb517ecf8409b5fdcda472d7190c6021f0c49751") (:keywords "lisp" "convenience") (:url . "https://github.com/lukhas/buffer-move"))]) (buffer-manage . [(20180528 913) ((emacs (25)) (choice-program (0 3)) (dash (2 13 0))) "manage buffers" tar ((:commit . "8bbe342a4dafcfdaf305baea98bd4208036ab89a") (:keywords "interactive" "buffer" "management") (:url . "https://github.com/plandes/buffer-manage"))]) (buffer-flip . [(20180307 1451) nil "Cycle through buffers like Alt-Tab in Windows" single ((:commit . "e093360e05164c78255866c1ac8f966aa38ba514") (:keywords "convenience") (:url . "https://github.com/killdash9/buffer-flip.el"))]) (buffer-buttons . [(20150106 639) nil "Define, save, and load code-safe buttons in files for emacs" single ((:commit . "2feb8494fa7863b98256bc85da670d74a3a8a975") (:url . "https://github.com/rpav/buffer-buttons"))]) (buckwalter . [(20180107 843) nil "Write arabic using Buckwalter transliteration" single ((:commit . "2aa5451c3682c268adebc6b1191a796466732f53") (:keywords "arabic" "transliteration" "i18n") (:url . "https://github.com/joehakimrahme/buckwalter-arabic"))]) (bubbleberry-theme . [(20141017 244) ((emacs (24 1))) "A theme based on LightTable for Emacs24" single ((:commit . "22e9adf4586414024e4592972022ec297321b320") (:url . "https://github.com/jasonm23/emacs-bubbleberry-theme"))]) (bts-github . [(20170401 549) ((bts (0 0 1)) (gh (0 8 2))) "A plugin of bts.el for GitHub" single ((:commit . "ef2cf9202dc2128e5efdb613bfde9276a8cd95ad") (:keywords "convenience" "git" "github") (:url . "https://github.com/aki2o/emacs-bts-github"))]) (bts . [(20151109 533) ((widget-mvc (0 0 2)) (log4e (0 3 0)) (yaxception (0 3 3)) (dash (2 9 0)) (s (1 9 0)) (pos-tip (0 4 5))) "A unified UI for various bug tracking systems" single ((:commit . "df42d58a36447697f93b56e69f5e700b2baef1f9") (:keywords "convenience") (:url . "https://github.com/aki2o/emacs-bts"))]) (btc-ticker . [(20151113 659) ((json (1 2)) (request (0 2 0))) "Shows latest bitcoin price" single ((:commit . "845235b545f070d0812cd1654cbaa4997565824f") (:keywords "news"))]) (bshell . [(20170903 1137) ((emacs (25)) (buffer-manage (0 5))) "manage and track multiple inferior shells" single ((:commit . "884a8b906617d305e9d5d2c3750618d2f86f9aed") (:keywords "interactive" "shell" "management") (:url . "https://github.com/plandes/bshell"))]) (browse-url-dwim . [(20140731 1222) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single ((:commit . "3d611dbb167c286109ac53995ad68286d87aafb9") (:keywords "hypermedia") (:url . "http://github.com/rolandwalker/browse-url-dwim"))]) (browse-kill-ring . [(20171219 1108) nil "interactively insert items from kill-ring" single ((:commit . "8debc43e41d7e51532698331c6f283905890b904") (:keywords "convenience") (:url . "https://github.com/browse-kill-ring/browse-kill-ring"))]) (browse-at-remote . [(20180621 2331) ((f (0 17 2)) (s (1 9 0)) (cl-lib (0 5))) "Open github/gitlab/bitbucket/stash page from Emacs" single ((:commit . "99af94ada33badd3e1eceb704e07f62c1eef513a") (:keywords "github" "gitlab" "bitbucket" "convenience"))]) (broadcast . [(20151204 1812) ((emacs (24 4))) "Links buffers together for simultaneous editing." single ((:commit . "f6f9cd2e0e3f8c31d6b8e7446c27eb0e50b25f16") (:keywords "convenience" "frames" "link" "cursors") (:url . "https://github.com/killdash9/broadcast.el"))]) (brainfuck-mode . [(20150113 42) ((langdoc (20130601 1450))) "Brainfuck mode for Emacs" single ((:commit . "36e69552bb3b97a4f888d362c59845651bd0d492") (:keywords "brainfuck" "langdoc") (:url . "https://github.com/tom-tan/brainfuck-mode/"))]) (bracketed-paste . [(20160407 1648) ((emacs (24 3))) "bracketed paste mode support within emacs -nw" single ((:commit . "843ce3bbb63d560face889e13a57a2f7543957d5") (:keywords "terminals"))]) (bpr . [(20180220 1044) ((emacs (24))) "Background Process Runner" tar ((:commit . "af84a83dea09d86e77d87ac30604f2c5b4bf4117") (:keywords "background" "async" "process" "management") (:url . "https://github.com/ilya-babanov/emacs-bpr"))]) (bpe . [(20141228 1405) ((emacs (24 1))) "Blog from Org mode to Blogger" single ((:commit . "7b5b25f83506e6c9f4075d3803fa32404943a189") (:keywords "blogger" "blog") (:url . "https://github.com/yuutayamada/bpe"))]) (boxquote . [(20170802 417) ((cl-lib (0 5))) "Quote text with a semi-box." single ((:commit . "7e47e0e2853bc1215739b2e28f260e9eed93b2c5") (:keywords "quoting") (:url . "https://github.com/davep/boxquote.el"))]) (boron-theme . [(20170808 608) ((emacs (24 0))) "an Emacs 24 theme based on Boron (tmTheme)" single ((:commit . "87ae1a765e07429fec25d2f29b004f84b52d2e0a") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (borland-blue-theme . [(20160117 521) ((emacs (24 1))) "Blue/yellow theme based on old DOS Borland/Turbo C IDE" single ((:commit . "db74eefebbc89d3c62575f8f50b319e87b4a3470") (:keywords "themes") (:url . "http://github.com/fourier/borland-blue-theme"))]) (borg . [(20180702 1353) ((emacs (26)) (dash (2 13)) (epkg (3 0)) (magit (2 11))) "assimilate Emacs packages as Git submodules" tar ((:commit . "738f749a9eeb9abecad17d38ce9a3e45c040cede") (:keywords "tools") (:url . "https://github.com/emacscollective/borg"))]) (boon . [(20180319 526) ((emacs (25 1)) (expand-region (0 10 0)) (dash (2 12 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar ((:commit . "b4cf42bbc531032404da88e8671c7495f0f7a5b0"))]) (bool-flip . [(20161215 739) ((emacs (24 3))) "flip the boolean under the point" single ((:commit . "f58a9a7b9ab875bcfbd57c8262697ae404eb4485") (:keywords "boolean" "convenience" "usability") (:url . "http://github.com/michaeljb/bool-flip/"))]) (boogie-friends . [(20171024 1955) ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (yasnippet (0 9 0 1)) (company (0 8 12))) "A collection of programming modes for Boogie, Dafny, and Z3 (SMTLIB v2)." tar ((:commit . "ff9903783013f3598b6f44c99d47b25c5cdbed00"))]) (bonjourmadame . [(20170919 434) nil "Say \"Hello ma'am!\"" single ((:commit . "d3df185fce78aefa689fded8e56a654f0fde4ac0"))]) (bongo . [(20171118 1842) ((cl-lib (0 5)) (emacs (24 1))) "play music with Emacs" tar ((:commit . "3d246be1e8d14865f5253567ab8fee5d4e9c470c"))]) (bolt-mode . [(20180310 10) ((emacs (24 3))) "Editing support for Bolt language" single ((:commit . "85a5a752bfbebb4aed884326c25db64c000e9934") (:keywords "languages") (:url . "https://github.com/mpontus/bolt-mode"))]) (bog . [(20180113 759) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single ((:commit . "6ed4d3edbe771e586d873b826330f3ef23aa1611") (:keywords "bib" "outlines") (:url . "https://github.com/kyleam/bog"))]) (bnfc . [(20160605 1227) ((emacs (24 3))) "Define context-free grammars for the BNFC tool" single ((:commit . "1b58df1dd0cb9b81900632fb2843a03b94f56fdb") (:keywords "languages" "tools") (:url . "https://github.com/jmitchell/bnfc-mode"))]) (bmx-mode . [(20180324 857) ((emacs (25 1)) (cl-lib (0 5)) (company (0 9 4)) (dash (2 13 0)) (s (1 12 0))) "Batch Mode eXtras" single ((:commit . "7450c29f5c1f5f67b02bca1c89f06cdf01855f41") (:keywords "c" "convenience" "tools") (:url . "http://github.com/josteink/bmx-mode"))]) (bm . [(20180703 343) nil "Visible bookmarks in buffer." tar ((:commit . "d224b6cd8341db4c2e11263c346dd44fb37fcd88") (:keywords "bookmark" "highlight" "faces" "persistent") (:url . "https://github.com/joodland/bm"))]) (blog-minimal . [(20170311 555) ((ht (1 5)) (simple-httpd (1 4 6)) (mustache (0 22)) (s (1 11 0)) (org (9 0 3))) "a very simple static site generator based on org mode" tar ((:commit . "d679d74039ecc114b037800c8a94303265b9542a") (:keywords "blog" "org") (:url . "https://github.com/thiefuniverse/blog-minimal"))]) (blog-admin . [(20170923 709) ((ctable (0 1 1)) (s (1 10 0)) (f (0 17 3)) (names (20151201 0)) (cl-lib (0 5))) "Blog admin for emacs with hexo/org-page supported" tar ((:commit . "b5f2e1dad7d68ec903619f7280bb0bcb7e398a1e") (:keywords "tools" "blog" "org" "hexo" "org-page"))]) (blockdiag-mode . [(20160426 2224) ((emacs (24 3))) "Major mode for editing blockdiag files" single ((:commit . "f3b21ba433d60327cebd103ae4492200750e24a9") (:url . "https://github.com/xcezx/xdiag-mode"))]) (bln-mode . [(20170112 527) nil "binary line navigation minor mode for cursor movement in long lines" single ((:commit . "6c20b3269e88952c19ca9ad151221c7e2e27b465") (:keywords "motion" "location" "cursor" "convenience") (:url . "https://github.com/mgrachten/bln-mode"))]) (bliss-theme . [(20170808 607) ((emacs (24 0))) "an Emacs 24 theme based on Bliss (tmTheme)" single ((:commit . "c3cf6d8a666ab26909b7da158f9e94df71a5fbbf") (:url . "https://github.com/emacsfodder/tmtheme-to-deftheme"))]) (blgrep . [(20150401 716) ((clmemo (20140321 715))) "Block grep" tar ((:commit . "605beda210610a5829750a987f5fcebea97af546") (:keywords "tools" "convenience"))]) (blacken . [(20180615 803) ((emacs (25 2))) "Reformat python buffers using the \"black\" formatter" single ((:commit . "d98199e8ab94550f5036aac2293cfb1f745003fa") (:url . "https://github.com/proofit404/blacken"))]) (blackboard-theme . [(20161215 2256) ((emacs (24))) "TextMate Blackboard Theme" single ((:commit . "d8b984f2541bb86eb4363a2b4c94631e49843d4a") (:url . "https://github.com/don9z/blackboard-theme"))]) (blackboard-bold-mode . [(20160812 1906) ((cl-lib (0 5))) "Easily insert Unicode mathematical double-struck characters" single ((:commit . "5299cb064ba71baa3e331b8560bf8dd38cbbc4ed") (:keywords "unicode" "double struck" "blackboard bold" "math" "mathematical") (:url . "https://github.com/grettke/blackboard-bold-mode"))]) (bitlbee . [(20151202 1600) nil "Help get Bitlbee (http://www.bitlbee.org) up and running." single ((:commit . "3a92a4119e0c007df2c7dcf1b1c3a5f23ee40e05"))]) (bitbucket . [(20170404 2146) ((emacs (24)) (request (0 1 0)) (s (1 9 0))) "Bitbucket API wrapper" tar ((:commit . "5e663da1bd38a14c1ecf4d66a79d4321ac833bcf") (:keywords "bitbucket") (:url . "http://github.com/tjaartvdwalt/bitbucket.el/"))]) (bitbake . [(20180326 58) ((emacs (24 1)) (dash (2 6 0)) (mmm-mode (0 5 4)) (s (1 10 0))) "Running bitbake from emacs" single ((:commit . "e5088c4b3dfb4feb96850fbc281b4207d23c7713") (:keywords "convenience") (:url . "https://github.com/canatella/bitbake-el"))]) (bison-mode . [(20160616 2252) nil "Major mode for editing bison, yacc and lex files." single ((:commit . "314af3b7af7eb897fd3932616cb8600a85228cea") (:keywords "bison-mode" "yacc-mode"))]) (birds-of-paradise-plus-theme . [(20130419 1429) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single ((:commit . "bb9f9d4ef7f7872a388ec4eee1253069adcadb6f") (:keywords "themes") (:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el"))]) (bing-dict . [(20170604 1831) nil "Minimalists' English-Chinese Bing dictionary" single ((:commit . "d4b261739e53e8ed8fa5db3d3946de82c0ab8e34") (:keywords "extensions") (:url . "https://github.com/cute-jumper/bing-dict.el"))]) (bind-map . [(20161207 711) ((emacs (24 3))) "Bind personal keymaps in multiple locations" single ((:commit . "bf4181e3a41463684adfffc6c5c305b30480e30f") (:url . "https://github.com/justbur/emacs-bind-map"))]) (bind-key . [(20180512 2130) nil "A simple way to manage personal keybindings" single ((:commit . "3fb8f39f5901a4c0ef7887283e56e60b541675ea") (:keywords "keys" "keybinding" "config" "dotemacs") (:url . "https://github.com/jwiegley/use-package"))]) (bind-chord . [(20171204 1210) ((bind-key (1 0)) (key-chord (0 6))) "key-chord binding helper for use-package-chords" single ((:commit . "3fb8f39f5901a4c0ef7887283e56e60b541675ea") (:keywords "convenience" "tools" "extensions") (:url . "https://github.com/waymondo/use-package-chords"))]) (binclock . [(20170802 416) ((cl-lib (0 5))) "Display the current time using a binary clock." single ((:commit . "87042230d7f3fe3e9a77fae0dbab7d8f7e7794ad") (:keywords "games" "time" "display") (:url . "https://github.com/davep/binclock.el"))]) (bifocal . [(20171004 1124) ((emacs (24 4))) "Split-screen scrolling for comint-mode buffers" single ((:commit . "a8b222b069a6bd64531b4780905989797bad8abe") (:keywords "frames" "processes" "tools") (:url . "https://github.com/riscy/bifocal-mode"))]) (bicycle . [(20180624 12) ((emacs (25 1))) "cycle outline and code visibility" single ((:commit . "ab48f01ec8a3ebcb2f6cf36ea7f3cb8aef3da263") (:keywords "outlines") (:url . "https://github.com/tarsius/bicycle"))]) (bibtex-utils . [(20170817 1219) nil "Provides utilities for extending BibTeX mode" single ((:commit . "ed5ccce46c2088a28a2f0c49caa679d2f20567f0") (:keywords "bibtex") (:url . "https://github.com/plantarum/bibtex-utils"))]) (bibslurp . [(20151202 1546) ((s (1 6 0)) (dash (1 5 0))) "retrieve BibTeX entries from NASA ADS" single ((:commit . "aeba96368f2a06959e4fe945375ce2a54d34b189") (:keywords "bibliography" "nasa ads") (:url . "https://github.com/mkmcc/bibslurp"))]) (bibretrieve . [(20180617 1108) ((auctex (11 87)) (emacs (24 3))) "Retrieve BibTeX entries from the internet" tar ((:commit . "e8ccdc9b9bfec0c5c658f2e9ac3fb81a137549d7") (:keywords "bibtex" "bibliography" "mathscinet" "arxiv" "zbmath") (:url . "https://github.com/pzorin/bibretrieve"))]) (bibliothek . [(20180429 1515) ((emacs (24 4)) (pdf-tools (0 70)) (a (0 1 0 -3 4))) "Managing a digital library of PDFs" single ((:commit . "05f2655321f020fd4c069d1939f0902eaa837eb4") (:keywords "tools") (:url . "https://cadadr.github.io/elisp/index.html#bibliothek-el"))]) (biblio-core . [(20160901 1115) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" single ((:commit . "a5a68fcf677f286f205f32dc7486f6c9f66aa6af") (:keywords "bib" "tex" "convenience" "hypermedia") (:url . "http://github.com/cpitclaudel/biblio.el"))]) (biblio . [(20161014 1604) ((emacs (24 3)) (biblio-core (0 2))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org" tar ((:commit . "a5a68fcf677f286f205f32dc7486f6c9f66aa6af"))]) (bfbuilder . [(20150924 950) ((cl-lib (0 3))) "A brainfuck development environment with interactive debugger" single ((:commit . "49560bdef131fa5672dab660e0c62376dbdcd906") (:url . "http://hins11.yu-yake.com/"))]) (bf-mode . [(20130403 742) nil "Browse file persistently on dired" single ((:commit . "7cc4d09aed64d9db6be95646f5f5067de68f8895") (:keywords "convenience") (:url . "https://github.com/emacs-jp/bf-mode"))]) (better-shell . [(20180625 616) ((emacs (24 4))) "Better shell management" single ((:commit . "cfcd9d57f87ad68cd72bf4935fd1aaa1d9f059a9") (:keywords "convenience") (:url . "https://github.com/killdash9/better-shell"))]) (better-defaults . [(20170613 2104) nil "Fixing weird quirks and poor defaults" single ((:commit . "ab830cf1a0987f43e419565404a4fa8c0a2f5560") (:keywords "convenience") (:url . "https://github.com/technomancy/better-defaults"))]) (bert . [(20131117 214) nil "BERT serialization library for Emacs" single ((:commit . "a3eec6980a725aa4abd2019e4c00246450260490") (:keywords "comm" "data"))]) (benchstat . [(20171013 2012) nil "proper benchmarking made simple" single ((:commit . "a5b67cf7972ca2bbc9f5bc6a0f521ab02b76d4f0") (:keywords "lisp") (:url . "https://github.com/Quasilyte/benchstat.el"))]) (benchmark-init . [(20150905 238) nil "Benchmarks Emacs require and load calls" tar ((:commit . "7a0f263282bbc86b01b662636306f22813082647") (:keywords "benchmark"))]) (belarus-holidays . [(20180615 611) nil "Belarus holidays whith transfers" single ((:commit . "410a7dcf46fdcbee762a0c0aa0c7af03230b9656") (:url . "http://bitbucket.org/EugeneMakei/belarus-holidays.el"))]) (beginend . [(20171003 548) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single ((:commit . "2762796b54c7fd8613b02c041b2b9afeb13eb9fa") (:url . "https://github.com/DamienCassou/beginend"))]) (beeminder . [(20180413 1229) ((org (7))) "Emacs interface for Beeminder" tar ((:commit . "3fcee7a7003a37171ddb59171c7f4b5dd4b34349") (:keywords "beeminder") (:url . "http://www.philnewton.net/code/beeminder-el/"))]) (beacon . [(20180706 1025) ((seq (2 14))) "Highlight the cursor whenever the window scrolls" single ((:commit . "8dfe64496be3cb79d5b83891f95b70b1b699470b") (:keywords "convenience") (:url . "https://github.com/Malabarba/beacon"))]) (bdo . [(20140126 101) nil "Do things to a browser page from Emacs. BETA!" tar ((:commit . "c96cb6aa9e97fa3491185c50dee0f77a13241010") (:keywords "development"))]) (bbyac . [(20180206 641) ((browse-kill-ring (1 3)) (cl-lib (0 5))) "Type a little Bit, and Bang! You Are Completed." tar ((:commit . "9f0de9cad13801891ffb590dc09f51ff9a7cb225") (:keywords "abbrev") (:url . "https://github.com/baohaojun/bbyac"))]) (bbdb2erc . [(20170221 554) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ((:commit . "15db2bd29df0f6ee32c499fdeffb960b6a7f97a0") (:keywords "irc" "contacts" "chat" "client" "internet"))]) (bbdb-vcard . [(20150713 1350) ((bbdb (3 0))) "vCard import/export for BBDB" tar ((:commit . "c3aafd4160854a38fd92afcdade32b9a13abe82c") (:keywords "data" "calendar" "mail" "news") (:url . "http://github.com/vgeddes/bbdb-vcard"))]) (bbdb-ext . [(20151220 1213) ((bbdb (2 36))) "Extra commands for BBDB" single ((:commit . "fee97b1b3faa83edaea00fbc5ad3cbca5e791a55") (:keywords "extensions") (:url . "https://github.com/vapniks/bbdb-ext"))]) (bbdb-csv-import . [(20180121 1649) ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) "import csv to bbdb version 3+" single ((:commit . "dbc2e0fe9e8ae65e494011044d905ae79b3cee3e") (:keywords "csv" "util" "bbdb") (:url . "https://gitlab.com/iankelling/bbdb-csv-import"))]) (bbdb . [(20180502 2038) nil "The Insidious Big Brother Database for GNU Emacs" tar ((:commit . "2da950300bb22fa713cede74b71041df315ecc2e"))]) (bbdb- . [(20140221 1554) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single ((:commit . "2839e84c894de2513af41053e80a277a1b483d22") (:keywords "bbdb" "news" "mail") (:url . "https://github.com/aki2o/bbdb-"))]) (bbcode-mode . [(20180505 227) ((cl-lib (0 5))) "Major mode for phpBB posts (BBCode markup)" single ((:commit . "ee30d43f9029e0919a06be0dde0ed16f201647c1") (:keywords "bbcode" "languages") (:url . "https://github.com/lassik/bbcode-mode"))]) (bazel-mode . [(20180222 2253) ((emacs (24 3))) "A major mode for editing Bazel files" single ((:commit . "b7aa14516feaed40ee4910eafa81db719de0fe56") (:keywords "languages" "bazel") (:url . "https://github.com/codesuki/bazel-mode"))]) (bats-mode . [(20160513 2315) nil "Emacs mode for editing and running Bats tests" single ((:commit . "d519f7c89f5ae17dfc33400596df4564b478315f") (:keywords "bats" "tests") (:url . "https://github.com/dougm/bats-mode"))]) (basic-theme . [(20160817 127) ((emacs (24))) "Minimalistic light color theme" single ((:commit . "e2a855bd39f4b78296228d4b790f9123156f7d7e") (:keywords "theme" "basic" "minimal" "colors") (:url . "http://github.com/fgeller/basic-theme.el"))]) (basic-mode . [(20180612 1152) ((seq (2 20)) (emacs (24 3))) "major mode for editing BASIC code" single ((:commit . "024505ae0a37756e3259773383852ed208120bde") (:keywords "basic" "languages") (:url . "https://github.com/dykstrom/basic-mode"))]) (basic-c-compile . [(20170302 312) ((cl-lib (0 5)) (f (0 19 0))) "Quickly create a Makefile, compile and run C." single ((:commit . "0129786aeee50d7bb0020d9fc2b7508875d403e8") (:keywords "c" "makefile" "compilation" "convenience") (:url . "https://github.com/nick96/basic-c-compile"))]) (bash-completion . [(20180519 920) nil "BASH completion for the shell buffer" single ((:commit . "fbdc78b8770833752ac4bda28e2c3ea764bf8e76"))]) (base16-theme . [(20180524 1311) nil "Collection of themes built on combinations of 16 base colors" tar ((:commit . "c9acfddcc0a3a3753223d4e8742de6af284154cc") (:url . "https://github.com/belak/base16-emacs"))]) (bart-mode . [(20180131 1829) ((emacs (24 3))) "Real time BART departures info." single ((:commit . "6feeb8f9badbc2ce4b60499bf7bf4acdae4cfed7") (:keywords "convenience" "transit") (:url . "https://github.com/mschuldt/bart-mode"))]) (bar-cursor . [(20180226 1645) nil "package used to switch block cursor to a bar" single ((:commit . "20cb59bedc3532a712fe7feeff3660ebd72a8107") (:keywords "files") (:url . "https://github.com/ajsquared/bar-cursor"))]) (banner-comment . [(20180510 620) ((emacs (24 4))) "For producing banner comments." single ((:commit . "fedbb071d043106a30e378ee58b96e349e8068ed") (:keywords "convenience") (:url . "https://github.com/WJCFerguson/banner-comment"))]) (badwolf-theme . [(20161004 15) ((emacs (24))) "Bad Wolf color theme" single ((:commit . "ea01a3d9358e968f75e3ed15dec6a2a96ce3d9a1") (:keywords "themes") (:url . "https://github.com/bkruczyk/badwolf-emacs"))]) (badger-theme . [(20140716 1932) nil "A dark theme for Emacs 24." single ((:commit . "493d672d5a5478976da7d5ca752008cc7837c57f") (:url . "https://github.com/ccann/badger-theme"))]) (backward-forward . [(20161228 2150) ((emacs (24 5))) "navigation backwards and forwards across marks" single ((:commit . "58489957a62a0da25dfb5df902624d2548d800b4") (:keywords "navigation" "convenience" "backward" "forward") (:url . "https://gitlab.com/vancan1ty/emacs-backward-forward/tree/master"))]) (backup-walker . [(20130720 816) nil "quickly traverse all backups of a file" single ((:commit . "934a4128c122972ac32bb9952addf279a60a94da") (:keywords "backup") (:url . "https://github.com/lewang/backup-walker"))]) (backup-each-save . [(20180226 2157) nil "backup each savepoint of a file" single ((:commit . "3c414b9d6b278911c95c5b8b71819e6af6f8a02a"))]) (backlight . [(20180629 1459) ((emacs (24 3))) "backlight brightness adjustment on GNU/Linux" single ((:commit . "096e632bf100d318754d6c961c90ebb0ef29dce5") (:keywords "hardware") (:url . "https://github.com/mschuldt/backlight.el"))]) (back-button . [(20150804 1304) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single ((:commit . "98d92984a740acd1547bd7ed05cca0affdb21c3e") (:keywords "convenience" "navigation" "interface") (:url . "http://github.com/rolandwalker/back-button"))]) (babel-repl . [(20160504 1501) ((emacs (24))) "Run babel REPL" single ((:commit . "e619c16e349a1ee7bd0ee0d7f3650d33bff73fc3") (:keywords "babel" "javascript" "es6") (:url . "https://github.com/hung-phan/babel-repl/"))]) (babel . [(20161122 2340) nil "interface to web translation services such as Babelfish" single ((:commit . "d4212e25fcbd22b8e38be13936f937a2963d34a9") (:keywords "translation" "web") (:url . "http://github.com/juergenhoetzel/babel"))]) (axiom-environment . [(20180401 1257) ((emacs (24 2))) "An environment for using Axiom/OpenAxiom/FriCAS" tar ((:commit . "6842fb7f85df839acde395093647e2f91cf62fdd") (:keywords "axiom" "openaxiom" "fricas"))]) (aws-snippets . [(20180410 845) ((yasnippet (0 8 0))) "Yasnippets for AWS" tar ((:commit . "a2ebae582a8c8a5f5f16dbc42ecd2ded9d70fca8") (:keywords "snippets"))]) (aws-ec2 . [(20161007 1214) ((emacs (24 4)) (dash (2 12 1)) (tblui (0 1 0))) "Manage AWS EC2 instances" single ((:commit . "5601d4f268fc34b86a02ca90cde7d3771619a368") (:url . "https://github.com/Yuki-Inoue/aws.el"))]) (avy-zap . [(20160921 1444) ((avy (0 2 0))) "Zap to char using `avy'" single ((:commit . "6081738668ab726099ce1c711c580d9745dfaede") (:keywords "extensions") (:url . "https://github.com/cute-jumper/avy-zap"))]) (avy-migemo . [(20180716 755) ((emacs (24 4)) (avy (0 4 0)) (migemo (1 9))) "avy with migemo" tar ((:commit . "922a6dd82c0bfa316b0fbb56a9d4dd4ffa5707e7") (:keywords "avy" "migemo") (:url . "https://github.com/momomo5717/avy-migemo"))]) (avy-menu . [(20171231 2220) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" single ((:commit . "b133564cc438870d9b5505c8104611c8998fd0d5") (:keywords "popup" "menu") (:url . "https://github.com/mrkkrp/avy-menu"))]) (avy-flycheck . [(20160720 800) ((emacs (24 1)) (flycheck (0 14)) (seq (1 11)) (avy (0 4 0))) "Jump to and fix syntax errors using `flycheck' with `avy' interface" single ((:commit . "5522f3bbbed1801d9278ed696ec0cbba38352985") (:keywords "tools" "convenience" "avy" "flycheck") (:url . "https://github.com/magicdirac/avy-flycheck"))]) (avy . [(20180615 801) ((emacs (24 1)) (cl-lib (0 5))) "Jump to arbitrary positions in visible text and select text quickly." single ((:commit . "7c40f5e3811716b05d87a06096b190f7cf7bdc45") (:keywords "point" "location") (:url . "https://github.com/abo-abo/avy"))]) (avk-emacs-themes . [(20180406 2220) nil "Collection of avk themes" tar ((:commit . "6abf91ecdaeb16a3a5529b0d5abef9756da1f68c") (:url . "https://github.com/avkoval/avk-emacs-themes"))]) (avandu . [(20170101 1103) nil "Gateway to Tiny Tiny RSS" tar ((:commit . "f44588d8e747fa880411cb4542cc39962252b90a") (:keywords "net"))]) (autumn-light-theme . [(20150515 747) nil "A light color theme with muted, autumnal colors." single ((:commit . "1e3b2a43a3001e4a97a5ff073ba3f0d2ea3888f9") (:keywords "color" "theme") (:url . "http://github.com/aalpern/emacs-color-theme-autumn-light"))]) (autothemer . [(20170112 1324) ((dash (2 10 0)) (emacs (24)) (cl-lib (0 5))) "Conveniently define themes." single ((:commit . "8c467f57571c154129d660dfccebd151c998f2d9") (:url . "https://github.com/sebastiansturm/autothemer"))]) (autotetris-mode . [(20141114 846) ((cl-lib (0 5))) "automatically play tetris" single ((:commit . "0c3a746dcc304a67d2a6e7ad4ef93f512486343a") (:url . "https://github.com/skeeto/autotetris-mode"))]) (autotest . [(20180323 1542) nil "ZenTest's autotest integration with emacs." single ((:commit . "4ce20cc5b25a1f1b4669ea8ff2880ec764eaf7da") (:keywords "testing" "ruby" "convenience") (:url . "https://github.com/zenspider/elisp/blob/master/autotest.el"))]) (autopair . [(20160304 437) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ((:commit . "2b6d72bccb0ebba6e7e711528872b898b0c65b0a") (:keywords "convenience" "emulations") (:url . "https://github.com/capitaomorte/autopair"))]) (automargin . [(20131112 14) nil "add margins to windows not-splitted, and center them" single ((:commit . "4901d969ad69f5244e6300baab4ba04efed800c3") (:url . "http://hins11.yu-yake.com/"))]) (autodisass-llvm-bitcode . [(20150410 1825) nil "Automatically disassemble LLVM bitcode" tar ((:commit . "d2579e3a1427af2dc947c343e49eb3434078bf04"))]) (autodisass-java-bytecode . [(20151005 912) nil "Automatically disassemble Java bytecode" tar ((:commit . "3d61dbe266133c950b39e880f78d142751c7dc4c"))]) (autobookmarks . [(20180531 1206) ((dash (2 10 0)) (cl-lib (0 5))) "Save recently visited files and buffers" single ((:commit . "e971aa49d97da9f7ed760b37e0b674e45f1c5673") (:keywords "files"))]) (auto-yasnippet . [(20180503 1208) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single ((:commit . "623734aa418b18ff52cb65a0adb9e359aed31615") (:url . "https://github.com/abo-abo/auto-yasnippet"))]) (auto-virtualenvwrapper . [(20180408 310) ((cl-lib (0 6)) (s (1 10 0)) (virtualenvwrapper (0))) "Lightweight auto activate python virtualenvs" single ((:commit . "e2628408d4e67e1b1714cf7682cff9405e735c81") (:keywords "python" "virtualenv" "tools"))]) (auto-virtualenv . [(20170125 1117) ((cl-lib (0 5)) (pyvenv (1 9)) (s (1 10 0))) "Auto activate python virtualenvs" single ((:commit . "3826db66b417788e2b2eb138717255b1f52a55c3") (:keywords "python" "virtualenv" "tools") (:url . "http://github.com/marcwebbie/auto-virtualenv"))]) (auto-sudoedit . [(20180428 2343) ((emacs (24)) (f (0 19 0))) "auto sudo edit by tramp" single ((:commit . "5a770615fe2989b3b7cb1435d0e65fa672d775d7") (:url . "https://github.com/ncaq/auto-sudoedit"))]) (auto-shell-command . [(20160603 1938) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ((:commit . "454b75a07b663095334381d5bf5625c7f136f743") (:keywords "shell" "save" "async" "deferred" "auto"))]) (auto-save-buffers-enhanced . [(20161108 2310) nil "Automatically save buffers in a decent way" single ((:commit . "461e8c816c1b7c650be5f209078b381fe55da8c6"))]) (auto-read-only . [(20170305 2043) ((cl-lib (0 5))) "Automatically make the buffer to read-only" single ((:commit . "79654f8fc024f383ae7af05487c1345738236500") (:keywords "files" "convenience") (:url . "https://github.com/zonuexe/auto-read-only.el"))]) (auto-pause . [(20160426 516) ((emacs (24 4))) "Run processes which will be paused when Emacs is idle" single ((:commit . "a4d778de774ca3895542cb559a953e0d98657338") (:keywords "convenience" "menu") (:url . "https://github.com/lujun9972/auto-pause"))]) (auto-package-update . [(20180712 1345) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single ((:commit . "55870d313fbe9db40b1a2b59dbc420ba66a9297e") (:keywords "package" "update") (:url . "http://github.com/rranelli/auto-package-update.el"))]) (auto-org-md . [(20180213 1543) ((emacs (24 4))) "export a markdown file automatically when you save an org-file" single ((:commit . "9318338bdb7fe8bd698d88f3af89b2d6413efdd2") (:keywords "org" "markdown") (:url . "https://github.com/jamcha-aa/auto-org-md"))]) (auto-minor-mode . [(20180527 423) ((emacs (24 4))) "Enable minor modes by file name and contents" single ((:commit . "c62f4e04c7b73835c399f0348bea0ade2720bcbb") (:keywords "convenience") (:url . "https://github.com/joewreschnig/auto-minor-mode"))]) (auto-indent-mode . [(20171221 2106) nil "Auto indent Minor mode" tar ((:commit . "28069360a7f89ad0286fd6a53db550752ec58488") (:keywords "auto" "indentation") (:url . "https://github.com/mlf176f2/auto-indent-mode.el/"))]) (auto-highlight-symbol . [(20130313 243) nil "Automatic highlighting current symbol minor mode" single ((:commit . "26573de912d760e04321b350897aea70958cee8b") (:keywords "highlight" "face" "match" "convenience") (:url . "http://github.com/gennad/auto-highlight-symbol/raw/master/auto-highlight-symbol.el"))]) (auto-dim-other-buffers . [(20180612 1641) nil "Makes non-current buffers less prominent" single ((:commit . "ec74b4803adeadf06296c84595fb6ccf4e1b4a3f") (:url . "https://github.com/mina86/auto-dim-other-buffers.el"))]) (auto-dictionary . [(20150410 910) nil "automatic dictionary switcher for flyspell" single ((:commit . "b364e08009fe0062cf0927d8a0582fad5a12b8e7") (:keywords "wp") (:url . "http://nschum.de/src/emacs/auto-dictionary/"))]) (auto-complete-sage . [(20160514 51) ((auto-complete (1 5 1)) (sage-shell-mode (0 1 0))) "An auto-complete source for sage-shell-mode." single ((:commit . "51b8e3905196d266e1f8aa47881189833151b398") (:keywords "sage" "math" "auto-complete") (:url . "https://github.com/stakemori/auto-complete-sage"))]) (auto-complete-rst . [(20140225 144) ((auto-complete (1 4))) "Auto-complete extension for ReST and Sphinx" tar ((:commit . "4803ce41a96224e6fa54e6741a5b5f40ebed7351") (:url . "https://github.com/tkf/auto-complete-rst"))]) (auto-complete-pcmp . [(20140226 2251) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single ((:commit . "2595d3dab1ef3549271ca922f212928e9d830eec") (:keywords "completion") (:url . "https://github.com/aki2o/auto-complete-pcmp"))]) (auto-complete-nxml . [(20140220 2058) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ((:commit . "ac7b09a23e45f9bd02affb31847263de4180163a") (:keywords "completion" "html" "xml") (:url . "https://github.com/aki2o/auto-complete-nxml"))]) (auto-complete-exuberant-ctags . [(20140320 24) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single ((:commit . "ff6121ff8b71beb5aa606d28fd389c484ed49765") (:keywords "anto-complete" "exuberant ctags") (:url . "http://code.101000lab.org"))]) (auto-complete-distel . [(20160815 2300) ((auto-complete (1 4)) (distel-completion-lib (1 0 0))) "Erlang/distel completion backend for auto-complete-mode" single ((:commit . "0cf9190b54540c41ee812f5b6d98305fb263d969") (:keywords "erlang" "distel" "auto-complete") (:url . "github.com/sebastiw/distel-completion"))]) (auto-complete-clang-async . [(20130526 814) nil "Auto Completion source for clang for GNU Emacs" single ((:commit . "5d9c5cabbb6b31e0ac3637631c0c8b25184aa8b4") (:keywords "completion" "convenience"))]) (auto-complete-clang . [(20140409 52) ((auto-complete (1 3 1))) "Auto Completion source for clang for GNU Emacs" single ((:commit . "a195db1d0593b4fb97efe50885e12aa6764d998c") (:keywords "completion" "convenience") (:url . "https://github.com/brianjcj/auto-complete-clang"))]) (auto-complete-chunk . [(20140225 146) ((auto-complete (1 4))) "Auto-completion for dot.separated.words." single ((:commit . "a9aa77ffb84a1037984a7ce4dda25074272f13fe") (:url . "https://github.com/tkf/auto-complete-chunk"))]) (auto-complete-c-headers . [(20150911 2023) ((auto-complete (1 4))) "An auto-complete source for C/C++ header files" single ((:commit . "52fef720c6f274ad8de52bef39a343421006c511") (:keywords "c"))]) (auto-complete-auctex . [(20140223 958) ((yasnippet (0 6 1)) (auto-complete (1 4))) "auto-completion for auctex" single ((:commit . "855633f668bcc4b9408396742a7cb84e0c4a2f77"))]) (auto-complete . [(20170124 1845) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar ((:commit . "2e83566ddfa758c69afe50b8a1c62a66f47471e3"))]) (auto-compile . [(20180321 807) ((emacs (24 3)) (packed (2 0 0))) "automatically compile Emacs Lisp libraries" single ((:commit . "6ce4255ab9a0b010ef8414c5bd9a6d6d9eea012f") (:keywords "compile" "convenience" "lisp") (:url . "https://github.com/emacscollective/auto-compile"))]) (auto-auto-indent . [(20131106 1103) ((es-lib (0 1)) (cl-lib (1 0))) "Indents code as you type" single ((:commit . "0139378577f936d34b20276af6f022fb457af490") (:url . "https://github.com/sabof/auto-auto-indent"))]) (auto-async-byte-compile . [(20160915 2154) nil "Automatically byte-compile when saved" single ((:commit . "8681e74ddb8481789c5dbb3cafabb327db4c4484") (:keywords "lisp" "convenience") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/auto-async-byte-compile.el"))]) (auth-source-pass . [(20180529 657) ((emacs (25))) "Integrate auth-source with password-store" single ((:commit . "303b96b2a4ced825390ac0a4f48c4151fe7a8150") (:url . "https://github.com/DamienCassou/auth-password-store"))]) (aurora-config-mode . [(20180216 1502) nil "Major mode for Apache Aurora configuration files" single ((:commit . "8273ec7937a21b469b9dbb6c11714255b890f410") (:keywords "languages" "configuration") (:url . "https://github.com/bdd/aurora-config.el"))]) (aurel . [(20170114 137) ((emacs (24 3)) (bui (1 1 0)) (dash (2 11 0))) "Search, get info, vote for and download AUR packages" single ((:commit . "fc7ad208f43f8525f84a18941c9b55f956df8961") (:keywords "tools") (:url . "https://github.com/alezost/aurel"))]) (audio-notes-mode . [(20170611 1459) nil "Play audio notes synced from somewhere else." single ((:commit . "fa38350829c7e97257efc746a010471d33748a68") (:keywords "hypermedia" "convenience") (:url . "http://github.com/Bruce-Connor/audio-notes-mode"))]) (auctex-lua . [(20151121 810) ((auctex (11 86)) (lua-mode (20130419))) "Lua editing support for AUCTeX" single ((:commit . "799cd8ac10c96991bb63d9aa60528ae5d8c786b5") (:keywords "latex" "lua") (:url . "http://github.com/vermiculus/auctex-lua"))]) (auctex-latexmk . [(20170618 936) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single ((:commit . "4d353522650d7685acbf1d38f7dbc504f734bd84") (:keywords "tex") (:url . "https://github.com/tom-tan/auctex-latexmk/"))]) (attrap . [(20180715 1205) ((dash (2 12 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (s (1 11 0))) "ATtempt To Repair At Point" single ((:commit . "65f6ad55ef967ef625ca48c2d03b4ea69bf37649") (:keywords "programming" "tools") (:url . "https://github.com/jyp/attrap"))]) (atomic-chrome . [(20180617 24) ((emacs (24 3)) (let-alist (1 0 4)) (websocket (1 4))) "Edit Chrome text area with Emacs using Atomic Chrome" single ((:commit . "a505f638866f9e7b913784be0dc84f338e9ad449") (:keywords "chrome" "edit" "textarea") (:url . "https://github.com/alpha22jp/atomic-chrome"))]) (atom-one-dark-theme . [(20180607 1638) nil "Atom One Dark color theme" single ((:commit . "1f1185bf667a38d3d0d180ce85fd4c131818aae2") (:url . "https://github.com/jonathanchu/atom-one-dark-theme"))]) (atom-dark-theme . [(20170710 1612) nil "An Emacs port of the Atom Dark theme from Atom.io." single ((:commit . "7fb37fd953e417acbcf7dd3f36e3167bed9bc887") (:keywords "themes" "atom" "dark") (:url . "https://github.com/whitlockjc/atom-dark-theme-emacs"))]) (async-await . [(20170208 350) ((emacs (25)) (promise (1 0))) "Async/Await" single ((:commit . "56ab90e4019ed1f81fd4ad9e8701b5cec7ffa795") (:keywords "async" "await" "convenience") (:url . "https://github.com/chuntaro/emacs-async-await"))]) (async . [(20180527 1030) nil "Asynchronous processing in Emacs" tar ((:commit . "d17c11e6082aa51f421bb037b828bdb15f405618") (:keywords "async") (:url . "https://github.com/jwiegley/emacs-async"))]) (assess . [(20170504 657) ((emacs (24 1)) (m-buffer (0 15))) "Test support functions" tar ((:commit . "e5b0415126c6bd24bd220759ff04220d963a0195"))]) (asn1-mode . [(20170728 1926) ((emacs (24 3)) (s (1 10 0))) "ASN.1/GDMO mode for GNU Emacs" single ((:commit . "d5d4a8259daf708411699bcea85d322f18beb972") (:keywords "languages" "processes" "tools") (:url . "https://github.com/kawabata/asn1-mode/"))]) (asilea . [(20150105 725) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single ((:commit . "2aab1cc63b64ef08d12e84fd7ba5c94065f6039f") (:url . "https://github.com/Fanael/asilea"))]) (arview . [(20160419 1409) nil "extract and view archives in the temporary directory" single ((:commit . "5437b4221b64b238c273a651d4792c577dba6d45") (:keywords "files") (:url . "https://github.com/afainer/arview"))]) (artbollocks-mode . [(20170523 2122) nil "Improve your writing (especially about art)" single ((:commit . "33a41ca4f8206f57e5498a526d3b0ea18d08bb93") (:url . "https://github.com/sachac/artbollocks-mode"))]) (arjen-grey-theme . [(20170522 1347) nil "A soothing dark grey theme" single ((:commit . "4cd0be72b65d42390e2105cfdaa408a1ead8d8d1") (:keywords "faces") (:url . "https://github.com/credmp/arjen-grey"))]) (ariadne . [(20131117 911) ((bert (0 1))) "Ariadne plugin for Emacs" single ((:commit . "6fe401c7f996bcbc2f685e7971324c6f5e5eaf15") (:keywords "comm" "convenience" "processes"))]) (aria2 . [(20141107 1517) ((emacs (24 4))) "Control aria2c commandline tool from Emacs" single ((:commit . "7a944c5100812269369225af7aa9580fedab175f") (:keywords "download" "bittorrent" "aria2") (:url . "https://bitbucket.org/ukaszg/aria2-mode"))]) (arduino-mode . [(20180508 1736) ((emacs (25)) (cl-lib (0 5)) (spinner (1 7 3))) "Major mode for editing Arduino code." tar ((:commit . "e39cb1c02acb6676aea35f93fbd0d86badce6a38") (:keywords "languages" "arduino") (:url . "https://github.com/stardiviner/arduino-mode"))]) (archive-rpm . [(20180706 532) ((emacs (24 4))) "RPM and CPIO support for archive-mode" tar ((:commit . "59f83caebbd2f92fd634f6968e6d17b50ffa3dc7"))]) (archive-region . [(20140201 1542) nil "Move region to archive file instead of killing" single ((:commit . "0d357d4c42a6a248c457f358f81b20fd20fede2f") (:keywords "languages") (:url . "http://www.emacswiki.org/cgi-bin/wiki/download/archive-region.el"))]) (arch-packer . [(20170730 621) ((emacs (25 1)) (s (1 11 0)) (async (1 9 2)) (dash (2 12 0))) "Arch Linux package management frontend" single ((:commit . "940e96f7d357c6570b675a0f942181c787f1bfd7") (:url . "https://github.com/brotzeitmacher/arch-packer"))]) (apt-sources-list . [(20180527 541) ((emacs (24 4))) "Mode for editing APT source.list files" single ((:commit . "44112833b3fa7f4d7e43708e5996782e22bb2fa3") (:url . "https://git.korewanetadesu.com/apt-sources-list.git"))]) (apropospriate-theme . [(20180718 1101) nil "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." tar ((:commit . "97a26598a4d64f8339f7b12818d67425057235be") (:keywords "color" "theme") (:url . "https://github.com/waymondo/apropospriate-theme"))]) (aproject . [(20150605 206) nil "Basic project framework for Emacs" tar ((:commit . "3c7d23c341862dfd77fd0a64775df12ddb44ab54") (:keywords "environment" "project") (:url . "https://github.com/vietor/aproject"))]) (applescript-mode . [(20090320 2332) nil "major mode for editing AppleScript source" single ((:commit . "8f888cd80af1e0902b5609143facd3051bc94892") (:keywords "languages" "tools"))]) (apples-mode . [(20110120 2018) nil "Major mode for editing and executing AppleScript code" tar ((:commit . "83a9ab0d6ba82496e2f7df386909b1a55701fccb") (:keywords "applescript" "languages"))]) (apiwrap . [(20180602 1531) ((emacs (25))) "api-wrapping macros" single ((:commit . "e4c9c57d6620a788ec8a715ff1bb50542edea3a6") (:keywords "tools" "maint" "convenience") (:url . "https://github.com/vermiculus/apiwrap.el"))]) (apib-mode . [(20170520 658) ((markdown-mode (2 1))) "Major mode for API Blueprint files" single ((:commit . "6cc7c6f21b8e415b1718bb6a07ab2182e9e9dde6") (:keywords "tools" "api-blueprint") (:url . "http://github.com/w-vi/apib-mode"))]) (apel . [(20170122 1458) nil "APEL (A Portable Emacs Library) provides support for portable Emacs Lisp programs" tar ((:commit . "339eb28ffae3165255a79de9b1fd362f43cd37c3"))]) (apache-mode . [(20180723 2051) nil "major mode for editing Apache configuration files" single ((:commit . "d2ac57942f852a727db4fc73004e1e8f046cb657") (:keywords "languages" "faces") (:url . "https://github.com/emacs-php/apache-mode"))]) (aozora-view . [(20140310 617) nil "Aozora Bunko text Emacs viewer." tar ((:commit . "b0390616d19e45f15f9a2f5d5688274831e721fd") (:keywords "text") (:url . "https://github.com/kawabata/aozora-view"))]) (anzu . [(20161017 907) ((emacs (24 3))) "Show number of matches in mode-line while searching" single ((:commit . "e6c56ca8b23ac433f7be58b6f3f50801dd4164e4") (:url . "https://github.com/syohex/emacs-anzu"))]) (anyins . [(20131229 241) nil "Insert content at multiple places from shell command or kill-ring" single ((:commit . "83844c17ac9b5b6c7655ee556b75689e4c8ea663") (:keywords "insert" "rectangular") (:url . "http://github.com/antham/anyins"))]) (anybar . [(20160816 721) nil "Control AnyBar from Emacs" single ((:commit . "7a0743e0d31bcb36ab1bb2e351f3e7139c422ac5") (:keywords "anybar"))]) (anx-api . [(20140208 714) nil "Interact with the AppNexus API from Emacs." single ((:commit . "b2411ebc966ac32c3ffc61bc22bf183834df0fa0") (:keywords "convenience" "json" "rest" "api" "appnexus"))]) (anti-zenburn-theme . [(20180712 1138) nil "Low-contrast Zenburn-inverted theme" single ((:commit . "dbafbaa86be67c1d409873f57a5c0bbe1e7ca158") (:url . "https://github.com/m00natic/anti-zenburn-theme"))]) (ant . [(20160211 743) nil "helpers for compiling with ant" single ((:commit . "510b5a3f57ee4b2855422d88d359a28922c1ab70") (:keywords "compilation" "ant" "java"))]) (ansible-vault . [(20170111 1318) ((emacs (24 3))) "Minor mode for editing ansible vault files" single ((:commit . "71d1df3b1c2d1569b6c3091a9d54baf2ebc7019d") (:keywords "ansible" "ansible-vault" "tools") (:url . "http://github.com/zellio/ansible-vault-mode"))]) (ansible-doc . [(20160924 124) ((emacs (24 3))) "Ansible documentation Minor Mode" single ((:commit . "86083a7bb2ed0468ca64e52076b06441a2f8e9e0") (:keywords "tools" "help") (:url . "https://github.com/lunaryorn/ansible-doc.el"))]) (ansible . [(20170926 1951) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:commit . "9da54a2a426dca259ec9c2a8a60fb58e954be5bc") (:url . "http://101000lab.org"))]) (ansi . [(20150703 126) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single ((:commit . "12b4c5d91b3da1902838f421e5af6d40e2cd57dd") (:keywords "color" "ansi") (:url . "http://github.com/rejeep/ansi"))]) (annoying-arrows-mode . [(20161023 2346) ((cl-lib (0 5))) "Ring the bell if using arrows too much" single ((:commit . "3c42e9807d7696da2da2a21b63beebf9cdb3f5dc"))]) (annotate-depth . [(20160520 1340) nil "Annotate buffer if indentation depth is beyond threshold." single ((:commit . "fcb24fa36287250e40d195590c4ca4a8a696277b") (:keywords "convenience") (:url . "https://github.com/netromdk/annotate-depth"))]) (annotate . [(20171110 2336) nil "annotate files without changing them" single ((:commit . "dedbd9e5d5286f1ca8ad73e489d408a20f06156c") (:url . "https://github.com/bastibe/annotate.el"))]) (anki-editor . [(20180715 151) ((emacs (25)) (request (0 3 0)) (dash (2 12 0))) "Minor mode for making Anki cards with Org" tar ((:commit . "11dbf078957a7d291f5c767cd2936d4341c1864d") (:url . "https://github.com/louietan/anki-editor"))]) (angular-snippets . [(20140513 2223) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar ((:commit . "af5ae0a4a8603b040446c28afcf6ca01a8b4bd7b"))]) (angular-mode . [(20151201 1327) nil "Major mode for Angular.js" tar ((:commit . "8720cde86af0f1859ccc8580571e8d0ad1c52cff") (:keywords "languages" "javascript") (:url . "https://github.com/omouse/angularjs-mode"))]) (angry-police-captain . [(20120829 552) nil "Show quote from http://theangrypolicecaptain.com in the minibuffer" single ((:commit . "d11931c5cb63368dcc4a48797962428cca6d3e9d") (:keywords "games" "web" "fun"))]) (android-mode . [(20170323 115) nil "Minor mode for Android application development" single ((:commit . "f274da87429617b0b9c5889d46b36de64d982da4") (:keywords "tools" "processes") (:url . "https://github.com/remvee/android-mode"))]) (anaphora . [(20180618 1500) nil "anaphoric macros providing implicit temp variables" single ((:commit . "3b2da3f759b244975852e79721c4a2dbad3905cf") (:keywords "extensions") (:url . "http://github.com/rolandwalker/anaphora"))]) (anaconda-mode . [(20180707 1010) ((emacs (25)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single ((:commit . "7d28ae061c226ca2e277ecb9d0928647d9a30154") (:url . "https://github.com/proofit404/anaconda-mode"))]) (amx . [(20180627 1555) ((emacs (24 4)) (s (0))) "Alternative M-x with extra features." single ((:commit . "260e7c013690d412ec8d965c282572505596636d") (:keywords "convenience" "usability") (:url . "http://github.com/DarwinAwardWinner/amx/"))]) (ample-zen-theme . [(20150119 1354) nil "AmpleZen Theme for Emacs 24" single ((:commit . "b277bb7abd4b6624e8d59f02474b79af50a007bd") (:keywords "theme" "dark" "emacs 24") (:url . "https://github.com/mjwall/ample-zen"))]) (ample-theme . [(20180207 945) nil "Calm Dark Theme for Emacs" tar ((:commit . "366698400c555211c2082962a5d74f3dd79a78c8") (:keywords "theme" "dark") (:url . "https://github.com/jordonbiondo/ample-theme"))]) (ample-regexps . [(20151023 300) nil "ample regular expressions for Emacs" tar ((:commit . "cbe91e148cac1ee8e223874dc956ed4cf607f046") (:keywords "regexps" "extensions" "tools"))]) (amd-mode . [(20180111 602) ((emacs (25)) (projectile (20161008 47)) (s (1 9 0)) (f (0 16 2)) (seq (2 16)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single ((:commit . "01fd19e0d635ccaf8e812364d8720733f2e84126") (:keywords "javascript" "amd" "projectile"))]) (all-the-icons-ivy . [(20180225 630) ((emacs (24 4)) (all-the-icons (2 4 0)) (ivy (0 8 0))) "Shows icons while using ivy and counsel" single ((:commit . "52b3f4a8a4a038998943afaffb5ff25054f65af4") (:keywords "faces"))]) (all-the-icons-gnus . [(20180510 2354) ((emacs (24 4)) (dash (2 12 0)) (all-the-icons (3 1 0))) "Shows icons for in Gnus" single ((:commit . "27f78996da0725943bcfb2d18038e6f7bddfa9c7") (:keywords "mail" "tools"))]) (all-the-icons-dired . [(20170418 1431) ((emacs (24 4)) (all-the-icons (2 2 0))) "Shows icons for each file in dired mode" single ((:commit . "980b7747d6c4a7992a1ec56afad908956db0a519") (:keywords "files" "icons" "dired"))]) (all-the-icons . [(20180125 757) ((emacs (24 3)) (memoize (1 0 1))) "A library for inserting Developer icons" tar ((:commit . "52d1f2d36468146c93aaf11399f581401a233306") (:keywords "convenient" "lisp") (:url . "https://github.com/domtronn/all-the-icons.el"))]) (all-ext . [(20170114 1805) ((all (1 0))) "M-x all with helm-swoop/anything/multiple-cursors/line-number" single ((:commit . "9f4ef84a147cf4e0af6ef45826d6cb3558db6b88") (:keywords "all" "search" "replace" "anything" "helm" "helm-swoop" "occur") (:url . "https://github.com/rubikitch/all-ext"))]) (align-cljlet . [(20160112 1301) ((clojure-mode (1 11 5))) "Space align various Clojure forms" single ((:commit . "602d72a7ad52788a0265e3c6da519464a98166b8") (:url . "https://github.com/gstamp/align-cljlet"))]) (alert . [(20180403 38) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single ((:commit . "667d9c7848c723eb392ab9bacae07966da3e3504") (:keywords "notification" "emacs" "message") (:url . "https://github.com/jwiegley/alert"))]) (alect-themes . [(20180504 1020) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar ((:commit . "4d90833a7381123a979f73fa97a013071ca7ff00") (:keywords "color" "theme") (:url . "https://github.com/alezost/alect-themes"))]) (alda-mode . [(20180607 2305) ((emacs (24 0))) "An Alda major mode" single ((:commit . "c49dad79591de6662bf5f4eb79acac1d5dd2610e") (:keywords "alda" "highlight") (:url . "http://gitlab.com/jgkamat/alda-mode"))]) (alchemist . [(20180312 604) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4)) (s (1 11 0))) "Elixir tooling integration into Emacs" tar ((:commit . "6f99367511ae209f8fe2c990779764bbb4ccb6ed") (:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist") (:url . "http://www.github.com/tonini/alchemist.el"))]) (alan-mode . [(20180711 2148) ((flycheck (32)) (emacs (25 1)) (s (1 12))) "Major mode for editing M-industries Alan files" single ((:commit . "02869448b4637516064900caf135aeb4f07bc5e4") (:keywords "alan" "languages") (:url . "https://github.com/M-industries/AlanForEmacs"))]) (airplay . [(20130212 426) ((request (20130110 2144)) (simple-httpd (1 4 1)) (deferred (0 3 1))) "Airplay bindings to Emacs" tar ((:commit . "bd690aafcae3a887946e1bba8327597932d964ad") (:keywords "appletv" "airplay") (:url . "https://github.com/gongo/airplay-el"))]) (airline-themes . [(20180410 2106) ((powerline (2 3))) "vim-airline themes for emacs powerline" tar ((:commit . "8b528fbae0e557461315bed82883275d58df41f2") (:keywords "evil" "mode-line" "powerline" "airline" "themes") (:url . "http://github.com/AnthonyDiGirolamo/airline-themes"))]) (ahungry-theme . [(20180130 1928) ((emacs (24))) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." single ((:commit . "a038d91ec593d1f1b19ca66a0576d59bbc24c523") (:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme") (:url . "https://github.com/ahungry/color-theme-ahungry"))]) (ahk-mode . [(20160320 1521) ((emacs (24 3))) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single ((:commit . "9cfc4840507f6cc8016fdede84ad90df53285359") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation") (:url . "https://github.com/ralesi/ahk-mode"))]) (ahg . [(20180724 519) nil "Alberto's Emacs interface for Mercurial (Hg)" single ((:url . "https://bitbucket.org/agriggio/ahg"))]) (aggressive-indent . [(20180626 1721) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:commit . "8e70039c7190639c43794cb75eae118c2faaa0d1") (:keywords "indent" "lisp" "maint" "tools") (:url . "https://github.com/Malabarba/aggressive-indent-mode"))]) (aggressive-fill-paragraph . [(20170902 705) ((dash (2 10 0))) "A mode to automatically keep paragraphs filled" single ((:commit . "bcbc63d1c93cd8dc5bf2fc6eb4988fa76375c631") (:keywords "fill-paragraph" "automatic" "comments") (:url . "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode"))]) (ag . [(20180225 240) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single ((:commit . "77b4f50c5372bf219da496567b2b867261f0d354"))]) (afternoon-theme . [(20140104 1059) ((emacs (24 1))) "Dark color theme with a deep blue background" single ((:commit . "89b1d778a1f8b385775c122f2bd1c62f0fbf931a") (:keywords "themes") (:url . "http://github.com/osener/emacs-afternoon-theme"))]) (aes . [(20171028 2323) nil "Implementation of AES" single ((:commit . "b7d5da89c3443292e4f0b1c9d254d459933cf5af") (:keywords "data" "tools") (:url . "https://github.com/Sauermann/emacs-aes"))]) (adoc-mode . [(20160314 1430) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ((:commit . "745884359a1b8826ede2c4cfd2f0b5478953ac40") (:keywords "wp" "asciidoc") (:url . "https://github.com/sensorflo/adoc-mode/wiki"))]) (addressbook-bookmark . [(20171107 2234) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single ((:commit . "981355dcfb7477c00d41560a5a66fce73f02c0f5") (:url . "https://github.com/thierryvolpiatto/addressbook-bookmark"))]) (add-node-modules-path . [(20180710 1642) nil "Add node_modules to your exec-path" single ((:commit . "f31e69ccb681f882aebb806ce6e9478e3ac39708") (:keywords "javascript" "node" "node_modules" "eslint") (:url . "https://github.com/codesuki/add-node-modules-path"))]) (add-hooks . [(20171216 1723) nil "Functions for setting multiple hooks" single ((:commit . "1845137703461fc44bd77cf24014ba58f19c369d") (:keywords "lisp") (:url . "https://github.com/nickmccurdy/add-hooks"))]) (adafruit-wisdom . [(20180224 1652) ((emacs (25))) "Get/display adafruit.com quotes" single ((:commit . "aafc01726f1b3160321d40160298a0e1b054b382") (:keywords "games") (:url . "https://github.com/gonewest818/adafruit-wisdom.el"))]) (actionscript-mode . [(20180527 1001) nil "A simple mode for editing Actionscript 3 files" single ((:commit . "65abd58e198458a8e46748c5962c41d80d60c4ea") (:keywords "language" "modes"))]) (ack-menu . [(20150504 1322) ((mag-menu (0 1 0))) "A menu-based front-end for ack" single ((:commit . "f77be93a4697926ecf3195a355eb69580f695f4d") (:keywords "tools" "matching" "convenience") (:url . "https://github.com/chumpage/ack-menu"))]) (achievements . [(20150530 1126) ((keyfreq (0 0 3))) "Achievements for emacs usage." tar nil]) (ace-window . [(20180607 1223) ((avy (0 2 0))) "Quickly switch windows." single ((:commit . "92d20e7e75dbb2ba0b879d3aedb8bed51fcee6a7") (:keywords "window" "location") (:url . "https://github.com/abo-abo/ace-window"))]) (ace-popup-menu . [(20171231 2215) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" single ((:commit . "7b436a0d9e896463d00afbeb7e49a59cc6670e9c") (:keywords "convenience" "popup" "menu") (:url . "https://github.com/mrkkrp/ace-popup-menu"))]) (ace-pinyin . [(20170430 2326) ((avy (0 2 0)) (pinyinlib (0 1 0))) "Jump to Chinese characters using avy or ace-jump-mode" single ((:commit . "a9df88c1e6a32a4f4895acbb8c45383693c494c1") (:keywords "extensions") (:url . "https://github.com/cute-jumper/ace-pinyin"))]) (ace-mc . [(20160408 1737) ((ace-jump-mode (1 0)) (multiple-cursors (1 0)) (dash (2 10 0))) "Add multiple cursors quickly using ace jump" single ((:commit . "b106bf6a6c78c3e026fbe9a99a34d6239adce4fd") (:keywords "motion" "location" "cursor") (:url . "https://github.com/mm--/ace-mc"))]) (ace-link . [(20180308 100) ((avy (0 4 0))) "Quickly follow links" single ((:commit . "fae5d508ff519ba1fab21c51f46c0906fd82229f") (:keywords "convenience" "links" "avy") (:url . "https://github.com/abo-abo/ace-link"))]) (ace-jump-zap . [(20170717 1149) ((ace-jump-mode (1 0)) (dash (2 10 0))) "Character zapping, `ace-jump-mode` style" single ((:commit . "52b5d4c6c73bd0fc833a0dcb4e803a5287d8cae8") (:keywords "convenience" "tools" "extensions") (:url . "https://github.com/waymondo/ace-jump-zap"))]) (ace-jump-mode . [(20140616 115) nil "a quick cursor location minor mode for emacs" single ((:commit . "8351e2df4fbbeb2a4003f2fb39f46d33803f3dac") (:keywords "motion" "location" "cursor") (:url . "https://github.com/winterTTr/ace-jump-mode/"))]) (ace-jump-helm-line . [(20160918 1136) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single ((:commit . "1483055255df3f8ae349f7520f05b1e43ea3ed37") (:keywords "extensions") (:url . "https://github.com/cute-jumper/ace-jump-helm-line"))]) (ace-jump-buffer . [(20171031 850) ((avy (0 4 0)) (dash (2 4 0))) "fast buffer switching extension to `avy'" single ((:commit . "ae5be0415c823f7bb66833aa4af2180d4cf99cef") (:url . "https://github.com/waymondo/ace-jump-buffer"))]) (ace-isearch . [(20170506 12) ((emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy, helm-swoop and swiper" single ((:commit . "0502f95e333c8059a678745e5a112542965661d1") (:url . "https://github.com/tam17aki/ace-isearch"))]) (ace-flyspell . [(20170308 2109) ((avy (0 4 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single ((:commit . "538d4f8508d305262ba0228dfe7c819fb65b53c9") (:keywords "extensions") (:url . "https://github.com/cute-jumper/ace-flyspell"))]) (academic-phrases . [(20180723 321) ((dash (2 12 0)) (s (1 12 0)) (ht (2 0)) (emacs (24))) "Bypass that mental block when writing your papers." single ((:commit . "25d9cf67feac6359cb213f061735e2679c84187f") (:keywords "academic" "convenience" "papers" "writing" "wp") (:url . "https://github.com/nashamri/academic-phrases"))]) (ac-sly . [(20170728 327) ((sly (1 0 0 -3)) (auto-complete (1 4)) (cl-lib (0 5))) "An auto-complete source using sly completions" single ((:commit . "bf69c687c4ecf1994349d20c182e9b567399912e") (:url . "https://github.com/qoocku/ac-sly"))]) (ac-slime . [(20171027 1400) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single ((:commit . "6c80cb602ddad46486288f94ad7546396c6e4b1a") (:url . "https://github.com/purcell/ac-slime"))]) (ac-skk . [(20141229 1719) ((auto-complete (1 3 1)) (ddskk (16 0 50)) (tinysegmenter (0)) (cl-lib (0 5))) "auto-complete-mode source for DDSKK a.k.a Japanese input method" single ((:commit . "d25a265930430d080329789fb253d786c01dfa24") (:keywords "convenience" "auto-complete") (:url . "https://github.com/myuhe/ac-skk.el"))]) (ac-rtags . [(20170522 2154) ((auto-complete (1 4 0)) (rtags (2 10))) "auto-complete back-end for RTags" single ((:commit . "9e2bbc5d562773506255143c22a52f4bc40f19e6") (:url . "http://rtags.net"))]) (ac-racer . [(20170114 9) ((emacs (24 3)) (auto-complete (1 5 0)) (racer (0 0 2))) "auto-complete source of racer" single ((:commit . "4408c2d652dec0432e20c05e001db8222d778c6b") (:url . "https://github.com/syohex/emacs-ac-racer"))]) (ac-php-core . [(20180629 144) ((emacs (24)) (dash (1)) (php-mode (1)) (xcscope (1)) (s (1)) (f (0 17 0)) (popup (0 5 0))) "gen tags for php" tar ((:commit . "fac22638f957abf404bbee4e16d9d7b67fcd42d2") (:keywords "completion" "convenience" "intellisense") (:url . "https://github.com/xcwen/ac-php"))]) (ac-php . [(20171201 134) ((ac-php-core (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0))) "auto-completion source for php" single ((:commit . "fac22638f957abf404bbee4e16d9d7b67fcd42d2") (:keywords "completion" "convenience" "intellisense") (:url . "https://github.com/xcwen/ac-php"))]) (ac-octave . [(20180405 2034) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single ((:commit . "fe0f931f2024f43de3c4fff4b1ace672413adeae") (:keywords "octave" "auto-complete" "completion") (:url . "https://github.com/coldnew/ac-octave"))]) (ac-mozc . [(20150227 819) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single ((:commit . "4c6c8be4701010d9362184437c0f783e0335c631") (:url . "https://github.com/igjit/ac-mozc"))]) (ac-math . [(20141116 1327) ((auto-complete (1 4)) (math-symbol-lists (1 0))) "Auto-complete sources for input of mathematical symbols and latex tags" single ((:commit . "c012a8f620a48cb18db7d78995035d65eae28f11") (:keywords "latex" "auto-complete" "unicode" "symbols") (:url . "https://github.com/vitoshka/ac-math"))]) (ac-js2 . [(20140906 442) ((js2-mode (20090723)) (skewer-mode (1 4))) "Auto-complete source for Js2-mode, with navigation" tar ((:commit . "721c482e1d4a08f4a29a74437257d573e8f69969") (:url . "https://github.com/ScottyB/ac-js2"))]) (ac-ispell . [(20151031 1926) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single ((:commit . "22bace7387e9012002a6a444922f75f9913077b0") (:url . "https://github.com/syohex/emacs-ac-ispell"))]) (ac-inf-ruby . [(20131115 350) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ((:commit . "ee53fc9c61950da9a96df3ff5ef186f9a9faf151") (:keywords "languages" "tools"))]) (ac-html-csswatcher . [(20151208 1313) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single ((:commit . "b0f3e7e1a3fe49e88b6eb6432377232fc715f221") (:keywords "html" "css" "less" "auto-complete") (:url . "https://github.com/osv/ac-html-csswatcher"))]) (ac-html-bootstrap . [(20160302 901) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar ((:commit . "481e6e441cd566554ce71cd8cb28c9e7ebb1c24b") (:keywords "html" "auto-complete" "bootstrap" "cssx") (:url . "https://github.com/osv/ac-html-bootstrap"))]) (ac-html-angular . [(20151224 2319) ((web-completion-data (0 1))) "auto complete angular15 data for `ac-html' and `company-web'" tar ((:commit . "6bafe09afe03112ca4183d58461c1a6f6c2b3c67") (:keywords "html" "auto-complete" "angular") (:url . "https://github.com/osv/ac-html-bootstrap"))]) (ac-html . [(20151005 31) ((auto-complete (1 4)) (s (1 9)) (f (0 17)) (dash (2 10))) "auto complete source for html tags and attributes" tar ((:commit . "668154cba123c321d1b07c2dc8b26d14092253b8") (:keywords "html" "auto-complete" "slim" "haml" "jade") (:url . "https://github.com/cheunghy/ac-html"))]) (ac-helm . [(20160318 1933) ((helm (1 6 3)) (auto-complete (1 4 0)) (popup (0 5 0)) (cl-lib (0 5))) "Helm interface for auto-complete" single ((:commit . "baf2b1e04bcffa835084389c0fab415f26efbf32") (:keywords "completion" "convenience" "helm"))]) (ac-haskell-process . [(20150423 702) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:commit . "0362d4323511107ec70e7165cb612f3ab01b712f") (:keywords "languages"))]) (ac-geiser . [(20130928 2347) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar ((:commit . "502d18a8a0bd4b5fdd495a99299ba2a632c5cd9a"))]) (ac-etags . [(20161001 807) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ((:commit . "7983e631c226fe0fa53af3b2d56bf4eca3d785ce") (:url . "https://github.com/syohex/emacs-ac-etags"))]) (ac-emoji . [(20150823 11) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar ((:commit . "40a639764eb654f1b4bb705c817b66032a26ff2b") (:url . "https://github.com/syohex/emacs-ac-emoji"))]) (ac-emmet . [(20131015 858) ((emmet-mode (1 0 2)) (auto-complete (1 4))) "auto-complete sources for emmet-mode's snippets" single ((:commit . "88f24876ee3b759978d4614a758280b5d512d543") (:keywords "completion" "convenience" "emmet") (:url . "https://github.com/yasuyk/ac-emmet"))]) (ac-emacs-eclim . [(20170924 1339) ((eclim (0 3)) (auto-complete (1 5))) "auto-complete source for eclim" single ((:commit . "6396ad1cd25c0a197109343ec1cce5d5080acdff"))]) (ac-dcd . [(20170323 601) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single ((:commit . "1614aa624252e3445b0392c8a9b7197084f3e422") (:keywords "languages") (:url . "http://github.com/atilaneves/ac-dcd"))]) (ac-clang . [(20180709 2246) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar ((:commit . "3294b968eb1a8317049190940193f9da47c085ef") (:keywords "completion" "convenience" "intellisense") (:url . "https://github.com/yaruopooner/ac-clang"))]) (ac-cider . [(20161006 19) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single ((:commit . "fa13e067dd9c8c76151c7d140a2803da1d109b84") (:keywords "languages" "clojure" "nrepl" "cider" "compliment") (:url . "https://github.com/clojure-emacs/ac-cider"))]) (ac-capf . [(20151031 1917) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single ((:commit . "17571dba0a8f98111f2ab758e9bea285b263781b") (:url . "https://github.com/syohex/emacs-ac-capf"))]) (ac-c-headers . [(20151021 134) ((auto-complete (1 3 1))) "auto-complete source for C headers" single ((:commit . "de13a1d35b311e6601556d8ef163de102057deea") (:url . "http://hins11.yu-yake.com/"))]) (ac-alchemist . [(20150907 2356) ((auto-complete (1 5 0)) (alchemist (1 5 0)) (cl-lib (0 5))) "auto-complete source for alchemist" single ((:commit . "b1891c3d41aed83f61d78a609ea97be5cc2758d9") (:url . "https://github.com/syohex/emacs-ac-alchemist"))]) (abyss-theme . [(20170808 645) ((emacs (24))) "A dark theme with contrasting colours." single ((:commit . "18791c6e8d9cc2b4815c9f08627a2e94fc0eeb14") (:keywords "theme" "dark" "contrasting colours") (:url . "https://github.com/mgrbyte/emacs-abyss-theme"))]) (abl-mode . [(20170604 1309) nil "Python TDD minor mode" single ((:commit . "9aff997fe7b4caded60150a832e3704ac55e69e5") (:url . "http://github.com/afroisalreadyinu/abl-mode"))]) (abgaben . [(20171118 2246) ((pdf-tools (0 80)) (f (0 19 0)) (s (1 11 0))) "review and correct assignments received by mail" single ((:commit . "20d14830f07d66e2a04bcad1498a4a6fbf4b4451") (:keywords "mail" "outlines" "convenience") (:url . "http://arne.chark.eu/"))]) (abc-mode . [(20171020 319) nil "Major mode for editing abc music files" single ((:commit . "238deedeb6c90df168045552eb463cfae9e1f88f") (:keywords "local" "docs"))]) (aa-edit-mode . [(20170118 1920) ((emacs (24 3)) (navi2ch (2 0 0))) "Major mode for editing AA(S_JIS Art) and .mlt file" single ((:commit . "1dd801225b7ad3c23ad09698f5e77f0df7012a65") (:keywords "wp" "text" "shiftjis" "mlt" "yaruo"))]) (a . [(20170720 553) ((emacs (25))) "Associative data structure functions" single ((:commit . "d50b953cb0a7402107cdd6275cff9d31d09835a3") (:keywords "lisp") (:url . "https://github.com/plexus/a.el"))]) (@ . [(20140707 520) ((queue (0 1)) (emacs (24))) "multiple-inheritance prototype-based objects DSL" tar ((:commit . "114dfe3761bf0c9dd89f794106c3a6a436ed06cc") (:url . "https://github.com/skeeto/at-el"))]) (4clojure . [(20131014 1507) ((json (1 2)) (request (0 2 0))) "Open and evaluate 4clojure.com questions" single ((:commit . "3cdfd356c24cd3518397d29ae833f56a4d20b4ca") (:keywords "languages" "data"))]) (2048-game . [(20151026 1233) nil "play 2048 in Emacs" single ((:url . "https://bitbucket.org/zck/2048.el"))]) (0xc . [(20170125 1953) ((emacs (24 4)) (s (1 11 0))) "Base conversion made easy" single ((:commit . "12c2c6118c062a49594965c69e6a17bb46339eb2") (:keywords "base" "conversion") (:url . "http://github.com/AdamNiederer/0xc"))]) (0blayout . [(20161007 2307) nil "Layout grouping with ease" single ((:commit . "873732ddb99a3ec18845a37467ee06bce4e61d87") (:keywords "convenience" "window-management") (:url . "https://github.com/etu/0blayout"))]))
